>>CSS选择器
1, 元素选择器
2, 类选择器
3, ID选择器
4, 后代选择器 #container span
5, 子选择器 #container>span
6, 相邻兄弟选择器 #container+div 
7, 后面所有兄弟选择器 #container~div 
8, 通用选择器 *
9, 伪类选择器 a:hover
10, 分组选择器 div, p

>>伪类选择器
1, 状态伪类
a:link; //未选择时
a:visited; //已点击
a:hover; //鼠标悬停
a:active; //放开鼠标的一瞬间
:focus; //获得输入焦点
2, 结构伪类
:first-child;
:last-child;
:nth-child(n);
:first-of-type;
可以通过结构伪类来对<table>中的<tr>和<td>来进行精确的样式设置, 如
tr:nth-child(2) td:nth-child(3){background-color: red;}

>>伪元素选择器
::selection; //用户选中的内容
::before; //内容之前
::after; //内容之后
::first-line; //首行
::first-letter; //首字符

>>样式的优先级
用户设置的样式 > 网页制作者的样式 > 浏览器默认样式;
一般情况下，<link>放在<style>之前，所以，
内联样式 > 嵌入样式 > 外部样式；

>>选择器的优先级
内联样式 > ID选择器(100) > 类选择器(10) > 元素选择器(1) > 通用选择器;
p span{} //权值为1+1=2
p span.warning{} //权值为1+1+10=12
#footer .note p{} //权值为100+10+1=111

>>字体样式
1, font-family: '微软雅黑';
注：指定字体系列必须在用户电脑上已经安装，否则显示不了；
2, font-size: 12px / 1.5em / 150%;
注：em 和 % 是相对于父元素的尺寸比例;
3, font-weight: normal / bold;
4, font-style: normal / italic;
5, color: red / rgb(100, 150, 100) / rgba(100, 150, 100, 0.5) / #00ff00;
6, font: italic bold 12px/1.5em "宋体", sans-serif;
注：这是所有字体样式的缩写;
font-size和font-family是必不可少的，其他样式如果缺省则是默认值;
font-size与line-height中间要加入'/'斜杠;

>>文本样式
1, text-decoration: none / underline / overline / line-through; //文本装饰
2, text-indent: 2em; //首行缩进，相对于字体大小的比例 
3, line-height: 2em; //行高，相对于字体大小的比例
4, word-spacing: 10px; //单词间距
5, letter-spacing: 10px; //字母间距
6, text-align: center / left / right / justify; //对齐方式

>>列表样式
list-style:
1)list-style-type: disc/circle/decimal;
2)list-style-position: outside/inside;
3)list-style-image: url("...");

>>em 和 %
1, em
给非font-size属性设置em单位时，是相对于自身font-size的比值；
给font-size设置em单位时，则是相对于父元素的font-size的比值;
2, %
给元素的width, height, padding, margin属性设置百分比，是参照父元素的宽度和高度的比值；
给transform: translate(50%, 50%), 是按照元素自身的宽度和高度的比值；

>>盒模型
1, width / height
注：默认情况下，盒子的宽度和高度指的是内容的尺寸，不包括边框和内外边距;
2, border
border: 2px solid red;
border由三个具体属性组成：
border-width;
border-style: solid / dotted / dashed;
border-color;
border包括四个方向, 依次为
border-top, border-right, border-bottom, border-left;
3, padding
padding: 20px 10px 15px 30px;
4, margin
margin: 20px 10px 15px 30px;
5, outline
覆盖在border外层，使用同border;

>>overflow属性
内容超出盒子时的显示设置:
visible(默认)、hidden、scroll、auto;

>>将input输入框显示为一条横线输入
input输入框当点击时默认会显示outline，所以要设置outline为none, 如下
input{border: none; outline: none; border-bottom: 2px solid #000;}

>>CSS3盒模型
box-sizing: content-box(默认值) / border-box;
content-box: 元素的width = 内容的宽度;
border-box: 元素的width = 内容的宽度 + padding*2 + border*2;

>>布局模型
1, 流模型(flow)
默认的网页布局模式;
2, 浮动模型(float)
可以让块状元素在一行显示;
float: left / right;
3, 定位，又叫层模型
1)position: static; //默认的流模式
2)position: absolute; //绝对定位
相对于其最接近的一个具有定位属性的父元素进行绝对定位;
3)position: relative; //相对定位
相对于自身在正常文档流中的原始位置进行定位;
4)position: fixed; //固定定位
相对于浏览器窗口进行定位;
注：absolute和fixed会使定位元素脱离文档流，而relative不会;
一般对父元素设置相对定位，具体子元素使用绝对定位;

>>浮动的注意事项
1, 容器内元素浮动会导致容器高度塌陷，可通过设置容器的 overflow: hidden; 来阻止容器高度塌陷;
2, 清除元素周围的浮动可用 clear: left/right/both; 来设置;

>>绝对定位与浮动的区别
绝对定位与浮动都会脱离文档流，但在布局时会有区别;
绝对定位直接覆盖在正常文档流中元素的上面，而浮动会挤开行内元素而排列;

>>定位与浮动可以结合起来使用
如果元素只是浮动，那么设置left/right/top/bottom这些值是无效的，如果再加上相对定位，那么这些值就有效了;

>>水平居中
1, 行内元素
通过给父元素设置 text-align: center; 来实现;
2, 块状元素
div{width: 200px; margin: 0 auto;}

>>垂直居中
1, 内联元素
给父元素设置line-height与height的值一致，使子元素垂直居中;
<div>hello</div>
div{width: 200px; height: 200px; line-height: 200px;}
2, 块状元素(宽高已知)：定位 + 外边距
父元素相对定位，子元素绝对定位，
通过设置子元素的left, top为50%，margin-left与margin-top为宽度和高度的一半来实现垂直居中;
<div class="parent">
	<div class="child">
</div>
div.parent{height: 800px; border: 1px solid gray;
	position: relative;}
div.child{width: 200px; height: 200px; 
	position: absolute; left: 50%; top: 50%;
	margin-left: -100px; margin-top: -100px;}
3, 块状元素(宽高未知): 定位 + translate
<div class="parent">
	<div class="child">
</div>
div.parent{height: 800px; border: 1px solid gray;
	position: relative;}
div.child{position: absolute; left: 50%; top: 50%;
	transform: translate(-50%, -50%);}

>>元素分类
1, 块状元素(block)
<div>, <p>, <h1>...<h6>, <ol>, <ul>, <dl>, <table>, 
<address>, <blockquote>, <form>
2, 内联元素(inline)
<a>, <span>, <br>, <i>, <em>, <strong>, <label>, <q>, 
<var>, <cite>, <code>
3, 内联块状元素(inline-block)
<img>, <input>
注：内联元素可以设置内边距和左右外边距，但不能设置宽度高度和上下外边距;

>>两个相邻的元素边框重叠时，可设其中一个元素的外边距为负值来消除重叠，如：
margin-top: -1px;

>>CSS3不同浏览器可能需要的前缀
chrome和safari: -webkit
firefox: -moz
IE: -ms
opera: -o

>>CSS3能做什么
1, 更强大的选择器
2, 圆角效果
3, 块阴影与文字阴影
4, 更多样的色彩定义
5, 渐变效果
6, 个性化字体
7, 多背景图
8, 变换和动画
9, 多栏布局
10, 媒体查询

>>CSS3边框
1, border-radius 
//边框圆角
border-radius: 10px 10px 0 0; 四个方向分别为：
border-top-left-radius, border-top-right-radius, 
border-bottom-right-radius, border-bottom-left-radius;
半圆：
div{width: 200px; height: 100px; border-radius: 100px 100px 0 0;}
圆：
div{width: 100px; height: 100px; border-radius: 50px;}
2, box-shadow 
//盒阴影
box-shadow: 4px 2px 5px red inset, 2px 3px 6px blue;
参数依次为：
x轴偏移量，y轴偏移量，模糊半径，模糊颜色，投影方式；
偏移量可以为负值，右和下为正，左和上为负；
投影方式有outset和inset，默认为outset；

>>CSS3渐变颜色
1, 带透明度的颜色 
rgba(100, 150, 200, 0.3)
2, 线性渐变
linear-gradient(90deg, red, blue, green);
第一个参数表示方向，可以是角度，如90deg，规定向上为0deg，
也可以为英文，如to right，后面的参数表示两个或多个颜色值；
3, 径向渐变
radial-gradient()
注: 渐变可用于background-image的属性值;

>>CSS3字体和文本
1, text-shadow //文本阴影
text-shadow: 2px 4px 5px red;
参数依次为：
x轴偏移量，y轴偏移量，模糊半径，模糊颜色；
2, @font-face //嵌入字体
引用服务器端字体，客户端可以显示用户没有安装的字体;
@font-face{
	font-family: 'my font';
	src: url('***'); //字体在服务器端的地址
}
div{
	font-family: 'my font';
}

>>文本溢出时显示省略号
text-overflow: ellipsis; //文本溢出部分显示方式
overflow: hidden; 
white-space: nowrap; //文本在一行内显示

>>CSS3背景
元素的背景包括边框，内边距和内容区域，不包括外边距;
1, background-color 
//背景颜色
background-color: yellow / #00ff00 / rgb(255, 0, 255);
2, background-image 
//背景图片
background-image: url('paper.jpg');
background-image: linear-gradient(red, yellow, blue);
注：默认情况下，图片放置在元素左上角，并在水平和垂直方向重复；
3, background-repeat 
//图像重复方式
background-repeat: repeat / repeat-x / repeat-y / no-repeat;
默认值为repeat;
4, background-position 
//图片位置
background-position: left/center/right top/center/bottom;
background-position: 200px 300px;
background-position: 20% 50%;
5, background-attachment 
//图片是否固定
设置背景图片是否固定或随着页面的其余部分滚动；
background-attachment: scroll / fixed;
默认值是scroll；
6, background-size
//背景图片大小
background-size: 200px 100px;
注：如果只给出一个值，则高度默认为auto，即保持图片纵横比的前提下自动计算高度；
background-size: 50% 50%; //相对与背景尺寸的百分比，如果只给出一个值则同上
background-size: cover; //图像缩放至能完全覆盖背景(>=背景)
background-size: contain; //图像缩放至宽或高恰好被背景包含(<=背景)
7, background-origin
//背景图片从哪个位置开始显示
background-origin: padding-box / border-box / content-box;
默认值是padding-box, 如果背景不是no-repeat，那么这个属性无效，它会从边框开始显示；
8, background-clip
//背景图片显示区域
background-clip: border-box / padding-box / content-box;
默认值是border-box，即包括边框的整个盒子都能显示;
总结：
1, 后3个背景属性是CSS3新增的;
2, 以上属性可以缩写成background, 如
background: yellow url('xiaoxin.jpg') no-repeat fixed center;
3, 可以同时设置多个背景图片, 中间用逗号隔开，如
background-image: url('xiaoxin1.jpg'), url('xiaoxin2.jpg'), url('xiaoxin3.jpg');
background-position: left top, 100px 0, 0 200px;
background-repeat: no-repeat no-repeat repeat;

>>CSS3选择器
1, 属性选择器
1)[attr] //带有属性attr
2)[attr1][attr2] //带有多个属性
3)[attr=value] //属性值等于value
4)[attr^=value] //属性值以value开头
5)[attr$=value] //属性值以value结尾
6)[attr~=value] //属性值包含单词value，必须是单词
7)[attr*=value] //属性值包含value，不一定是单词
2, 伪类选择器
1):not 
//否定选择器
input:not([type="submit"])
div:not([id="footer"])
2):empty 
//空
没有任何内容的元素, 如 p:empty;
3):first-child 
//本身是第一个子元素
ol>li:first-child //ol里的第一个li元素
4):last-child //本身是最后一个子元素
经常需要对最后一个元素做特殊处理，如
ul>li{border-bottom: 3px solid #ccc;}
ul>li:last-child{border-bottom: none;}
5):nth-child(n) 
//本身是第n个子元素
参数可以为整数值(1,2,3...)，也可以是表达式(2n, 2n+1)，或者是关键词(odd, even);
ol>li:nth-child(2n){background-color: blue;}
ol>li:nth-child(2n+1){background-color: yellow;}
注: 第n个元素，n从1开始;
6):nth-last-child(n) 
//本身是倒数第n个子元素
7):only-child
//本身是唯一子元素
8):first-of-type 
//本身是第一个指定类型的子元素
如div下的第一个p元素，div>p:first-of-type
9):last-of-type
//本身是最后一个指定类型的子元素
10):nth-of-type(n)
//本身是第n个指定类型的子元素
11):nth-last-of-type(n)
//本身是倒数第n个指定类型的子元素
12):only-of-type
//本身是唯一类型的子元素
3, 表单伪类选择器
1):enabled
//可用的表单元素
input[type="text"]:enabled
2):disabled
//不可用的表单元素
input[type="text"]:disabled
3):checked
//选中的单选或复选按钮
input[type="checkbox"]:checked
4):read-only
//设置了"readonly='readonly'"的元素
input[type="text"]:read-only
5):read-write
//与:read-only相反
4, 伪元素
1)::selection
//用鼠标选中的文本
::selection{background-color: red; color: green;}
2)::before 和 ::after
在元素的前面或后面插入内容，常与content属性配合使用；
.effert::before, .effert::after{
	content: '';
}
注：:表示伪类, ::表示伪元素;

>>transform(变换)
transform有两点需要注意：
1)只对块状元素和内联块状元素有效，对行内元素无效;
2)所有的变换默认是以元素的中心位置进行变换，这个位置可以通过transform-origin来改变;
1, rotate()
旋转，参数为正如45deg表示顺时针，为负则逆时针;
例如，使内部盒子旋转，但里面的文本不旋转：
<div id="container">
	<div><span>Hello</span></div>
</div>
#container{width: 200px; height: 200px; border: 1px solid red;}
#container div{width: 200px; height: 200px; background-color: orange;
	transform: rotate(45deg);}
#container div span{display: block; transform: rotate(-45deg);}
2, skew()
扭曲，会改变块状元素的形状;
transform: skew(30deg, 45deg); //元素在水平和垂直方向同时扭曲
transform: skew(30deg); //元素仅在水平方向扭曲，省略y参数默认为0
transform: skewX(30deg); //元素仅在水平方向扭曲
transform: skewY(45deg); //元素仅在垂直方向扭曲
3, scale()
缩放;
transform: scale(2, 0.5); //水平和垂直方向同时缩放
transform: scale(2); //省略y值，则表示垂直方向和水平方向缩放的倍数一样
transform: scaleX(2); //仅在水平方向缩放
transform: scaleY(0.5); //仅在垂直方向缩放
4, translate()
平移，作用相当于相对定位;
transform: translate(100px, 200px); //水平和垂直方向同时移动
transform: translateX(100px); //仅水平方向移动
transform: translateY(200px); //仅垂直方向移动
注：可用translate()来实现元素的水平和垂直居中;
5, transform-origin
设置变换的原点，默认是元素的中心位置；
transform-origin: left/center/right top/center/bottom;
transform-origin: 50% 0;

>>transition(过渡)
1)在默认样式中声明初始样式和过渡属性；
2)在最终状态中声明最终样式;
div{width: 200px; height: 200px; border: 1px solid red;
	transition: width 3s ease 0.5s;}
div:hover{width: 800px;}
注: 如果同时改变多个样式，可以将transition-property设置为all;
1, transition-property
需要过渡的属性，如果同时有多个，可以设置为all;
2, transition-duration
过渡的持续时间;
3, transition-timing-function
过渡函数，包括以下几种：
ease, linear, ease-in, ease-out, ease-in-out; 默认为ease;
4, transition-delay
过渡的延迟时间
总：transition包含以上所有属性，多个过渡属性可以设置为all，也可以用逗号隔开分开设置;
transition: all 3s ease 0.5s;
transition: background 0.8s ease-in 0.3s, color 0.6s ease-out 0.5s;

>>animation(动画)
1)定义关键帧;
2)定义初始样式;
3)在最终状态中定义动画;
<div><span></span></div>
@keyframes myframe{
	0%{transform: translate(0, 0);} //可以用from代替
	25%{transform: translate(180px, 0);}
	50%{transform: translate(180px, 180px);}
	75%{transform: translate(0, 180px);}
	100%{transform: translate(0, 0);} //可以用to代替
}
div{width: 200px; height: 200px; border: 1px solid red;}
span{display: inline-block; width: 20px; height: 20px; background-color: pink; border-radius: 10px; 
	animation: myframe 5s ease 0.5s infinite;}
注: 将animation-name设置为none可以取消任何动画;
1, animation-name
动画名称, none / 动画名称;
2, animation-duration
动画持续时间, 同transition-duration;
3, animation-timing-function
动画播放方式, 同transition-timing-function;
4, animation-delay
动画延迟时间, 同animation-delay;
5, animation-iteration-count
动画播放次数, 1 / 5 / infinite, 默认值为1;
6, animation-direction
动画播放方向, normal(正向) / alternate(交替), 默认为normal;
7, animation-play-state
动画播放状态, running / paused;
如鼠标悬停时播放，鼠标移开则停止，
div{animation-play-state: paused;}
div:hover{animation-play-state: running;}
8, animation-fill-mode
动画开始之前与结束之后发生的动作, none / forwards / backwards / both;
总: animation可以包含以上所有属性, 顺序如上，常用的是前5个属性的组合，如
animation: myframe 5s ease 0.5s infinite; 

>>多列布局
1, column-width
每列的宽度, auto / 200px, 如为auto则由其他属性决定;
2, column-count
列数, auto / 3, 如为auto则表示1列;
3, column-gap
列间距，normal / 2em / 20px，默认为normal = 1em = font-size值;
4, column-rule
列间的边框，相当于border，区别是边框宽度改变不会影响列的位置;
column-rule: 2px dotted gray;
5, column-span
跨列设置，应用于子列, none / all, 要么不跨，要么全跨;
默认值为none, 表示不跨任何列，all表示跨所有列;
总: columns综合设置, 如
columns: 200px 3;

>>flex弹性盒模型
//html
<div class="parent">
	<div class="child item1">1</div>
	<div class="child item2">2</div>
	<div class="child item3">3</div>
</div>
//css
.parent{height: 600px; border: 1px solid red;
	display: flex; //在父元素上设置弹性盒模型, 必选
	flex-direction: row; //横向排列，可选
	justify-content: flex-start; //横向对齐，可选
	align-items: flex-start; //纵向对齐，可选
}
.child{width: 200px; height: 200px; border: 1px solid gray;}
.item1{flex: 1;} //给子元素设置相对占比，可选
.item2{flex: 2;}
.item3{flex: 3;}
注：
1, 给父元素设置 display: flex; 可使所有子元素显示在一行；
2, flex-direction设置排列方向，默认为row, 有如下可选值
row / column;
3, justify-content设置横向对齐，默认为flex-start，有如下可选值
flex-start/flex-end/center/space-between/space-around;
4, align-items设置纵向对齐，默认为flex-end，有如下可选值
flex-start/flex-end/center/baseline/stretch;
5, 给子元素设置flex值，可以设置子元素的占比，只能为整数值，设置了flex值后子元素的宽度属性会失效;

>>媒体查询
1, 媒体类型
主要是十种, 常见的有all, screen, print, handheld, tv等;
2, 媒体特性
主要有13种, 常见的有
max-width, min-width, max-device-width, min-device-width等;
3, 引入媒体查询
1)<link rel="stylesheet" href="style.css" media="screen">
2)@import方法
<style>
	@importurl(reset.css) screen;
</style>
3)@media方法
成为媒体查询, 现在比较常用;
<style>
	@media screen{
		/*样式代码*/
	}
</style>
4, 举例
@media screen and (max-width: 480px){
	.ads{display: none;}
}
<link rel="stylesheet" media="screen and (max-device-width:480px)" href="iphone.css">
//省略媒体类型默认为all
<link rel="stylesheet" media="(max-device-width:480px)" href="iphone.css">
//不同的媒体类型和媒体特性
<link rel="stylesheet" media="handheld and (max-width:480px), screen and (min-width:960px)" href="iphone.css">
@media screen and (min-width: 600px) and (max-width: 900px){
	body{background-color: #f5f5f5;}
}
@media not print and (max-width: 1200px){
	/**/
} //not关键词表示取反

