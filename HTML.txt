>>常见标签
1, 图片
<img src="" alt="" title="">
2, 超链接
<a href="" title="" target=""> 
注：target取值有_self, _blank, _parent, _top，默认是_self;
3, 表格
1)html
<table border="1">
	<thead>
		<tr>
			<th>科目</th><th>分数</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>语文</td><td>60</td>
		</tr>
		<tr>
			<td>数学</td><td>80</td>
		</tr>
		<tr>
			<td>外语</td><td>80</td>
		</tr>
	</tbody>
	<tfoot>
		<tr>
			<td>总分</td><td>220</td>
		</tr>
	</tfoot>
</table>
注：<tbody>包含的内容会优先显示，当表格很长，可以用多个<tbody>进行分段显示;
2)css
table{
	border-spacing: 0; //边框之间的间距
	border-collapse: collapse; //合并边框(不重叠)
	width: 800px;  //表格的总宽度
}
table tr{
	heigth: 50px;  //每行的高度
}
table tr td:nth-child(1){
	width: 100px;  //第一列的宽度
}
4, 表单
<form method="post" action="test.php">
	//文本框, label标签的for必须与input的id值一致
	<label for="username">用户名: </label>
	<input type="text" id="username" name="username" placeholder="请输入用户名">
	//密码框
	<input type="password">
	//数字输入框
	<input type="number">
	//网址输入框
	<input type="url">
	//邮箱输入框
	<input type="email">
	//大段文本输入
	<textarea rows="20" cols="50"></textarea>
	//单选框
	<input type="radio" name="gender" value="male" checked="checked">男
	//复选框
	<input type="checkbox" name="likes[]" value="1" checked="checked">跑步
	//下拉列表框, 省略multiple则为单选
	<select multiple="multiple">
		<option value="1">跑步<option>
		<option value="2" selected="selected">音乐<option>
		<option value="3">读书<option>
	</select>
	//提交按钮
	<input type="submit" value="提交">
	//重置按钮
	<input type="reset" value="重置">
</form>
5, 网站偏爱图标
<link rel="icon" href="/favicon.ico" />


>>文件表单
<form method="post" action="" enctype="multipart/form-data">
	<input type="file" name="">
</form>
注: 表单的enctype属性默认为"application/x-www-form-urlencoded", 如果上传文件要更改enctype;


>>meta的常用属性
<meta charset="utf-8">
<meta name="keywords" content="HTML,PHP,SQL">
<meta http-equiv="expires" content="31 DEC 2020">


>>a搭配iframe的使用
<iframe name="baidu"></iframe>
<a href="http://www.baidu.com" target="baidu">搜一搜</a>
或者用js实现:
window.frames['baidu'].location.href = "http://www.baidu.com";


>>锚点的两种实现
1, <a href="test.html#target1">target1</a>
<a name="target1"><div>....</div></a>
2, <a href="test.html#target1">target1</a>
<div id="target1">....</div>


>>几种易错的嵌套规则
1, 内联元素不能包含块元素
<span><div></div></span> //错
2，块元素不能放在p元素里面
<p><div></div></p> //错
3，有几种特殊的块级元素只能包含内联元素，不能包含块级元素，如
h1, h2, h3, h4, h5, h6, p, dt
4, 块元素与块元素并列，内联元素与内联元素并列
<div><h2></h2><span></span></div> //错


>>分组选择框
<select>
	<option value="">Please select</option>
	<optgroup label="华东区"></optgroup>
	<option value="1">上海</option>
	<option value="2">南京</option>
	<option value="3">杭州</option>
	<optgroup label="华南区"></optgroup>
	<option value="4">广州</option>
	<option value="5">深圳</option>
	<option value="6">厦门</option>
</select>


>>热点链接
<img src="图形文件名" usemap="#图的名称">
<map name="图的名称">
	<area shape="形状" coords="区域坐标列表" href="URL资源地址">
	<area shape="形状" coords="区域坐标列表" href="URL资源地址">
</map>
shape: 定义热点形状
shape = rect[矩形] / circle[圆形] / poly[多边形]
coords: 定义区域点的坐标
<area shape="rect" coords="100,50,200,75" href="URL">
<area shape="circle" coords="85,155,30" href="URL">
<area shape="poly" coords="232,70,285,70,300,90,250,90,200,78" href="URL">
注：矩形是左上角和右下角坐标，圆形是圆心坐标和长度，多边形是每个点的坐标；


>>H5日期时间控件
<input type="date">
<input type="time">
<input type="datetime"> //对于不支持的浏览器可用"datetime-local"代替
<input type="month">
<input type="week">
注: 前端框架如jQuery也提供了很多日期时间的插件可供使用;


>>图片的惰性加载
<div>
	<img src="loading.png" alt="1" data-src="photo-1.jpg">
	<img src="loading.png" alt="2" data-src="photo-2.jpg">
	<img src="loading.png" alt="3" data-src="photo-3.jpg">
</div>
<script>
	window.onload = function(){
		var images = document.getElementsByTagName('img');
		for(var i in images){
			images[i].src = images[i].getAttribute('data-src');
		}
	};
</script>


>>iframe
1, 常用属性
<iframe src="test.html" frameborder="1" width="500px" height="300px"></iframe>
2, 相互调用
1)在父窗口中调用iframe中的元素
<iframe src="test.html" id="test"></iframe>
<script>
	var obj = document.getElementById('test').contentWindow;
</script>
2)在iframe中调用父窗口的元素
<script>
	var obj = window.top.document.getElementById('父窗口的元素ID');
</script>
3)兄弟iframe间相互调用
<iframe src="index1.html" id="test1"></iframe>
<iframe src="index2.html" id="test2"></iframe>
//test1中调用test2的元素
<script>
	var obj2 = window.top.document.getElementById('test2').contentWindow.getElementById('test2中的元素ID');
</script>
注: 如果iframe的网页存在跨域问题，则无法相互调用;


>>字体图标
1, 字体图标与图片的区别
图片占用带宽较大, 放大后会失真, 图片改变颜色不方便;
而字体占用带宽小, 不会失真, 可以随意调节大小和颜色;
2, 引用字体图标
1)字体图标本质上是一种字体, 可以使用font-size调整图标大小;
2)阿里巴巴矢量图标库
这个库里有你需要的所有图标，有三种使用方式, 都需要先下载字体文件存放在项目中然后再引用, 
库里有具体的使用说明, 很简单;



>>CSS选择器
1, 元素选择器
2, 类选择器
3, ID选择器
4, 后代选择器 #container span
5, 子选择器 #container>span
6, 相邻兄弟选择器 #container+div 
7, 后面所有兄弟选择器 #container~div 
8, 通用选择器 *
9, 伪类选择器 a:hover
10, 分组选择器 div, p


>>伪类选择器
1, 状态伪类
a:link; //未选择时
a:visited; //已点击
a:hover; //鼠标悬停
a:active; //放开鼠标的一瞬间
:focus; //获得输入焦点
2, 结构伪类
:first-child;
:last-child;
:nth-child(n);
:first-of-type;
可以通过结构伪类来对<table>中的<tr>和<td>来进行精确的样式设置, 如
tr:nth-child(2) td:nth-child(3){background-color: red;}


>>伪元素选择器
::selection; //用户选中的内容
::before; //内容之前
::after; //内容之后
::first-line; //首行
::first-letter; //首字符
注: div::after是div的子元素, div::after是行内元素, 必须改为inline-block才能设置宽高,
div::after里必须写content属性: content: '';
注: 使用::或:都可以;


>>将div变成三角形
div{
	width: 0; height: 0; 
	border-top: 10px solid transparent;
	border-right: 20px solid transparent;
	border-bottom: 10px solid transparent;
	border-left: 20px solid gray;
}
注: 可通过调节四个边框的尺寸来改变箭头的长短;
三角箭头可以通过给伪元素设置样式来实现, 需要让原元素相对定位、伪元素绝对定位来设置位置;


>>样式的优先级
用户设置的样式 > 网页制作者的样式 > 浏览器默认样式;
一般情况下，<link>放在<style>之前，所以，
内联样式 > 嵌入样式 > 外部样式；
注: 子元素默认只继承父元素的文字样式, 其他样式不继承;


>>选择器的优先级
内联样式 > ID选择器(100) > 类选择器(10) > 元素选择器(1) > 通用选择器;
p span{} //权值为1+1=2
p span.warning{} //权值为1+1+10=12
#footer .note p{} //权值为100+10+1=111


>>字体样式
1, font-family: '微软雅黑';
注：指定字体系列必须在用户电脑上已经安装，否则显示不了；
2, font-size: 12px / 1.5em / 150%;
注：em 和 % 是相对于父元素的尺寸比例;
3, font-weight: normal / bold;
4, font-style: normal / italic;
5, color: red / rgb(100, 150, 100) / rgba(100, 150, 100, 0.5) / #00ff00;
6, font: italic bold 12px/1.5em "宋体", sans-serif;
注：这是所有字体样式的缩写;
font-size和font-family是必不可少的，其他样式如果缺省则是默认值;
font-size与line-height中间要加入'/'斜杠;


>>文本样式
1, text-decoration: none / underline / overline / line-through; //文本装饰
2, text-indent: 2em; //首行缩进，相对于字体大小的比例 
3, line-height: 2em; //行高，相对于字体大小的比例
4, word-spacing: 10px; //单词间距
5, letter-spacing: 10px; //字母间距
6, text-align: center / left / right / justify; //对齐方式


>>列表样式
list-style:
1)list-style-type: disc/circle/decimal;
2)list-style-position: outside/inside;
3)list-style-image: url("...");


>>em 和 %
1, em
给非font-size属性设置em单位时，是相对于自身font-size的比值；
给font-size设置em单位时，则是相对于父元素的font-size的比值;
注: rem是相对于根元素(也就是html)font-size的比值;
2, %
给元素的width, height, padding, margin属性设置百分比，是参照父元素的宽度和高度的比值；
给transform: translate(50%, 50%), 是按照元素自身的宽度和高度的比值；


>>vw/vh 与 % 与 calc
1, %是相对于父元素的大小设置的比例, vw、vh是视窗大小决定的;
2, vw、vh的优势在于能够直接获取宽度和高度, 而用%在没有设置body高度情况下是无法获取可视区域的高度的;
3, calc可对样式进行计算, 如 width: calc(100% - 100px);


>>盒模型
1, width / height
注：默认情况下，盒子的宽度和高度指的是内容的尺寸，不包括边框和内外边距;
注: min-width / max-width 限制当页面尺寸改变时盒子的最小和最大宽度;
2, border
border: 2px solid red;
border由三个具体属性组成：
border-width;
border-style: solid / dotted / dashed;
border-color;
border包括四个方向, 依次为
border-top, border-right, border-bottom, border-left;
3, padding
padding: 20px 10px 15px 30px;
4, margin
margin: 20px 10px 15px 30px;
5, outline
覆盖在border外层，使用同border;


>>overflow属性
内容超出盒子时的显示设置:
visible(默认)、hidden、scroll、auto;


>>将input输入框显示为一条横线输入
input输入框当点击时默认会显示outline，所以要设置outline为none, 如下
input{border: none; outline: none; border-bottom: 2px solid #000;}


>>CSS3盒模型
box-sizing: content-box(默认值) / border-box;
content-box: 元素的width = 内容的宽度;
border-box: 元素的width = 内容的宽度 + padding*2 + border*2;


>>布局模型
1, 流模型(flow)
默认的网页布局模式;
2, 浮动模型(float)
可以让块状元素在一行显示;
float: left / right;
3, 定位，又叫层模型
1)position: static; //默认的流模式
2)position: absolute; //绝对定位
相对于其最接近的一个具有定位属性的父元素进行绝对定位;
3)position: relative; //相对定位
相对于自身在正常文档流中的原始位置进行定位;
4)position: fixed; //固定定位
相对于浏览器窗口进行定位;
注：absolute和fixed会使定位元素脱离文档流，而relative不会;
一般对父元素设置相对定位，具体子元素使用绝对定位;
注: 如果绝对定位的元素的所有祖先元素都没有设置相对定位，则默认相对于视口(并不是body)进行定位;


>>浮动
1, 浮动的应用场景
1)解决文字包围图片的问题;
2)解决莫名其妙的间隔问题;
两个<div>之间有空格, 页面上两个div盒子之间就会出现间隔, 间隔的大小跟font-size有关;
3)向左、向右进行排版对齐;
2, 注意事项
1)容器内元素浮动会导致容器高度塌陷，可通过设置容器的 overflow: hidden; 来阻止容器高度塌陷;
2)清除元素周围的浮动可用 clear: left/right/both; 来设置;


>>解决浮动导致父容器高度塌陷问题的几种方式
<div class="parent">
	<div class="child"></div>
	<div class="child"></div>
	<div class="child"></div>
</div>
1, 给父元素设置高度(不推荐)
2, 增加一个子div用来清除浮动
.clear{clear: both;}
3, 使用伪元素::after来清除浮动
.parent::after{content: ''; display: block; clear: both;}
4, 父容器使用 overflow: hidden; 来阻止塌陷;


>>绝对定位与浮动的区别
绝对定位与浮动都会脱离文档流，但在布局时会有区别;
绝对定位直接覆盖在正常文档流中元素的上面，而浮动会挤开行内元素而排列;


>>定位与浮动可以结合起来使用
如果元素只是浮动，那么设置left/right/top/bottom这些值是无效的，如果再加上相对定位，那么这些值就有效了;


>>使用绝对定位使子元素的宽度自适应父元素的宽度
.parent{position: relative;}
.son{position: absolute; left: 40px; right: 60px;}


>>水平居中
1, 行内元素
通过给父元素设置 text-align: center; 来实现;
2, 块状元素
div{width: 200px; margin: 0 auto;}


>>垂直居中
1, 内联元素
给父元素设置line-height与height的值一致，使子元素垂直居中;
<div>hello</div>
div{width: 200px; height: 200px; line-height: 200px;}
2, 块状元素(宽高已知)：定位 + 外边距
父元素相对定位，子元素绝对定位，
通过设置子元素的left, top为50%，margin-left与margin-top为宽度和高度的一半来实现垂直居中;
<div class="parent">
	<div class="child">
</div>
div.parent{height: 800px; border: 1px solid gray;
	position: relative;}
div.child{width: 200px; height: 200px; 
	position: absolute; left: 50%; top: 50%;
	margin-left: -100px; margin-top: -100px;}
3, 块状元素(宽高未知): 定位 + translate
<div class="parent">
	<div class="child">
</div>
div.parent{height: 800px; border: 1px solid gray;
	position: relative;}
div.child{position: absolute; left: 50%; top: 50%;
	transform: translate(-50%, -50%);}
	

>>vertical-align
定义行内元素相对于该元素所在行的基线的垂直对齐, 默认为baseline;
设置为middle可使元素居中于所在行的基线;

	
>>元素分类
1, 块状元素(block)
<div>, <p>, <h1>...<h6>, <ol>, <ul>, <dl>, <table>, 
<address>, <blockquote>, <form>
2, 内联元素(inline)
<a>, <span>, <br>, <i>, <em>, <strong>, <label>, <q>, 
<var>, <cite>, <code>
3, 内联块状元素(inline-block)
<img>, <input>
注：内联元素只能设置左右内边距与左右外边距, 其他的如宽度、高度、上下内外边距无效;


>>两个相邻的元素边框重叠时，可设其中一个元素的外边距为负值来消除重叠，如：
margin-top: -1px;


>>文本溢出时显示省略号
text-overflow: ellipsis; //文本溢出部分显示方式
overflow: hidden; 
white-space: nowrap; //文本在一行内显示


>>去除图片之间的默认空隙
<div>
	<img src="" alt="">
	<img src="" alt="">
	<img src="" alt="">
</div>
默认空隙的大小与字体大小有关, 可将父容器的font-size设为0:
div{
	font-size: 0;
}


>>pointer-events属性
默认为auto;
当设置为none时, 元素不能对鼠标事件做出反应, 特别适用于一个元素覆盖另一个元素, 
需要屏蔽上层元素的鼠标点击的时候;


>>外边距合并的情形
只有普通文档流中块元素的垂直外边距会发生合并, 即选择外边距中的较大者;
而行内元素、浮动元素以及绝对定位元素之间的外边距不会合并;


>>CSS3不同浏览器可能需要的前缀
chrome和safari: -webkit
firefox: -moz
IE: -ms
opera: -o


>>CSS3能做什么
1, 更强大的选择器
2, 圆角效果
3, 块阴影与文字阴影
4, 更多样的色彩定义
5, 渐变效果
6, 个性化字体
7, 多背景图
8, 变换和动画
9, 多栏布局
10, 媒体查询


>>CSS3边框
1, border-radius 
//边框圆角
border-radius: 10px 10px 0 0; 四个方向分别为：
border-top-left-radius, border-top-right-radius, 
border-bottom-right-radius, border-bottom-left-radius;
半圆：
div{width: 200px; height: 100px; border-radius: 100px 100px 0 0;}
圆：
div{width: 100px; height: 100px; border-radius: 50px;}
2, box-shadow 
//盒阴影
box-shadow: 4px 2px 5px red inset, 2px 3px 6px blue;
参数依次为：
x轴偏移量，y轴偏移量，模糊半径，模糊颜色，投影方式；
偏移量可以为负值，右和下为正，左和上为负；
投影方式有outset和inset，默认为outset；


>>CSS3渐变颜色
1, 带透明度的颜色 
rgba(100, 150, 200, 0.3)
2, 线性渐变
linear-gradient(90deg, red, blue, green);
第一个参数表示方向，可以是角度，如90deg，规定向上为0deg,
也可以为英文，如to right，后面的参数表示两个或多个颜色值;
3, 径向渐变
radial-gradient()
注: 渐变可用于background-image的属性值;


>>CSS3字体和文本
1, text-shadow //文本阴影
text-shadow: 2px 4px 5px red;
参数依次为：
x轴偏移量，y轴偏移量，模糊半径，模糊颜色;
注: 通过设置多个方向的阴影, 可以显示3D立体效果的文字;
2, @font-face //嵌入字体
引用服务器端字体，客户端可以显示用户没有安装的字体;
@font-face{
	font-family: 'my font';
	src: url('***'); //字体在服务器端的地址
}
div{
	font-family: 'my font';
}


>>CSS3背景
元素的背景包括边框，内边距和内容区域，不包括外边距;
1, background-color 
//背景颜色
background-color: yellow / #00ff00 / rgb(255, 0, 255);
2, background-image 
//背景图片
background-image: url('paper.jpg');
background-image: linear-gradient(red, yellow, blue);
注：默认情况下，图片放置在元素左上角，并在水平和垂直方向重复；
3, background-repeat 
//图像重复方式
background-repeat: repeat / repeat-x / repeat-y / no-repeat;
默认值为repeat;
4, background-position 
//图片位置
background-position: left/center/right top/center/bottom;
background-position: 200px 300px;
background-position: 20% 50%;
5, background-attachment 
//图片是否固定
设置背景图片是否固定或随着页面的其余部分滚动；
background-attachment: scroll / fixed;
默认值是scroll；
6, background-size
//背景图片大小
background-size: 200px 100px;
注：如果只给出一个值，则高度默认为auto，即保持图片纵横比的前提下自动计算高度；
background-size: 50% 50%; //相对与背景尺寸的百分比，如果只给出一个值则同上
background-size: cover; //图像缩放至能完全覆盖背景(>=背景)
background-size: contain; //图像缩放至宽或高恰好被背景包含(<=背景)
7, background-origin
//背景图片从哪个位置开始显示
background-origin: padding-box / border-box / content-box;
默认值是padding-box, 如果背景不是no-repeat，那么这个属性无效，它会从边框开始显示；
8, background-clip
//背景图片显示区域
background-clip: border-box / padding-box / content-box;
默认值是border-box，即包括边框的整个盒子都能显示;
总结：
1, 后3个背景属性是CSS3新增的;
2, 以上属性可以缩写成background, 如
background: yellow url('xiaoxin.jpg') no-repeat fixed center;
3, 可以同时设置多个背景图片, 中间用逗号隔开，如
background-image: url('xiaoxin1.jpg'), url('xiaoxin2.jpg'), url('xiaoxin3.jpg');
background-position: left top, 100px 0, 0 200px;
background-repeat: no-repeat no-repeat repeat;


>>CSS3选择器
1, 属性选择器
1)[attr] //带有属性attr
2)[attr1][attr2] //带有多个属性
3)[attr=value] //属性值等于value
4)[attr^=value] //属性值以value开头
5)[attr$=value] //属性值以value结尾
6)[attr~=value] //属性值包含单词value，必须是单词
7)[attr*=value] //属性值包含value，不一定是单词
2, 伪类选择器
1):not 
//否定选择器
input:not([type="submit"])
div:not([id="footer"])
2):empty 
//空
没有任何内容的元素, 如 p:empty;
3):first-child 
//本身是第一个子元素
ol>li:first-child //ol里的第一个li元素
4):last-child //本身是最后一个子元素
经常需要对最后一个元素做特殊处理，如
ul>li{border-bottom: 3px solid #ccc;}
ul>li:last-child{border-bottom: none;}
5):nth-child(n) 
//本身是第n个子元素
参数可以为整数值(1,2,3...)，也可以是表达式(2n, 2n+1)，或者是关键词(odd, even);
ol>li:nth-child(2n){background-color: blue;}
ol>li:nth-child(2n+1){background-color: yellow;}
注: 第n个元素，n从1开始;
6):nth-last-child(n) 
//本身是倒数第n个子元素
7):only-child
//本身是唯一子元素
8):first-of-type 
//本身是第一个指定类型的子元素
如div下的第一个p元素，div>p:first-of-type
9):last-of-type
//本身是最后一个指定类型的子元素
10):nth-of-type(n)
//本身是第n个指定类型的子元素
11):nth-last-of-type(n)
//本身是倒数第n个指定类型的子元素
12):only-of-type
//本身是唯一类型的子元素
3, 表单伪类选择器
1):enabled
//可用的表单元素
input[type="text"]:enabled
2):disabled
//不可用的表单元素
input[type="text"]:disabled
3):checked
//选中的单选或复选按钮
input[type="checkbox"]:checked
4):read-only
//设置了"readonly='readonly'"的元素
input[type="text"]:read-only
5):read-write
//与:read-only相反
4, 伪元素
1)::selection
//用鼠标选中的文本
::selection{background-color: red; color: green;}
2)::before 和 ::after
在元素的前面或后面插入内容，常与content属性配合使用；
.effert::before, .effert::after{
	content: '';
}
注：:表示伪类, ::表示伪元素;


>>transform(变换)
transform有两点需要注意：
1)只对块状元素和内联块状元素有效，对行内元素无效;
2)所有的变换默认是以元素的中心位置进行变换，这个位置可以通过transform-origin来改变;
1, rotate()
旋转，参数为正如45deg表示顺时针，为负则逆时针;
例如，使内部盒子旋转，但里面的文本不旋转：
<div id="container">
	<div><span>Hello</span></div>
</div>
#container{width: 200px; height: 200px; border: 1px solid red;}
#container div{width: 200px; height: 200px; background-color: orange;
	transform: rotate(45deg);}
#container div span{display: block; transform: rotate(-45deg);}
2, skew()
扭曲，会改变块状元素的形状;
transform: skew(30deg, 45deg); //元素在水平和垂直方向同时扭曲
transform: skew(30deg); //元素仅在水平方向扭曲，省略y参数默认为0
transform: skewX(30deg); //元素仅在水平方向扭曲
transform: skewY(45deg); //元素仅在垂直方向扭曲
3, scale()
缩放;
transform: scale(2, 0.5); //水平和垂直方向同时缩放
transform: scale(2); //省略y值，则表示垂直方向和水平方向缩放的倍数一样
transform: scaleX(2); //仅在水平方向缩放
transform: scaleY(0.5); //仅在垂直方向缩放
4, translate()
平移，作用相当于相对定位;
transform: translate(100px, 200px); //水平和垂直方向同时移动
transform: translateX(100px); //仅水平方向移动
transform: translateY(200px); //仅垂直方向移动
注：可用translate()来实现元素的水平和垂直居中;
5, transform-origin
设置变换的原点，默认是元素的中心位置；
transform-origin: left/center/right top/center/bottom;
transform-origin: 50% 0;


>>transition(过渡)
1)在默认样式中声明初始样式和过渡属性；
2)在最终状态中声明最终样式;
div{width: 200px; height: 200px; border: 1px solid red;
	transition: width 3s ease 0.5s;}
div:hover{width: 800px;}
注: 如果同时改变多个样式，可以将transition-property设置为all;
1, transition-property
需要过渡的属性，如果同时有多个，可以设置为all;
2, transition-duration
过渡的持续时间;
3, transition-timing-function
过渡函数，包括以下几种：
ease, linear, ease-in, ease-out, ease-in-out; 默认为ease;
4, transition-delay
过渡的延迟时间
总：transition包含以上所有属性，多个过渡属性可以设置为all，也可以用逗号隔开分开设置;
transition: all 3s ease 0.5s;
transition: background 0.8s ease-in 0.3s, color 0.6s ease-out 0.5s;


>>animation(动画)
1)定义关键帧;
2)定义初始样式;
3)在最终状态中定义动画;
<div><span></span></div>
@keyframes myframe{
	0%{transform: translate(0, 0);} //可以用from代替
	25%{transform: translate(180px, 0);}
	50%{transform: translate(180px, 180px);}
	75%{transform: translate(0, 180px);}
	100%{transform: translate(0, 0);} //可以用to代替
}
div{width: 200px; height: 200px; border: 1px solid red;}
span{display: inline-block; width: 20px; height: 20px; background-color: pink; border-radius: 10px; 
	animation: myframe 5s ease 0.5s infinite;}
注: 将animation-name设置为none可以取消任何动画;
1, animation-name
动画名称, none / 动画名称;
2, animation-duration
动画持续时间, 同transition-duration;
3, animation-timing-function
动画播放方式, 同transition-timing-function;
4, animation-delay
动画延迟时间, 同animation-delay;
5, animation-iteration-count
动画播放次数, 1 / 5 / infinite, 默认值为1;
6, animation-direction
动画播放方向, normal(正向) / alternate(交替), 默认为normal;
7, animation-play-state
动画播放状态, running / paused;
如鼠标悬停时播放，鼠标移开则停止，
div{animation-play-state: paused;}
div:hover{animation-play-state: running;}
8, animation-fill-mode
动画开始之前与结束之后发生的动作, none / forwards / backwards / both;
总: animation可以包含以上所有属性, 顺序如上，常用的是前5个属性的组合，如
animation: myframe 5s ease 0.5s infinite; 


>>盒子旋转的3D效果
给父元素盒子加上:
perspective: 1000px;
transform-style: preserve-3d;


>>弹性布局
设置了 display: flex; 的元素为弹性容器, 里面的直接子元素会按照弹性布局的方式进行布局;
弹性容器只会对直接子元素进行弹性布局, 对孙元素不会;
弹性容器里的直接子元素都成为了块元素, 如<a>与<span>, 都可以设置宽度与高度;
.parent{
	display: flex; //在父元素上设置弹性盒模型, 必选
}
.child{
	flex: 0 1 200px;
}
1, 用于弹性容器的属性
*1)flex-direction: row(default) | column;
设置主轴;
*2)justify-content: flex-start(default) | flex-end | center | 
	space-between | space-around | space-evenly;
设置元素在主轴的对齐方式;
*3)align-items: stretch(default) | flex-start | flex-end | center;
设置元素在侧轴的对齐方式;
*4)flex-wrap: nowrap(default) | wrap;
设置当元素总宽度过大时是否换行;
*5)gap: 0(default) | 数值;
设置元素之间的间距, 替代margin;
2, 用于子元素的属性
1)flex-grow: 0(default) | 数值;
是否允许拉升, 默认不拉升;
2)flex-shrink: 1(default) | 数值;
是否允许收缩, 默认自动收缩;
3)flex-basis: auto(default) | 数值;
元素的宽度, 替代width;
*4)flex: flex-grow flex-shrink flex-basis;
简写形式, 常用的缩写有: auto(1 1 auto), none(0 0 auto);
*5)align-self: auto(default) | flex-start | flex-end | center;
重写某个子元素在侧轴的对齐方式;


>>css grid
弹性容器和弹性子元素, 与flex完全相同;
.parent{
	display: grid;
}
1, 用于弹性容器的属性
*1)grid-template-rows: <size>;
grid-template-columns: <size>;
指定每列的宽度用来分行和分列, 如:
200px 100px 200px;
200px 50% 1fr;  //fr是自动伸缩
200px 1fr 2fr; //伸缩的比例
auto 1fr 2fr;  //auto: 符合内容的宽度或伸缩
repeat(3, 100px);
repeat(2, 200px 1fr);
*2)gap: row-gap column-gap;
用来指定行间距和列间距, 如 gap: 10px 20px;
3)justify-content: start(默认) | center | end | space-between | ...; 
align-content: start(默认) | center |end | space-between | ...;
当弹性容器还有剩余空间时, 用来对弹性网格进行对齐;
注: 只有当弹性容器比网格本身更大时, 该属性才有效;
4)justify-items: stretch(默认) | start | center | end;
align-items: stretch(默认) | start | center | end;
设置每个弹性子元素在对应单元格内的对齐方式;
2, 用于子元素的属性
*1)grid-row: 2 | 2 / 4 | 2 / span 2 | 2 / -1;
grid-column: 同上;
指定子元素的具体位置, 一般用于跨越多行或多列;
属性值说明如下:
2: 第二列;
2 / 4: 跨越2、3两列;
2 / span 2: 同上;
2 / -1: 从第2列一直到最后;
2)justify-self: stretch(默认) | start | center | end;
align-self: stretch(默认) | start | center | end;
设置某个子元素在对应单元格内的对其方式;


>>弹性布局实现水平居中与垂直居中
<div class="parent">
	<div class="child"></div>
	<div class="child"></div>
	<div class="child"></div>
</div>
.parent{
	display: flex;
	justify-content: center;  //水平居中
	align-items: center;  //垂直居中
}


>>媒体查询
1, 媒体类型
主要是十种, 常见的有all, screen, print, handheld, tv等;
2, 媒体特性
主要有13种, 常见的有
max-width, min-width, max-device-width, min-device-width等;
3, 引入媒体查询
1)<link rel="stylesheet" href="style.css" media="screen">
2)@import
<style>
	@importurl(reset.css) screen;
</style>
3)@media(最常用)
<style>
	@media screen{
		/*样式代码*/
	}
</style>
4, 举例
1)@media only screen and (min-width: 1200px) { //PC端设定 }
@media only screen and (min-width: 600px) and (max-width: 1200px) { //平板设定 }
@media only screen and (max-width: 600px) { //移动端设定 }


>>使用css进行图像处理
img{filter: ...}
常见的属性如下:
1)grayscale(1);  	//灰度图, 0: 原图, 1: 黑白图
2)brightness(10);   //亮度, 0: 全黑, 1: 原亮度, >1: 更亮
3)blur(5px);        //马赛克, 5px: 将5个像素当成1个像素显示
4)contrast(1);      //对比度, 0: 全黑, 1: 原图像, >1: 强对比度
5)invert(1);        //胶片底色效果, 0: 原图, 1: 底片
6)hue-rotate(0deg); //色相旋转, 0deg: 原图


>>举例: 定制单选按钮
通过将原生单选按钮隐藏, 对label标签进行样式设置;
<label for="rbtn">select red</label>
<input type="radio" id=rbtn" name="color" value="red" hidden="hidden">
label{
	display: inline-block; width: 160px; height: 40px; line-height: 40px;
	font-size: 20px; margin: 20px; border: 1px solid #999; border-radius: 20px;
	transition: all 0.5s;
}
label:hover{
	box-shadow: 0 0 10px #333;
}


>>移动端
<meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no">
该声明仅适用于移动端, 其中各个属性的意义如下:
width=device-width  //宽度等于设备宽度
initial-scale=1  	//初始化比例是1
minimum-scale=1  	//最小的缩放比例是1
maximum-scale=1  	//最大的缩放比例是1
user-scalable=no  	//不允许用户缩放












