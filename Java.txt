>>java发展里程碑
JavaSE 1.0(1995) -> JavaSE 1.4(2002) ->
J2SE 5(2006) -> J2SE 8(2014) -> J2SE 14(2020)

>>java安装
下载JDK，目前常用的是J2SE8的jdk8版本;
下载IntelliJ IDEA, 常用的集成开发环境;
JVM -> jre -> jdk
JVM: java虚拟机
jre: java运行环境
jdk: java开发包
注：配置环境变量：
添加JAVA_HOME变量，设置为jdk的安装目录；
编辑PATH变量，添加%JAVA_HOME%\bin;

>>安装Tomcat服务器
1)点击tomcat/bin/startup.bat打开服务器；
默认端口号8080，根目录tomcat/webapps;
2)每个项目都要新建WEB-INF目录，WEB-INF是web应用的安全目录，只有服务端可以访问，
客户端访问不了，主要包含以下子目录：
web.xml，项目部署文件；
classes文件夹，用以放置*.class文件；
lib文件夹，用于存放需要的jar包；

>>主方法带命令行参数
1,命令行运行
javac Demo.java
java Demo "hello" "world"
2,eclipse中运行
Run Configuration, 在Arguments选项卡输入命令行参数;

>>eclipse调试
F6-单步调试
F8-运行完成
F5-进入方法
F7-跳出方法

>>java中的进制
1, 声明
int bin = 0b1010; //0b表示二进制
int oct = 014; //0表示八进制
int dec = 98; //默认十进制
int hex = 0x6a; //0x表示十六进制
2, jdk自带的进制转换
1)十进制转换为其他进制
Integer.toBinaryString(i);
Integer.toOctalString(i);
Integer.toHexString(i);
Integer.toString(int i, int rad); //第二个参数是要转换的进制
2)其他进制的字符串转换为十进制整数
Integer.parseInt(String s, int rad); //返回int
Integer.valueOf(String s, int rad); //返回Integer
3, 位运算
&(按位与), |(按位或), ^(按位异或), ~(按位取反), 
<<(左移), >>(右移), >>>(无符号右移)
4, 大小端模式
大小端模式指的是多字节数据在计算机中存储与传输的顺序;
大端: 高位字节放在低地址，低位字节放在高地址；
小端: 相反；
java中默认使用的是大端模式，符合人类的习惯；
5，BigInteger 大数
BigInteger(String val);
BigInteger(String val, int radix);
BigInteger.valueOf(long val); //静态方法
//BigInteger b1, b2; 四则运算
b1.add(b2); b1.subtract(b2); b1.multiply(b2); b1.divide(b2);
//位运算
b1.and(b2); b1.or(b2); b1.xor(b2); b1.not(); b1.shiftLeft(n); b1.shiftRight(n);
6, 定点数与浮点数
1)定点数: 小数点放在某一固定位置上；
2)浮点数：小数点位置不固定，用指数规则来表示；
(符号位)尾数*基数^阶码，如 (12.5625)10 = (1100.1001)2 = 1.1001001 * 2^3;
float(4byte): 符号位(1bit)+阶码(8bit)+尾数(23bit);
double(8byte): 符号位(1bit)+阶码(11bit)+尾数(52bit);
规定: 浮点数=小数部分*基数^阶码，小数部分的整数部分为1，尾数只存储小数点后面的部分，如
(0.5625)10 = (0.1001)2 = 1.001*2^(-1), 尾数只存储001, 即尾数M满足0<=M<1, 小数部分=1+M;
阶码用移码表示，即
float(32bit): (-1)^s * (1+M) * 2^(E-127); //E为阶码存储的值(移码)，要减127才是实际值
double(64bit): (-1)^s * (1+M) * 2^(E-1023);
3)精度
float尾数是23位二进制数，转换成十进制，有效数字6~7位；
double尾数是52位二进制数，转换成十进制，有效数字15~16位；
7, BigDecimal 高精度小数
BigDecimal(String val);
BigDecimal.valueOf(double d);
BigDecimal的四则运算与BigInteger相似；
8, ascii与Unicode
ascii码：用7位二进制数表示128种字符信息；
Unicode码：用多位字节来存储各种文字与符号，分为UTF-4, UTF-8, UTF-16, UTF-32;
java中的char(2byte)使用unicode字符集，UTF-16，只能表示unicode编号在65535以内的字符；
char类型的加减运算就是按其unicode编号进行运算；
注：gbk编码中文占用2个字节，英文占用1个字节；
utf-8编码中文占用3个字节，英文占用1个字节；
utf-16be编码中文占用2个字节，英文占用2个字节；
java是双字节编码，采用utf-16be编码；

>>java的数据类型
1，基本数据类型
1)数值型
整数类型: byte(1)、short(2)、int(4)、long(8)；
浮点类型：float(4)、double(8)；
2)字符型 char(2)
3)布尔型 boolean
2，引用数据类型
1)数组 
2)类(class)
3)接口(interface)
注: java中的浮点类型默认是double，如果定义成float，需在后面加f，如 float a = 3.14f;

>>兼容类型的数据可以相等
10 == 10.0; //true
97 == 'a'; //true

>>基础知识点
1，标识符可以由字母、数字、下划线_、美元符号$组成，不能以数字开头；
标识符严格区分大小写；
2，java中的变量区分大小写；
3，java的常量用final定义, 常量名一般用大写，如 final double PI = 3.14;
4, java的变量分为三种：类变量、实例变量、局部变量；

>>注释
1)单行注释 //
2)多行注释 /* */
3)文档注释 
/**
 * This is doc comment
 * @author zhao
 * @version 1.0
 */
可以通过javadoc命令从文档注释中提取内容，生成帮助文档，也可以通过IDE直接生成；

>>包 package
1，包采用"逆域名法"进行命名；
2，标准格式：域名后缀.组织机构名.项目名[.模块名].包的功能，如
com.imooc.weather.ui;
com.alibaba.taobao.customer.data;
实际开发中包名采用: 域名倒序.模块.功能, 如com.imooc.animal, com.imooc.mechanics等;
3, 使用同一个包下的类无需导入，使用不同包下的类需要使用import导入；
4，包的目录结构
com	
	alibaba 
		taobao	
			admin
				Data.java
			page
				Page1.java
				Page2.java
//Page2.java
package com.alibaba.taobao.Page;
import com.alibaba.taobao.admin.Data;
public class Page2{
	public static void main(String[] args){
		Page1 p1 = new Page1();
		Data d = new Data();
	}
}
5，一个类文件中只能有一个与文件名相同的public类，除此以外还可以定义其他非public类；
6, 引用其他包中类的三种方式
1)java.util.Arrays.sort(a); //使用全名，不推荐
2)import java.util.Arrays;
3)import java.util.*;
7, import 包名.*
导入指定包名下所有直接允许访问的类，无法导入其子包中的类;
8, 当两个包里存在同名的类，优先使用导入最具体的类，如
import com.imooc.pet.Cat;
import com.imooc.mechanics.*;
会优先使用com.imooc.pet.Cat类;
9, 常用包
1)java.lang 
包含java语言基础的类，默认导入，如System, String, Math等;
2)java.util
包含java语言中常用工具, 如Scanner, Random等;
3)java.io
包含输入、输出相关功能的类，如File, InputStream等;

>>java修饰符
1)访问控制修饰符
private, default, protected, public;
2)非访问控制修饰符
final, abstract, static, synchronized;

>>可变参数
public static void printMax(int... a){
	//传入的参数组成数组a
}

>>面向对象
1，面向对象的三大特征
封装、继承、多态
2，访问修饰符
按权限从小到大排序：
private //本类
default //默认，同一个包中的类
protected //继承的子类
public //任何地方
3，继承用extends关键字，java不支持类的多继承，但支持接口的多继承，并且一个类可以实现多个接口；
调用父类中的数据和方法，使用super关键字；
4, final类不允许被继承，或方法不允许被重写;
5，抽象类
抽象类用abstract关键字，抽象类里的抽象方法也用abstract关键字，抽象类不能实例化；
继承抽象类时，需要实现抽象类里的抽象方法；
6，接口用interface定义, 接口只包含方法的的声明，接口不能实例化对象;
类实现接口用implements，类要实现接口中定义的方法；
接口是完全的抽象类，或者说抽象类介于具体类与接口之间；
7，多态
定义: 同一行为(方法)具有不同的表现形式；
同一接口的不同实现，调用时统一当作接口调用；
//ICanEat.java
public interface ICanEat{
	public void eat(String food);
}
//Animal.java
public class Animal implements ICanEat{
	public void eat(String food){
		System.out.println("Animal eats " + food);
	}
}
//Human.java
public class Human implements ICanEat{
	public void eat(String food){
		System.out.println("Human eats " + food);
	}
}
//Test.java
public class Test{
	public static void main(String[] args){
		ICanEat dog = new Animal();
		dog.eat("meat");
		ICanEat student = new Human();
		student.eat("apple");
	}
}
8，默认构造函数的自动继承
如果在子类的构造函数中没有显示调用父类的构造函数，则继承父类的默认构造函数；
SupClass: 
public SupClass(){}
public SupClass(String name, int age){ //... }
SubClass:
public SubClass(String name, int age, double salary){
	//SupClass()  //会自动先调用父类的默认构造函数
	//todo...
}
注: 构造方法调用时，this()和super()不能同时出现，会导致编译错误;
9，标记接口
不包含任何方法和属性的接口，仅仅是给实现该接口的类做个标记，如
public interface EventListener{}
10, 重写Override
子类的方法b重写父类的方法a：
b的参数列表必须与a完全相同；
b的返回值与a相同或者是a的子类，b的访问修饰符不能小于a，b抛出的异常范围不能大于a；
11，static方法不能声明为抽象方法；
12，接口中的方法默认为 public abstract;
接口中的变量默认为 public static final;

>>封装
1,封装的三个步骤
1)把属性设置为private；
2)给属性添加getter和setter方法;
3)在getter和setter方法里添加属性控制;

>>抽象类与接口
抽象类是对类的抽象，是一种模板设计；
接口是对行为的抽象，是一种行为规范；

>>向上转型与向下转型
class Pet{}
class Dog extends Pet{}
Pet dog = new Dog(); //向上转型，自动转换
(Dog)dog; //向下转型，必须通过强制类型转换

>>继承的同时实现接口
class MyClass extends SupClass implements MyInterface{
	//...
}

>>接口
接口的属性默认修饰是：public static final;
接口的方法默认修饰是：public abstract;
接口中可以包含：抽象方法、默认方法、静态常量、静态方法；
interface Person{
	String NATION = "China"; //静态常量，必须在定义时初始化
	void study(); //抽象方法，需要实现类来具体实现
	default void walk(){ //默认方法，包含方法体，可以被实现类重写
		System.out.println("Person can walk");
	}
	static void run(){ //静态方法，包含方法体，不能被实现类重写
		System.out.println("Person can run");
	}
}
class Student implements Person{
	public void study(){ //实现接口的方法
		System.out.println("Student is studying");
	}
	public void walk(){ //重写接口的默认方法，不用加default
		Person.super.walk(); //调用接口的默认方法
		System.out.println("Person can walk");
	}
	public static void main(String[] args){
		Student st = new Student();
		System.out.println(Person.NATION); //调用接口的静态常量
		Person.run(); //调用接口的静态方法
		st.walk();
		st.study();
	}
}

>>匿名内部类
匿名内部类，常用来实现一个抽象类或接口;
abstract class Person{ //父类: 抽象类
	abstract void read();
}
public class Test{ //测试类
	public void getRead(Person person){
		person.read();
	}
	public static void main(String[] args){
		Test test = new Test();
		test.getRead(new Person(){ //实现一个男人对象
			@Override
			public void read(){
				System.out.println("男人喜欢看科幻动作类书籍");
			}
		});
		test.getRead(new Person(){ //实现一个女人对象
			@Override
			public void read(){
				System.out.println("女人喜欢看都市言情类书籍");
			}
		});
	}
}
注: 匿名内部类编译后的文件名为 Test$1.class, Test$2.class 等;

>>内部类
1, 分类
1)成员内部类 //outer.class, outer$inner.class
2)静态内部类 //同上
3)方法内部类 //outer.class, outer$1inner.class
4)匿名内部类 //outer.class, outer$1.class
2, 内部类的作用
1)封装性
2)实现多继承
3)解决继承或实现接口时的方法同名问题
内部类可以直接访问外部类的字段和方法，即使使用private修饰的;
当内部类定义为private后，只有外部类可以访问;
内部类中可以使用 外部类.this.成员 的方式，访问外部类中同名的信息;

>>接口中的内部类
//定义接口
package com.imooc.inter;
public interface IOuterInterface{
	int TEMP = 100; //常量
	void abMethod(); //抽象方法
	public default void deMethod(){
		System.out.println("接口中默认方法");
	}
	public static void stMethod(){
		System.out.println("接口中静态方法");
	}
	//普通成员内部类
	public class InnerClass{
		public void show(){
			System.out.println("接口中可定义普通成员内部类");
		}
	}
	//抽象成员内部类
	public abstract class AbInnerClass{
		public abstract void abInfo();
		public void info(){
			System.out.println("接口中可定义抽象成员内部类");
		}
	}
}
//定义实现类
package com.imooc.inter;
public class ClassDemo implements IOuterInterface{
	@Override
	public void abMethod(){
		System.out.println("实现类");
	}
	//获取接口中内部类方法
	public InnerClass getInner(){
		return new InnerClass();
	}
	//继承抽象类AbInnerClass
	public class AbDemo extends AbInnerClass{
		@Override
		public void abInfo(){
			System.out.println("重写接口中抽象类中的抽象方法");
		}
	}
}
//测试类
package com.imooc.test;
import com.imooc.inter.ClassDemo;
import com.imooc.inter.IOuterInterface;
import com.imooc.inter.IOuterInterface.InnerClass;
public class Test{
	//获取成员内部类
	//方式一: 通过接口名.类名进行实例化
	IOuterInterface.InnerClass inner1 = new IOuterInterface.InnerClass();
	inner1.show();
	//方式二: 通过在实现类中创建接口中内部类的获取方法来调用
	ClassDemo demo = new ClassDemo();
	demo.getInner().show();
	//方式三: 通过import导入内部类，直接实例化
	InnerClass inner2 = new InnerClass();
	inner2.show();
	//获取抽象成员内部类
	//方式一: 通过接口名.类名，采用匿名内部类的方式进行实例化
	IOuterInterface.AbInnerClass abInner1 = new IOuterInterface.AbInnerClass(){
		@Override
		public void abInfo(){
			System.out.println("重写抽象类中的抽象方法");
		}
	};
	abInner1.abInfo();
	//方式二: 在实现类中定义内部类继承接口中的抽象内部类
	IOuterInterface.AbInnerClass abInner2 = new ClassDemo().new AbDemo();
	abInner2.abInfo();
}

>>对象实例化的过程
User user = new User(), 分为两步：
1)声明对象，在内存的栈空间执行，User user;
2)实例化对象，在内存的堆空间执行，new User();

>>变量的默认值
数组元素和类的实例变量如果没有赋初值，那么系统会给一个默认值，如
String[] list = new String[3]; //默认值 {null, null, null}

>>方法重载与方法重写
1，方法重载
同一个类中，方法名相同，但接收的参数数量或类型不同；
2, 方法重写
子类对父类的方法的重写；
子类的方法名、参数个数和类型要与父类一致；
子类的返回类型，如果是基本类型则必须与父类相同，如果是引用类型则与父类相同或是父类的子类；
子类方法的访问修饰符不能小于父类方法；
子类方法如果抛出异常，异常范围不能比父类方法的异常更广；
注: 不能被重写的两类方法:
1)final方法
2)static方法

>>static方法不能被重写举例
static方法不能被重写，如果子类有与父类同名的static方法，不叫重写，而是覆盖;
class Animal{
	public void eat() { 
		System.out.println("动物在吃东西");
	}
	public static void run() {
		System.out.println("动物在跑");
	}
}
class Cat{
	public void eat() {
		System.out.println("小猫在吃东西");
	}
	public static void run() {
		System.out.println("小猫在跑");
	}
}
//测试方法
Animal cat = new Cat();
cat.eat(); //多态，调用的是子类重写的方法
cat.run(); //调用的是父类的方法

>>private、static、final这三个修饰符不能与abstract并存;
因为abastract的目的就是重写，这三个关键词修饰的方法都是不能重写的;

>>{}  代码块
1, 普通代码块
{}加载方法里面，为普通代码块，按书写的顺序正常执行;
2, 构造代码块
写在类的里面方法的外面，在构造函数调用之前执行;
3, 静态代码块
static{}
静态代码块最先执行;
执行顺序: 静态代码块 > 构造代码块 > 构造函数;
注: 静态代码块里只能操作静态属性;
无论实例化多少个对象，静态代码块只执行一次，而构造代码块可以执行多次;

>>final修饰的实例变量三个赋初值的地方
1, 声明时直接赋值
private final String NATION = "CHINA";
2, 在构造代码块中赋初值
3, 在构造函数中赋初值
注: 实例常量一定要赋初值，否则会报错;

>>执行顺序
class Animal{
	public static int sValue1 = 10; //1
	public int cValue1 = 20; //5
	static{ //2
		System.out.println("父类的静态代码块"); 
	}
	{ //6
		System.out.println("父类的构造代码块");
	}
	public Animal(){ //7
		System.out.println("父类的构造函数");
	}
}
class Dog extends Animal{
	static{ //3
		System.out.println("子类的静态代码块");
	}
	{ //8
		System.out.println("子类的构造代码块");
	}
	public static int sValue2 = 30; //4
	public int cValue2 = 40; //9
	public Animal(){ //10
		System.out.println("子类的构造函数");
	}
}
Dog dog = new Dog(); 
执行顺序为:
父类静态变量和静态代码块(按代码的顺序)->
子类静态变量和静态代码块->
父类实例变量和构造代码块->父类构造函数->
子类实例变量和构造代码块->子类构造函数;

>>数组
int[] arr = new int[5]; //声明并分配空间
int[] arr = {1, 2, 3, 4, 5}; //声明并初始化
int[] arr = new int[]{1, 2, 3, 4, 5}; //与上面等价
数组可以用如下结构遍历：
for(int item: arr){
	//...
}
//二维数组
int[][] arr = new int[3][]; //必须指明第一维的长度
int[0] = new int[]{1, 2, 3};
int[1] = new int[]{4, 5};
int[2] = new int[]{6, 7, 8, 9};
for(int[] v1: arr){
	for(int v2: v1){
		System.out.print(v2 + "\t");
	}
	System.out.println();
}

>>Arrays类
java.util.Arrays, 操作数组的工具类;
int[] a = {5, 2, 9, 6, 1};
Arrays.toString(a); //打印数组
Arrays.sort(a); //对a排序
Arrays.binarySearch(a, value); //在已排序好的数组a中查找value值
Arrays.equals(a, b); //判断两个数组a和b是否相同
Arrays.fill(a, value); //用value值来填充数组a

>>String类
1，声明和初始化
String s = "hello"; //常量字符串
String s = new String("hello");
2, java中的字符串是不可改变的；
3，字符串的比较
String s1 = "hello";
String s2 = "hello";
String s3 = new String("hello");
String s4 = new String("hello");
s1 == s2; //true //常量字符串多次出现时，会被编译器优化成只创建一个
s3 == s4; //false //比较的是内存地址
s3.equals(s4); //true //equals()比较字符串的内容
"hi"+s1 == "hi"+s1; //false //+运算结果是在运行时确定，所以是不同对象的比较
4，常用方法
s.length(); //长度
s.indexOf(ch/s1); //查找字符或者字符串第一次出现的位置，没找到则返回-1
s.lastIndexOf(ch/s1); //查找字符或者字符串最后一次出现的位置
s.substring(m, n); //查找[m, n)的子串
s.trim(); //去除前后的空格
s1.equals(s2); //比较两个字符串的内容
s.toLowerCase()/s.toUpperCase(); //转换大小写
s.charAt(i); //查找指定位置的字符
s.split(s1); //分割字符串，返回字符串数组
s.getBytes(); //将字符串转换为byte数组

>>StringBuilder/StringBuffer类
两者相似，可以修改字符串对象，避免了String类每次创建对象浪费性能；
StringBuilder s = new StringBuilder();
StringBuilder s = new StringBuilder("hello");
s.length(); //长度
s.append(s1); //追加内容到s的末尾
s.insert(i, s1); //在指定位置插入字符串
s.delete(m, n); //删除[m, n)之间的字符
s.replace(m, n, str); //替换[m, n)之间的字符为str
s.toString(); //将StringBuilder对象转换为String对象
s.reverse(); //反转，本地操作

>>基本类型的包装类型
byte -> Byte;
short -> Short;
int -> Integer;
long -> Long;
float -> Float;
double -> Double;
char -> Character;
boolean -> Boolean;
举例：Integer i = new Integer(5);
Integer i = new Integer("5");
包装类型提供的方法可用于本类型与其他基本类型之间的互相转换；

>>基本类型与字符串之间的转换
1, 基本类型->字符串
int c = 10;
String s = Integer.toString(c);
String s = String.valueOf(c);
String s = c + "";
2, 字符串->基本类型
String s = "8";
int d = Integer.parseInt(s);
int d = Integer.valueOf(s);

>>日期时间类
1，Date类  (java.util.Date)
Date d1 = new Date(); //当前时间
Date d2 = new Date(timestamp); //指定毫秒时间戳的时间
d1.before(d2); //d1是否在d2之前，类似有 d1.after(d2)
d1.equals(d2); //是否相等
d1.compareTo(d2); //比较两个日期，返回-1，0， 1
d1.getTime(); //返回时间戳
d1.setTime(timestamp); //用指定时间戳设置日期
2, SimpleDateFormat类  (java.text.SimpleDateFormat)
用来格式化显示日期时间
//将日期转换为字符串 format()
Date d = new Date();
SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
String s = sd.format(d);
//将字符串转换为日期 parse()
String s = "2021年03月25日 10:30:00";
SimpleDateFormat sd = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");
Date d = sd.parse(s);
3, Calendar类
java中Date类很少使用，一般使用Calendar类来得到日期时间；
Calendar类是个抽象类，可以通过调用getInstance()静态方法获取一个Calendar对象；
Calendar cd = Calendar.getInstance();
cd.set(1987, 7, 1, 12, 30); //设置日期时间的各部分
cd.set(Calendar.YEAR, 1987); //设置日期时间的某个字段
int year = cd.get(Calendar.YEAR);
int month = cd.get(Calendar.MONTH) + 1; //month从0开始
int day = cd.get(Calendar.DAY_OF_MONTH); //同 Calendar.DATE
int hour = cd.get(Calendar.HOUR_OF_DAY);
int minute = cd.get(Calendar.MINUTE);
int second = cd.get(Calendar.SECOND);
int week = cd.get(Calendar.DAY_OF_WEEK); //星期几
Date date = cd.getTime(); //Calendar->Date
Long time = cd.getTimeInMillis(); //以毫秒为单位的时间戳
cd.add(Calendar.DATE, 10); //当前日期加10天

>>Math类
Math类中所有方法都是静态方法；
Math.round()/Math.floor()/Math.ceil()/Math.sqrt();
Math.random(); //[0, 1)之间的随机数

>>Scanner类
文本扫描器，获取控制台用户的输入；
Scanner scanner = new Scanner(System.in);
scanner.next(); //获取输入的字符串，遇到空格结束
scanner.nextLine(); //获取输入的字符串，遇到换行结束
scanner.nextInt(); //获取输入的整数
scanner.nextFloat()/nextDouble(); //获取输入的浮点数
scanner.hasNext()/hasNextLine()/hasNextInt()/hasNextFloat(); //是否有对应的输入，返回布尔值

>>集合
1, 两大根接口：Collection、Map;
Collection有三个子接口：List、Queue、Set；
List的实现类：ArrayList, LinkedList;
Queue的实现类：LinkedList;
Set的实现类：HashSet;
Map的实现类：HashMap;
使用最多的是ArrayList、HashSet、HashMap;
2，ArrayList类
数组的封装, ArrayList类实现了List接口；
List pers = new ArrayList(); 
List<String> pers = new ArrayList<String>(); //泛型，指定数组内元素的类型
pers.add("zhao"); pers.add("qian"); pers.add("sun"); //在数组的末尾添加元素
pers.add(1, "li"); //在指定位置添加元素
pers.contains("zhao"); //判断指定的元素是否存在
pers.size(); //数组的元素个数
pers.get(1); //取指定位置的元素
pers.set(1, "sun"); //修改指定位置的元素
pers.remove(1); //删除指定位置的元素
pers.remove("qian"); //删除指定元素
//用for结构循环遍历
for(String item: pers){ 
	//...
}
//用迭代器循环遍历
Iterator<String> it = pers.iterator();
while(it.hasNext()){
	String s = it.next();
	//...
}
System.out.println(pers); //以[]形式输出数组
注：把某个对象放入集合中，集合会统一当成Object对象处理，在用get方法取出时需要用强制类型转换
成特定的类，而用泛型则可以避免这种转换；
3，HashSet类
HashSet类实现了Set接口，其内部的元素是无序的，循环迭代输出的顺序不可预知；
Set<String> st = new HashSet<String>();
st.add("zhao"); //添加元素，多次添加相同的元素只算作一个
st.size(); //集合的元素个数
st.contains("zhao"); //判断指定的元素是否存在
st.remove("zhao"); //删除集合的指定元素
st.clear(); //清空集合所有的元素
st.isEmpty(); //判断集合是否为空
注：同List不同，Set没有get()和set()方法;
4，HashMap类
HashMap类实现了Map接口；Map里有个内部类Entry；
Map里有个内部类Entry, 存储键值对<Key, Value>；
Map里的key值不可重复，而value值可以；
Map<String, Integer> pers = new HashMap<String, Integer>();
pers.put("zhao", 30); //key值不存在，则添加元素
pers.put("zhao", 40); //key值存在，则修改元素
pers.get("zhao"); //取指定键对应的值
pers.remove("zhao"); //按指定的键删除元素
pers.size(); //元素的个数
pers.containsKey("zhao"); //判断是否存在指定的键
pers.containsValue(30); //判断是否存在指定的值
pers.keySet(); //键的集合
pers.values(); //值的集合
pers.entrySet(); //键值对的集合
注：Collection<Student>进行查找或判断是否包含操作时，需要Student类重写Object类的
hashCode()和equals()方法；
5, Comparable接口和Comparator接口
Comparable接口定义了默认的比较规则，而Comparator接口定义临时的比较规则；
自定义类实现 Comparable接口，实现compareTo()方法；
或定义一个临时的三方类实现 Comparator接口，实现compare()方法；
6, Collections工具类
Collections.sort(lists); //需要lists对象实现Comparable接口
Collections.sort(lists, ComparatorObj); //需要ComparatorObj实现Comparator接口
7，示例，重写了Object的toString()、hashCode()、equals()方法，并实现了Comparable接口;
class Student implements Comparable<Student>{
	public String name;
	public int age;
	//构造函数
	public Student(){}
	public Student(String name, int age){
		this.name = name;
		this.age = age;
	}
	@Override
	public String toString(){
		return "Name: " + this.name + ", age: " + this.age;
	}
	@Override
	public int hashCode(){
		return this.name.hashCode(); //或者返回其他哈希值
	}
	@Override
	public boolean equals(Object o){ //参数必须为Object类型
		if(this == o) return true;
		if(o == null || !(o instanceof Student)) return false;
		Student st = (Student)o;
		if(this.name.equals(st.name) && this.age==st.age) return true;
		return false;
	}
	public int compareTo(Student o){ //实现comparable接口的compareTo()方法
		return this.name.compareTo(o.name); //按姓名比较
		//return this.age - o.age; //按年龄比较
	}
	public static void main(String[] args){ //测试
		List<Student> lists = new ArrayList<Student>();
		lists.add(new Student("zhao", 30)); 
		lists.add(new Student("qian", 40));
		lists.add(new Student("sun", 20));
		lists.contains(new Student("qian", 40));
		Collections.sort(lists); //实现Comparable接口
		Collections.sort(lists, new StudentComparator()); //实现Comparator接口
	}
}
class StudentComparator implements Comparator<Student>{ //定义三方类进行临时比较
	public int compare(Student st1, Student st2){
		return st1.getAge() - st2.getAge();
	}
}

>>异常处理
1，最底层的异常类 Throwable，由 Throwable 继承出两个类 Error 与 Exception；
Error是底层致命错误，会导致程序中断；
Exception是程序逻辑错误导致，我们平时用到的异常都是继承Exception类；
2，抛出异常的关键字有 throw 和 throws 两个，使用如下
public double divide(int one, int two) throws Exception{
	if(two == 0){
		throw new Exception("除数为0");
	}else{
		return one / two;
	}
}
3，处理异常
1)由 try...catch...finally来处理异常
public void compute(){
	try{
		double d = divide(5, 0);
	}catch(ArithmaticException e){
		//...
	}catch(Exception e){
		//...
	}finally{
		//...
	}
}
2)不处理，继续抛出，让上层处理
public void compute() throws Exception{
	double d = divide(5, 0);
}
注：函数内部有未处理的抛出异常，函数头必须声明throws异常；
4, 自定义异常
class MyException extends Exception{
	//...
}

>>正则表达式
主要用到两个类: Pattern 和 Matcher;
1, 判断是否完全匹配
String subject = "a520";
String pattern = "a(\\d+)";
boolean isMatch = Pattern.matches(pattern, subject); //true
2, 获取匹配结果
Pattern r = Pattern.compile(pattern);
Matcher m = r.matcher(subject);
//通过Matcher提供的方法进行操作

>>输入输出流
1, File类
File file = new File("../cao/test.txt");
file.getPath(); //..\cao\cao.txt
file.getAbsolutePath(); //E:\Java\test\..\cao\cao.txt
file.getCanonicalPath(); //E:\Java\cao\cao.txt
file.exists(); //文件或目录是否存在
file.isFile(); //是否是文件
file.isDirectory(); //是否是目录
file.mkdir(); //创建目录
file.mkdirs(); //递归创建多层目录
file.createNewFile(); //创建文件
file.delete(); //删除目录或文件
file.length(); //文件的长度(单位为字节)

>>反射(reflect)
1，概念
反射是指JVM动态获取程序信息以及动态调用对象的功能，
JVM每加载一个.class文件，就会创建一个Class类型的实例与之对应；
反射相关的包是 java.lang.reflect.*;
2，获取Class对象的三种方式
1)类名.class
Class cls = Student.class;
2)对象.getClass()
Student st = new Student();
Class cls = st.getClass();
3)Class.forName("包名.类名")
Class cls = Class.forName("java.util.ArrayList");
3, 利用反射调用类的构造方法、字段、方法
1)获取构造函数
getConstructor(Class...)/getDeclaredConstructor(Class...); //获取某个构造函数
getConstructors()/getDeclaredConstructors(); //获取所有构造函数
constructor.newInstance(...); //实例化对象
2)字段
getField(name)/getDeclaredField(name); //根据属性名获取某个字段
getFields()/getDeclaredFields(); //获取所有字段
field.getType(); //字段类型
field.getName(); //字段名
field.get(obj); //获取obj对象的字段的值
field.set(obj, value); //给obj对象的字段赋值
3)方法
getMethod(name, Class...)/getDeclaredMethod(name, Class...); //获取某个方法
getMethods()/getDeclaredMethods(); //获取所有方法
method.invoke(...); //调用方法
class User{
	public String name;
	private int age;
	public User(){}
	public User(String nm){name = nm;}
	public User(String nm, int a){name = nm; age = a;}
	public String toString(){return "name: " + name + ", age: " + age;}
	public void eat(String food){System.out.println(name + " eats " + food);}
	public static void main(String[] args){
		Class cls = User.class; //同 Class.forName("com.company.User");
		Constructor constructor = cls.getConstructor(String.class); //User(String)
		Constructor constructor1 = cls.getConstructor(String.class, int.class); //User(String, int)
		Object obj = constructor.newInstance("zhao"); //实例化对象
		Object obj1 = constructor1.newInstance("zhao", 30);
		Field name = cls.getField("name");
		Field age = cls.getField("age");
		name.getType(); //字段的类型
		name.getName(); //字段的名字
		name.get(obj1); //获取某个对象的字段的值
		age.setAccessible(true); //私有类型的字段要先设置
		age.getType(); age.getName(); age.get(obj1); 
		Field[] fields = cls.getFields(); //获取所有字段
		name.set(obj, "饼饼");
		age.set(obj, 5); //给obj对象的字段赋值
		Method method = cls.getMethod("eat", String.class);
		method.invoke(obj, "苹果"); //调用方法
	}
}

>>注解(Annotation)
是一种用于标注的元数据，用来标记包、类、方法、变量、参数等;
按照运行机制分类:
1)源码注解
只存在于源码中，给编译器看的，编译后丢弃，如@Override;
2)编译时注解
在编译时保留，当JVM加载.class时丢弃，如@NotNull;
3)运行时注解;
在运行时仍然起作用，甚至会影响程序的运行逻辑，可以通过反射获取到该注解;
按照来源分类:
1)来自JDK的注解;
2)来自第三方的注解;
3)我们自定义的注解;
1, 内置注解
java提供了10个内置注解，5个在java.lang包，5个在java.lang.annotation包;
用在代码的注解：
@Override
@Deprecated
@SuppressWarnings
@SafeVarargs
@FunctionalInterface
用在其他注解的注解(元注解)
@Retention
@Documented
@Target
@Inherited
@Repeatable
2, 定义注解
1)创建注解，用@interface；
2)定义参数和默认值;
3)用元注解配置注解;
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.FIELD, ElementType.LOCAL_VARIABLE})
public @interface Length{
	int min() default 0;
	int max() default Integer.MAX_VALUE;
	String message() default "长度不合法";
}
注：如果注解只有一个参数且是最常用的参数，那么应将此参数命名为value, 如
@Inherited
@Target(ElementType.TYPE)
public @interface TestAnnotation{
	String value() default "test";
}
使用:
@TestAnnotation("测试注解")
public class Pet{
	//...
}
3, 处理注解
1)使用注解
2)通过反射读取注解
User.class.getDeclaredField("name").isAnnoTationPresent(Length.class); //判断注解是否存在
User.class.getDeclaredField("name").getAnnoTation(Length.class); //获取注解
3)编写校验方法
public class User{
	@Length(min=2, max=5, message="名字长度必须在2~5之间")
	public String name;
	public void CheckNameLength() throws Exception{ //校验方法
		Field field = User.class.getDeclaredField("name");
		Length annotation = field.getAnnoTation(Length.class);
		if(annotation != null){
			String nameField = (String)field.get(this);
			if(nameField.length() < annotation.min() || nameField.length() > annotation.max()){
				throw Exception(field.getName() + ":" + annotation.message());
			}
		}
	}
}

>>单例模式
1, 实现要点
1)只提供私有的构造方法;
2)含有一个该类的静态私有对象;
3)提供一个静态的公有方法，用于创建、获取静态私有对象;
2, 两种实现方法
1)饿汉式: 加载类时就实例化;
特点: 在类加载的时候就实例化静态私有对象，不管你用不用得到;
class Singleton{
	private Singleton(){}
	private static Singleton obj = new Singleton();
	public static Singleton getInstance(){
		return obj;
	}
}
2)懒汉式: 静态公有方法中实例化;
特点: 只在调用静态公有方法时才实例化静态对象;
class Singleton{
	private Singleton(){}
	private static Singleton obj = null;
	public static Singleton getInstance(){
		if(obj == null){
			obj = new Singleton();
		}
		return obj;
	}
}
3, 饿汉式是线程安全的, 懒汉式存在线程风险;

>>枚举
1，枚举可以定义在类的外部，也可以定义在类的内部，但不可以定义在方法中;
2, 如果枚举定义在当前类的内部或外部，可以直接访问，如 Gender.MALE;
如果枚举定义在其他类中，需加类名访问，如 Outer.Gender.MALE;
3, 用于if结构和switch结构
Gender gender = MALE;
if(gender == Gender.MALE){

}
switch(gender){
	case MALE:
		break;
	case FEMALE:
		break;
	default:
		break;
}












