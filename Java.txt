>>jvm, jre和jdk
1，java程序的执行分为两个过程: 
编译(源程序.java->字节码文件.class)和解释执行(jvm)，jvm依赖于具体的平台，是实现java跨平台的基础；
2，jre = jvm + 标准类库,
jdk = jre + 开发工具集;
3，jdk中的两个组件javac(编译器)和java(虚拟机);
javac.exe和java.exe包含在bin目录下，安装jdk后需要把该目录添加到环境变量中，如在环境变量的path中添加
D:\Java\jdk1.8.0_261\bin;
4, 命令行运行java程序:
javac Hello.java
java Hello


>>eclipse
1, 打开eclipse时会提示设置工作目录，如D:\Java\workspace, 工作目录可通过File->Switch Workspace进行切换;
2, 新建工程test后，源文件放在D:\Java\workspace\test\src目录下，编译生成的字节码文件放在D:\Java\workspace\test\bin目录下;
3, 可通过Window->Preferences进行个性化设置，通过Window->Show View设置当前打开哪些子窗口；
4, test工程右键->Resource->encoding设置程序的编码，有时导入源码中出现中文乱码可通过这种方式解决;
也可通过Window->Preferences->encoding进行编码的设置;
5, 调试默认快捷键
F6-单步调试, F8-直接跳到下一个断点, F5-进入函数, F7-跳出函数;


>>基本语法
1, 标识符可包含字母、数字、_和$，不能以数字开头，区分大小写，不能为关键字和保留字;
2, 目前java有50个关键字，2个保留字(goto、const);
3, 项目名首字母小写，类名首字母大写，变量名和方法名首字母小写，都遵循驼峰命名法;
4, 变量的三个要素: 变量类型、变量名、变量值;
5, 变量的分类:
按数据类型分: 基本类型、引用类型；
按作用范围分: 类级变量、实例级变量、方法级变量(局部变量)、块级变量;
6, ascii码
用1个字节表示字母数字及常用符号;
标准ascii码: 7位，表示128个字符;
扩展ascii码: 8位，表示256个字符;
7, unicode码
用两个字节表示全世界所有的字符;
char c = '\u005d';
String s = "A\u00d2\u02a8B";
8，常量用final修饰，常量的命名全部用大写，多个单词之间用_分隔，这与变量不同，如
int minValue = -100;
final int MIN_VALUE = -100;
9, 运算符
算术运算符、赋值运算符、关系运算符、逻辑运算符、条件运算符、位运算符;
10, &&与&都是逻辑与运算符，前者是短路逻辑，||与|类似;
11, 局部变量在使用前一定要初始化，否则会报错;
12, 包
包的作用: 管理java的类，以及防止类的命名冲突;
包的命名采用: 域名倒序.项目.模块.功能, 如 pacakge com.imooc.animal;
加载某个包里的所有类: import com.imooc.animal.*;
加载某个包里的特定类: import com.imooc.animal.Cat;
注: import 包名.* 只能导入指定包名下所有直接允许访问的类, 无法导入其子包中的类;


>>数据类型
1, 分类
1)基本类型
	数值型
		整数类型: byte(1), short(2), int(4), long(8);
		浮点类型: float(4), double(8);
	字符型: char(2);
	布尔型: boolean(1);
2)引用类型
类(class)、接口(interface)、数组;
2，long类型字面量后要加L，float类型字面量后要加f, 如
long a = 123L;
float b = 1.23f;
3, 二进制加前导0b，八进制加前导0，十六进制加前导0x, 如
int a = 12;
int b = 0b1011;
int c = 012;
int d = 0x12;
4, 类型转换
1)自动转换(隐式转换)
小类型可以自动转换为大类型，不会丢失精度, 如
long a = 100;
double b = 1.23f; 
char c = 65;
2)强制转换(显式转换)
大类型转换为小类型，需要经过强制转换店，如
int a = (int)100L;
float b = (float)1.23;
char c = (char)65536;
注: char用2个字节表示，范围为0~65535, 超过这个表示范围需要使用强制转换;
5, 不同基本类型的数值比较，只要值相等，==就返回true;
10L == 10.0; //true
'a' == 97; //true


>>数组
1，数组的定义
//一维数组
int[] a = new int[10];
int[] b = {1, 2, 3, 4, 5};
int[] c = new int[]{1, 2, 3, 4, 5};
//二维数组
int[][] a = new int[3][4]; 
int[][] b = new int[3][];  //必须指定第一维的长度
int[][] c = {{1}, {2, 3}, {4, 5, 6}}; //第二维的长度可以不同
注: 与局部变量不同，数组中的元素都有默认初始值;
2, 增强型for循环
int[] a = {1, 2, 3, 5, 8};
for(int item: a){
	//...
}
3, 双重循环的写法(如冒泡排序)
外层循环表示次数，内层循环表示每次遍历;
for(int i = 0; i < a.length-1; i++){ //a.length-1次
	for(int j = 0; j < a.length-1-i; j++){ //沉底
		//...
	}
	for(int j = a.length-1; j > i; j--){ //冒泡
		//...
	}
}


>>方法
1, 给主方法main传递参数
1)命令行中
javac Hello.java
java Hello zhao 30
2)Eclipse中
Run->Run Configurations->Arguments中填入参数;
2, 按值传参
方法是按值传参的，如果是基本类型数据则不会改变，而引用类型数据里的字段值会改变;
数组名是指向数组第一个元素的引用，所以传递数组，会改变数组元素的值;
3, 方法重载
方法的参数个数或参数的类型不同, 称为方法重载，如
int sum(int a, int b);
float sum(float a, float b, float c);
int sum(int[] a);
4, 可变参数
1)int sum(int... a){
	//a是实参组成的数组
}
实参可以是可变参数，也可以是数组; 
当有多个形参时，可变参数必须放在最后;
2)含可变参数的方法可以与具体参数的方法重载，优先调用具体参数的方法，如
int sum(int... a){}
int sum(int a, int b){}
当调用sum(1, 2)时，优先调用第二个方法;


>>面向对象
1, 面向对象的三大特征: 
封装, 继承, 多态;
2, 类和对象的基本语法
1)与局部变量不同，类的属性会有默认初始值;
2)单一职责原则: 一个类只完成一个功能，即高内聚，低耦合;
3)对象实例的引用, 输出的值形如 com.imooc.animal.Cat@4926097b;
4)如果没有定义构造函数，系统会提供一个默认的无参构造函数，如果显式定义了构造函数，则不会提供默认构造函数;
5)构造函数只能在构造函数之间相互调用且必须出现在第一行，不允许在别的地方显式调用;
public Cat(){
	//...
}
public Cat(String name){
	this();
	this.name = name;
}
public Cat(String name, int age){
	this(name);
	this.age = age;
}
6)内存的划分: 栈、堆、常量池;
栈中存放一些局部变量, 如基本数据类型变量、对象的引用等, 当局部变量作用范围结束时, 栈内信息自动释放;
堆中存放动态数据, 如new出来的对象, 当无实例引用指向堆中数据时，垃圾回收机制才会释放堆空间;
如 Cat one = new Cat(); 分为两部分:
对象声明 Cat one, 在栈空间;
对象实例化 new Cat(), 在堆空间;
7)封装
隐藏对象的信息，提供访问的接口;
封装的实现有三步:
修改属性的可见性为private；
创建公开的getter/setter方法用于属性的读写;
在getter/setter方法中对属性的合法性进行判断;
8)static
静态成员，又叫类成员，包括静态属性和静态方法, 是属于类的，只在类加载时初始化一次，存续时间较长;
静态成员可以通过类名.静态成员或对象.静态成员这两种方式访问，推荐用前者;
静态方法里面只能访问静态成员，而非静态方法既可以访问非静态成员，也可以访问静态成员;
注: java中没有静态局部变量;
注: static方法只能被子类继承，不能被子类重写;
9)代码块
静态代码块: 
只在类加载时执行一次，不能在静态代码块中直接访问非静态成员;
构造代码块:
每次实例化对象时都会执行，在构造方法之前调用;
普通代码块:
在方法体内用{}括起来的一段代码块;
注: java有块作用域，在代码块中定义的变量，外部无法访问;
10)类的组成要素及初始化顺序
静态属性、静态代码块、静态方法、实例属性、构造代码块、构造方法、实例方法, 初始化顺序编号如下: 
public class Cat{
	private String name = "小猫";  //3
	public static int price = 100;  //1
	static{  //2
		System.out.println("静态代码块...."):
	}
	{  //4
		System.out.println("构造代码块....");
	}
	public Cat(){  //5
		System.out.println("构造方法....");
	}
	public String getName(){
		return name;
	}
	public void setName(String name){
		this.name = name;
	}
	public void changePrice(int price){
		Cat.price = price;
	}
}
11)访问修饰符 
(默认): 本包(√);
protected: 本包(√), 跨包子类(√);
按可见性由大到小排列: public > protected > (默认) > private;
12)final
final作用于类, 表示类不能被继承;
final作用于方法，表示方法不能被重写;
final作用于属性，表示常量;
3, 继承
1)java只支持类的单继承，但可以实现多个接口，接口之间也可以多继承;
2)方法重写
子类方法的参数数量和类型要与父类一致, 如果不一致就属于方法重载;
子类方法访问修饰符的可见性必须大于等于父类方法;
子类方法的返回值要么与父类相同，要么是父类方法返回值的子类;
子类方法抛出的异常类型要么与父类相同，要么是父类方法抛出的异常类型的子类;
3)super
子类中调用父类的方法;
super(name, age); //调用父类的构造方法, 必须出现在第一行
super.name; //调用父类的属性
super.eat(); //调用父类的方法
4)子类的构造方法如果没有显式调用父类的构造方法，则默认调用父类的无参构造方法;
因为无参构造方法会被子类默认调用，所以一般情况下定义类时记得加上无参构造方法;
5)继承的初始化顺序
父类的静态属性初始化->父类的静态代码块->
子类的静态属性初始化->子类的静态代码块->
父类的实例属性初始化->父类的构造代码块->父类的构造方法->
子类的实例属性初始化->子类的构造代码块->子类的构造方法;
6)程序编译出错不一定导致运行出错，如果程序运行时不执行出错代码，则也能运行正常;
class Animal{
	private String name;
	public Animal(String name){ this.name = name; }
}
class Cat extends Animal{
	private int age;
	public Cat(){} //此处编译出错
	public Cat(Sting name, int age){ super(name); this.age = age; }
}
public class Test{
	Cat cat = new Cat("花花", 5); 
}
由于父类没有定义无参构造方法，所以编译出错，但并不影响运行结果;
4, 多态
1)不同对象对同一消息做出不同的反应;
多态要满足三个条件: 满足继承关系; 要有重写; 父类引用指向子类对象;
多态 = 向上转型 + 动态绑定;
2)向上转型
也叫隐式转型、自动转型，将子类转换为父类;
Animal one = new Cat();
3)向下转型
也叫显式转换、强制转换, 向下转型是为了重新获得因为向上转型而丢失的子类特性, 通常结合instanceof一起使用;
((Cat)one).run();
注: 子类实例向上转型后，就不能再调用子类特有的方法了，必须再向下转型后才能调用;
4)instanceof
Animal one = new Cat();
one instanceof Animal; //true
one instanceof Cat; //true
one instanceof Dog; //false
5)多态的应用举例
public class Master{
	public void feed(Animal obj){
		obj.eat();
		if(obj instanceof Cat){
			((Cat)obj).run();
		}else if(obj instanceof Dog){
			((Dog)obj).sleep();
		}
	}
	public Animal select(int type){
		if(type == 1){
			return new Cat();
		}else{
			return new Dog();
		}
	}
}
5, 抽象类
1)抽象类不能直接实例化; 子类需要重写抽象父类的抽象方法，否则子类也是抽象类;
public abstract class Animal{
	public abstract void eat();
}
2)abstract不能与final、static、private一起使用;
6, 接口
1)继承一个类的同时可以实现多个接口
public class FourthPhone extends ThirdPhone implements IPhoto, INet{
	//...
}
ThirdPhone phone1 = new FourthPhone();
phone1.message(); //从父类继承的方法;
IPhoto phone2 = new FourthPhone();
phone2.photo(); //从接口IPhoto实现的方法;
INet phone3 = new FourthPhone();
phone3.network(); //从接口INet实现的方法
2)实现类需要实现接口里的所有抽象方法, 否则实现类就是抽象类;
interface IAnimal{
	void run();
	void eat();
}
abstract class Pet implements IAnimal{ //未实现接口的全部方法，所以定义为抽象类
	@Override 
	public void run(){
		System.out.println("Pet can run...");
	}
}
class Cat extends Pet{ //继承抽象类，实现抽象方法
	@Override
	public void eat(){
		System.out.println("Cat can eat...");
	}
}
3)接口中的方法默认是 public abstract, 接口中的常量默认是 public static final;
interface IAnimal{
	String NATION = "China";
	void eat();
}
4)接口中的组成要素
抽象方法、常量、默认方法、静态方法;
interface IAnimal{
	String NATION = "China"; //常量, 默认是 public static final
	void eat(); //抽象方法, 默认是 public abstract
	public default void run(){ //默认方法
		//...
	}
	public static void sleep(){ //静态方法
		//...
	}
}
class Cat implements IAnimal{
	@Override
	public void eat(){ //必须实现抽象方法
		//...
	}
	@Override
	public void run(){ //是否重写默认方法可选
		IAnimal.super.run();
		//...
	}
}
注: 重写默认方法时不用加default, 实现类中调用接口的默认方法用 接口名.super.方法名 的格式;
静态方法不能被重写, 只能通过 接口名.方法 的格式调用接口的静态方法;
5)当接口和父类中含有同名方法或同名常量/变量时
如果只实现两个接口，则必须重新定义该同名方法;
如果继承父类的同时实现两个接口，则优先调用父类的同名方法;
与父类的方法优先不同，父类的变量与接口的常量如果同名，则地位相同，必须显示指定调用哪一个，如
super.name, IPhoto.name, INet.name, 或者在子类中重新定义该变量;
6)接口的继承
public interface ISon extends IFather{}
接口是可以多继承的
public interface IHuman extends ITalk, IWork{}


>>Object类
java.lang.Object是所有类的父类, Object类中有几个方法经常需要被重写, 如hashCode(), equals(), toString();
equals()默认比较的是两个对象的地址是否相同;
toString()默认返回的对象引用的描述，如 com.imooc.animal.Cat@4926097b;
public class Animal{
	private String name;
	private int age;
	public Animal(){}
	public Animal(String name, int age){ this.name = name; this.age = age; }
	@Override
	public int hashCode(){
		return this.name.hashCode();
	}
	@Override
	public boolean equals(Object obj){
		if(obj == null) return false;
		if(obj == this) return true;
		if(getClass() != obj.getClass()) return false;
		Animal temp = (Animal)obj;
		if(name.equals(temp.name) && age==temp.age) return true;
		return false;
	}
	@Override
	public String toString(){
		return "Animal[name=" + name + ", age=" + age + "]";
	}
}


>>注解
1, 用来对包、类、属性、方法、局部变量、方法参数等元素进行说明和注释的标记;
2, 按照运行机制，分为源码注解、编译时注解、运行时注解;
源码注解: 只在源码中保留，编译时丢弃，如@Override;
编译时注解: 编译时期保留，在JVM加载class文件时丢弃，如@NotNull;
运行时注解: 程序运行时还起作用，甚至会影响程序运行逻辑;
3, 按照来源，分为来自JDK的注解、来自第三方的注解、自定义的注解;
4, 元注解
用来对注解进行说明的注解;


>>设计模式
1, 单例模式
实现:
将构造方法设置为私有; 在类中创建静态私有属性用来保存唯一的实例对象; 提供一个公有的静态方法用于获取静态私有对象;
1)饿汉式: 在类加载时就创建实例, 是线程安全的;
public class Singleton{
	private static Singleton obj = new Singleton();
	private Singleton(){}
	public static Singleton getInstance(){
		return obj;
	}
}
2)懒汉式: 在调用时才创建实例, 存在线程风险;
public class Singleton{
	private static Singleton obj = null;
	private Singleton(){}
	public static Singleton getInstance(){
		if(obj == null){
			obj = new Singleton();
		}
		return obj;
	}
}







