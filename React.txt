>>React基本概念
1, React由facebook开发, 是动态构建用户界面的js库, 将数据渲染成html页面;
2, React使用组件化开发方式, 采用声明式编码, 与传统的命令式编码(如jquery)不同;
3, React使用虚拟DOM+优秀的diffing算法, 最小化重绘页面, 尽量减少与真实dom的交互;


>>React基本使用
<div id="box"></div>
<script src="/react.develepment.js"></script>  //引入React全局对象
<script src="/react-dom.develepment.js"></script>  //引入ReactDOM全局对象
<script src="/babel.js"></script>
<script type="text/babel">  //此处一定要写babel
	const vdom = <div><p>Hello world</p></div>  //创建虚拟dom
	ReactDOM.render(vdom, document.getElementById('box'))  //渲染页面
	//ReactDOM.createRoot(document.getElementById('box')).render(vdom)
</script>
注: babel.js的作用: 
1)将es6语法转换成浏览器能识别的es5;
2)将jsx转换成js;


>>react脚手架
1, 通过脚手架的 npx create-react-app demo 命令创建项目, 脚手架会通过webpack创建一个
内置服务器devServer, public文件夹就是这台内置服务器的根路径, 然后就可以通过 
localhost:3000来访问应用;
注: 刷新页面, 某些静态资源会从缓存中取, 按shift键的同时刷新, 则所有资源都从后台重新取, 不走缓存;
注: 也可以先把create-react-app这个命令安装到全局环境: npx install create-react-app -g; 然后直接
调用create-react-app这个命令来创建项目: create-react-app demo; 速度会快一点;
2, 修改react应用的默认端口号:
依次打开 node_modules -> react-scripts -> scripts -> start.js, 修改
DEFAULT_PORT的值为3001;
3, 文件目录
demo
	node_modules  		//包文件夹
	public  			//静态资源文件夹
		index.html  		*//主页面
		favicon.ico  		//网站图标
		manifest.json  		//应用加壳的配置文件
		robots.txt  		//爬虫协议文件
	src  				//源码文件夹
		index.js  			*//入口文件
		App.js  			*//APP组件
		index.css 			//样式
		App.css  			//APP组件的样式
	package.json		//包的说明文件
1)index.html
<head>
	<link rel="icon" href="%PUBLIC_URL%/favicon.ico" />  //网站的偏爱图标
</head>
<body>
	<div id="root"></div>
</body>
注: %PUBLIC_URL%就表示public文件夹;
2)index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './APP';
ReactDOM.createRoot(document.getElementById('root')).render(<App />);
注: 入口文件index.js是由脚手架自动调用;
3)App.js
import React from 'react';
import './App.css';
import Hello from './Hello.js';
function App(){
	return (
		<div>
			<Hello />
		</div>
	)
}
export default App;
注: 有两种方式区别组件与普通的js文件:
一是将组件的首字母大写;
二是将组件命名为.jsx, 如 Hello.jsx;
注: 刚开始拿到一个新项目时, 本地电脑里并没有项目中使用的包, 要先运行: npm install; 将
package.json里面的依赖下载到node_modules里;


>>组件化编码流程
1, 拆分组件
拆分界面, 抽取组件;
2, 实现静态组件
使用组件实现静态页面效果;
3, 实现动态组件
1)动态显示初始化数据
2)交互(从绑定事件监听开始)


>>虚拟DOM
1, 创建虚拟DOM的两种方式
1)使用JSX
const vdom = <div id="main" className="content"><span>hello world</span></div>
2)使用 React.createElement(标签名, 标签属性, ...标签体)
const vdom = React.createElement('div', {id: 'main', className: 'content'}, 
	React.createElement('span', {}, 'hello world'));
注: JSX就是用来创建虚拟DOM的语法糖, 而虚拟DOM就是一个对象, 如
const vdom = {
	type: 'div',
	props: {
		id: 'main',
		className: 'content',
		children: {
			type: 'span',
			props: {
				children: 'hello world'
			}
		}
	}
}
注: 虚拟DOM的属性比真实DOM要少得多, 所以轻量级;
虚拟DOM是存放在内存中的对象, 最终会被React转换成真实DOM渲染到页面;
2, React元素
React元素就是一个js对象, ReactDOM负责更新DOM来与react元素保持一致;
React元素: const elem = <h1>hello world</h1>;
ReactDOM: const root = ReactDOM.createRoot(document.getElementById('root'));
渲染: root.render(elem);
注: React元素是不可变对象, 一旦被创建，就无法更改它的子元素和属性;
elem.props.className = 'change';  //×
elem.props.style = {color: 'red'};  //×
elem.props.style.color = 'red';  //√
3, 调用组件时, 组件体作为props.children一起传递
组件定义:
function MyLink(props) {
	return (
		<a className="link" {...props} />  //等价于
		<a className="link" {...props} >{props.children}</a>  
	)
}
调用组件:
<Mylink href="..." target="_blank">百度</MyLink>


>>组件的调用
function Hello(){
	return (
		<>
			<h1>这是Hello组件</h1>
			<A name="Tom" age={30}>hello</A>
		</>
	)
}
此时Hello组件中包含A组件, 系统调用A函数组件, 并且给A组件传递参数 props:
{name: 'Tom', age: 30, children: 'hello'};


>>JSX的语法规则
1, react定义的一种类似于XML的JS扩展语法: JS+XML;
2, 定义虚拟DOM时, 不要写引号;
3, 标签中混入js表达式时要用{};
4, 引入类名, 不能用class, 要用className;
5, 使用内联样式, 不能写成字符串, 要写成 style={{color: 'blue'}}, 或 style={myStyle};
6, 根标签只能有一个, 如果有多个标签, 要在最外层包一个<div>或<>;
7, 所有标签都必须闭合, 如 <input />;
8, JSX标签如果以小写开头, 则被转换成html元素, 如果以大写开头, 则视为组件;
注: JSX里的{}, 里面只能包含表达式, 而不能写流程控制语句, 如if等;


>>模块与组件
1, 模块
提供特定功能的js程序, 一般就是一个js文件;
仅拆分js;
2, 组件
用来实现局部功能的代码和资源的集合(html/css/js/image等);
不仅拆分js, 还拆分html, css, image等;
React是面向组件的编程;
3, 作用
简化代码, 提高复用性;


>>两种形式的组件
1, 函数组件
function Hello(props) {
	return <div>hello world</div>
}
2, 类式组件
class Hello extends React.Component {
	render() {
		return <div>hello world</div>
	}
}


>>组件的三大基本属性(类式组件)
1, state
组件一般都是有状态的, 数据驱动行为;
class Hello extend React.Component {
	constructor(props) {
		super(props)
		this.state = {
			isHot: false
		}
	}
	fn() {  //定义在原型链上
		this.setState({
			isHot: !this.state.isHot
		})
	}
	render() {
		return <div onClick={this.fn}>{this.state.isHot ? '太热了' : '很凉快'}</div>
	}
}
该实例存在bug, 会出现fn()里面this的指向问题, 可通过以下几种方式修改:
1)构造函数里增加如下一行, 改变fn()中this指向, 同时将fn定义到实例上:
this.fn = this.fn.bind(this);
2)将fn定义成箭头函数, 箭头函数中的this就等于外层this:
fn = () => {
	this.setState({
		isHot: !this.state.isHot
	})
}
3)在事件绑定时修改fn中的this指向:
<div onClick={this.fn.bind(this)}>...
注: 状态的修改必须通过this.setState()来实现, 且多个状态之间的修改是合并, 而不是替换;
注: constructor()只调用一次, fn()调用n次, render()调用1+n次;
2, props
用来向组件传递数据;
//逐个数据传递
<Hello name="zhao" age=32 />
//批量传递
const p = {name: 'zhao', age: 32}
<Hello {...p} />
注: 组件的props是只读的, 只允许从父组件接收数据, 不允许修改;
3, refs
组件内的标签使用ref来标识自己;
类式组件的refs使用有三种形式:
1)字符串形式(即将废弃)
给组件标签定义ref, 然后就可以通过类的refs属性引用;
<input ref="ip1" />
<input ref="ip2" />
引用: this.refs.ip1.value;
2)回调函数形式
<input ref={c => this.ip1 = c} />  //c就表示input结点
引用: this.ip1.value;
3)createRef形式
this.myRef = React.createRef();  //创建一个容器
<input ref={this.myRef} />  //将input结点本身放入到容器, 一个容器只能存一个结点
引用: this.myRef.current.value;


>>hooks
1, useState()  //初始化和设置状态值
import {useState} from 'react';
const [count, setCount] = useState(0);
setCount()的两种写法:
1)直接形式: setCount(count+1)
2)回调函数的形式: setCount(n => n+1)  //这种形式通用性更好
2, useEffect()  //生命周期钩子
import {useEffect} from 'react';
相当于componentDidMount()、componentDidUpdate()、componentWillUnmount()的组合, 有如下几种形式:
1)没有第二个参数, 表示监测所有状态值, 即在组件挂载与每次更新时都调用
useEffect(() => {
	//...
})
2)第二个参数为空数组, 表示不监测任何状态值, 即仅在组件挂载时调用
useEffect(() => {
	//...
}, [])
3)第二个参数为非空数组, 表示监测数组里的状态值, 即在组件挂载以及数组里的状态值改变时都调用
useEffect(() => {
	//...
}, [count])  //count值改变就调用
useEffect(() => {
	//...
}, [count, title])  //count或title值改变就调用
4)执行副作用参数, 相当于组件卸载前执行收尾操作, 如清除定时器或取消订阅
useEffect(() => {
	//...
	return () => {
		//...
	}
})
3, useRef()  //取其他组件的值
import {useRef} from 'react';
<input ref={c} type="text" /><button onClick={show}>显示</button>
const show = () => {
	const c = useRef()
	alert(c.current.value)
}


>>Context: 用于祖先组件给子孙组件传递数据
import {createContext} from 'react';
//1, 声明: 创建一个保存用户名的上下文容器
const UsernameContext = createContext();
function A(){
	const [username, setUsername] = useState('Tom')
	const [age, setAge] = useState(20)
	return (
		<>
			<h2>我是A组件</h2>
			//2, 传: 给B组件绑定数据, 以后B以及B的子孙组件都能拿到这个数据
			<UsernameContext.Provider value={{username: username, age: age}}>
				<B/>
			</UsernameContext.Provider>
		</>
	)
}
function B() {
	return (
		<>
			<h2>我是B组件</h2>
			<C/>
		</>
	)
}
function C() {
	return (
		<>
			<h2>我是C组件</h2>
			<div>从A组件接收到的数据: 
				//3, 取: 后代组件取数据
				<UsernameContext.Consumer>
					{
						value => {
							return `用户名: ${value.username}, 年龄: ${value.age}`;
						}
					}
				</UsernameContext.Consumer>
			</div>
		</>
	)
}



>>Fragment 或 <>
可以使用Fragment或<>代替组件顶层的<div>;
import {Fragment} from 'react'
function Demo(props){
	return (
		<Fragment>
			//...
		</Fragment>
	)
	或
	return (
		<>
			//...
		</>
	)
}
两者的区别是Fragment里面可以包含key属性;



>>受控表单数据绑定的几种方式(类式组件)
1)state = {username: '', password: ''}
handleChange = (dateType, e) => {
	this.setState({
		[dateType]: e.target.value
	})
}
username: <input type="text" name="username" onChange={e => handleChange('username', e)} />
password: <input type="password" name="password" onChange={e => handleChange{'password', e)} />
2)state = {username: '', password: ''}
handleChange = (dateType) => {  //高阶函数的形式
	return e => {
		this.setState({
			[dateType]: e.target.value
		})
	}
}
username: <input type="text" name="username" onChange={handleChange('username')} />
password: <input type="password" name="password" onChange={handleChange{'password')} />
3)state = {username: '', password: ''}
handleChange = e => {
	this.setState({
		[e.target.name]: e.target.value
	})
}
username: <input type="text" name="username" onChange={handleChange} />
password: <input type="password" name="password" onChange={handleChange} />



>>组件的生命周期
1, 初始化阶段: 由ReactDOM.render()触发--初次渲染
1)constructor()
2)componentWillMount()
3)render() * //常用
4)componentDidMount() * //常用, 一般在这个钩子中做一些初始化的事, 例如: 开启定时器、发送网络请求、订阅消息等;
2, 更新阶段: 由组件内部this.setState()或父组件render()触发
1)shouldComponentUpdate()
2)componentWillUpdate()
3)render()
4)componentDidUpdate()
3, 卸载组件: 由ReactDOM.unmountComponentAtNode()触发
1)componentWillUnmount() * //常用, 一般在这个钩子中做一些收尾的事, 例如: 关闭定时器、取消订阅消息等;


>>组件之间的通信
1, 父子组件通信
1)父->子: 通过props传递;
2)子->父: 通过props传递, 要求父给子传递一个函数;
2, 兄弟组件之间
通过消息订阅与发布;
3, 祖先与子孙组件通信
Context: 生产者-消费者模式;
4, 集中式状态管理: redux;


>>生成唯一字符串
通过第三方库uuid或nanoid, 后者比前者更轻量级;


>>输入标签的value/defaultValue属性
defaultValue只在初始化时起作用, 实时更新输入标签的值, 只能通过value属性;
value属性必须与onChange事件一起使用, 否则标签的值无法改变;
注: 类似的还有checked/defaultChecked属性;


>>消息订阅与发布
通过消息订阅与发布, 可以在任意组件之间传递数据, 从而更改状态;
1, 下载消息订阅插件
yarn add pubsub-js [--save] 或 npm install pubsub-js [--save]
引入插件
import PubSub from 'pubsub-js';
2, A组件订阅消息
function A() {
	const [data, setData] = useState({ //... });
	useEffect(() => {
		PubSub.subscribe('atguigu', (_, v) => {  //第一个参数为消息名, 此处同'atguigu'所以省略
			setData(v);
		};
		return () => {  //组件解挂后取消消息订阅
			PubSub.unsubscribe('atguigu');
		}
	})
}
3, B组件发布消息
function B() {
	PubSub.publish('atguigu', value);
}
注: 当B发布'atguigu'消息时, 订阅该消息的A组件就会收到B发布的数据, 从而实现更改状态;


>>请求数据的几种方式
const url = 'https://unidemo.dcloud.net.cn/api/news';
const url = 'https://api.github.com/search/users?q=hfutcjj';
1, XMLHttpRequest
2, jQuery.ajax({
	//...
})
注: jQuery请求是对xhr的封装, 如果嵌套多次请求会产生回调地狱的问题;
3, axios
axios(url).then(res=>{  //axios(url)是Promise对象
	console.log('success: ', res)
}, err=>{
	console.log('error: ', err)
});
等价于
axios.get(url).then(res=>{
	console.log('success: ', res)
}).catch(err=>{
	console.log('error: ', err)
});
注: axios也是对xhr的封装, 能避免回调地狱的问题, axios是第三方库, 需要先下载并引入:
npm i axios 或 yarn add axios;
import axios from 'axios';
注: axios比fetch更好用, fetch在处理错误时容易出现问题;
4, fetch
fetch(url).then(response => {  //fetch(url)是Promise对象
	return response.json()  
}).then(res => {			//fetch(url).then()也是Promise对象
	console.log('success: ', res)
}).catch(err => {  //统一处理每个then里面可能的错误
	console.log('error: ', err)
});
注: fetch是js的原生方法, 并不是对xhr的封装, 可以直接使用;
5, 使用async...await对.then的优化
const handleClick = async () => {
	try {
		const resp = await fetch(url)
		const data = await resp.json()
		console.log('success: ', data)
	} catch(err) {
		console.log('error: ', err)
	}
}
或者
const handleClick = async () => {
	try {
		const data = await fetch(url).then(res => {
			return res.json()
		}).catch(err => {
			return err
		});
	} catch(err) {
		console.log('error: ', err)
	}
}
注: await只能等待成功的结果, 对于失败的结果使用try...catch处理;


>>antd
1, 蚂蚁金服开发的React UI组件库, 主要用于研发企业级中后台产品;
安装: npm install antd 或 yarn add antd;
引入: 
import {Button, DatePicker} from 'antd';
import {WechatOutlined} from '@ant_design/icons';
import 'antd/dist/antd.css'; 
注: 一定要在项目的某个位置引入css样式, 这个容易忘记;
2, 样式的按需引入以及自定义主题, 属于高级配置, 在antd的3.x版本中有详细说明;



>>redux
1, redux是做集中式状态管理的js库, 主要与react一起使用;
2, redux中的三个核心概念
action: 动作对象, 如{type: 'ADD', data: {name: 'zhao', age: 30}};
reducer: 用于初始化状态、加工状态;
store: 将state、action、reducer联系在一起的对象;
3, 使用redux的步骤
1)下载redux
npm install redux / yarn add redux;
2)新建redux文件
src
	redux 
		store.js
		count_action.js
		count_reducer.js
//store.js
import {createStore} from 'redux';
import countReducer from './count_reducer';
export default const store = createStore(countReducer);
//count_action.js
export const Increment = data => ({type: 'increment', data});
export const Decrement = data => ({type: 'decrement', data});
//count_reducer.js
export default countReducer(preState, action) {
	const {type, data} = action
	switch(type) {
		case 'increment': 
			return preState + data;
		case 'decrement':
			return preState - data;
		default: 
			return 0;
	}
}
3)在组件中使用
//取得store中存储的状态值
store.getState()  //api-1
//通知store更新状态
store.dispatch(Increment(5))  //api-2
4)在合适的位置(如index.js)通知组件重绘(当store中状态改变时)
store.subscribe(() => {  //api-3
	root.render(<App />);
});
4, react中集成了redux: react-redux插件
1)下载react-redux
2)所有UI组件都包裹一个容器组件, 容器组件连接UI组件与redux, 所有与redux的交互都在容器组件里完成, 
容器组件再将 redux中保存的状态 与 用于操作状态的方法 传递给UI组件;
文件结构:
src 
	index.js
	APP.js
	components    //UI组件
		Count.js
	containers    //容器组件
		Count.js
	redux
		store.js
		actions
			count_action.js
		reducers
			count_reducer.js
//App.js
<Count store={store} />  //APP中调用容器组件, 并在此处绑定redux
//containers/Count.js
import {connect} from 'react-redux';
const mapStateToProps = state => {  //传递状态
	return {count: state};  
}
const mapDispatchToProps = dispatch => {  //传递操作状态的方法
	return {
		incre: data => dispatch(Increment(data)),
		decre: data => dispatch(Decrement(data)),
	}
}
export default connect(mapStateToProps, mapDispatchToProps)(Count)  //容器组件连接UI组件与redux
//components/Count.js
UI组件通过props.count得到状态值, 通过props.incre(value)来间接改变状态;
3)优化一: 简写
//containers/Count
import {connect} from 'react-redux';
export default connect(
	state => ({count: state}),
	dispatch => ({  //mapDispatchToProps的一般写法
		incre: data => dispatch(Increment(data)),
		decre: data => dispatch(Decrement(data)),
	}), 
	{  //或, mapDispatchToProps的最简写法
		incre: Increment,
		decre: Decrement,
	}
)(Count)
4)优化二: 引入<Provider>组件
不用在App组件里为每个容器组件绑定store, 直接在index.js里给<Provider>组件绑定store;
Provider会自动检测容器组件, 给每个容器组件传递store;
//index.js
import {Provider} from 'react-redux;
ReactDOM.createRoot(document.getElementById('root').render(
	<Provider store={store}>
		<App />
	</Provider>
);
5)优化三: 整合UI组件与容器组件
将UI组件和容器组件写在同一个文件里, 默认暴露容器组件;
//containers/Count.js
export default connect(...)(Count);
function Count(props){
	//...
}
5, redux管理多个组件的状态
此时就有1个store, n个action, n个reducer, store中需要用combineReducers合并连接多个reducer, 
此时redux中的最终state是一个对象;
//store.js
import {createStore, combineReducers} from 'redux';
import countReducer from './reducers/count';
import personReducer from './reducers/person';
const allReducers = combineReducers({
	sum: countReducer,
	persons: personReducer,
});
const store = createStore(allReducers);
export default store;
//组件
此时给组件传递状态以及组件取状态得用 state.sum 的形式;


>>项目打包运行
终端输入: npm run build, 会在项目下生成build文件夹, 将build文件夹部署到服务器即可;




























