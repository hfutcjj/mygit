>>JSX会被React转换为对象
const elem = (
	<div className="box" style={{color: 'blue'}}>
		<h1>react</h1>
		<p>this is react test page.</p>
	</div>
)
内部经过React.createElement(), 会被转换为如下对象(简化后的):
const elem = {
	type: 'div',
	props: {
		className: 'box',
		style: {color: 'blue'},
		children: [{
			type: 'h1',
			children: 'react'
		}, {
			type: 'p',
			children: 'this is react test page.'
		}]
	}
}


>>React元素
React元素就是一个js对象, ReactDOM负责更新DOM来与react元素保持一致;
React元素: const elem = <h1>hello world</h1>;
ReactDOM: const root = ReactDOM.createRoot(document.getElementById('root'));
渲染: root.render(elem);
注: React元素是不可变对象, 一旦被创建，就无法更改它的子元素和属性;
elem.props.className = 'change';  //×
elem.props.style = {color: 'red'};  //×
elem.props.style.color = 'red';  //√


>>组件的生命周期
1, 初始化阶段: 由ReactDOM.render()触发--初次渲染
1)constructor()
2)componentWillMount()
3)render() * //常用
4)componentDidMount() * //常用, 一般在这个钩子中做一些初始化的事, 例如: 开启定时器、发送网络请求、订阅消息等;
2, 更新阶段: 由组件内部this.setState()或父组件render()触发
1)shouldComponentUpdate()
2)componentWillUpdate()
3)render()
4)componentDidUpdate()
3, 卸载组件: 由ReactDOM.unmountComponentAtNode()触发
1)componentWillUnmount() * //常用, 一般在这个钩子中做一些收尾的事, 例如: 关闭定时器、取消订阅消息等;





















