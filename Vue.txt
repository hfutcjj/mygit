>>创建Vue工程
1, 基于vue-cli
npm install -g @vue/cli
vue create vue_test
2, 基于vite
npm create vue@latest


>>Vue项目结构
1, 目录结构
vue_test
	public
	src	
		main.ts	       
		App.vue		  	//根组件
		components      //其他组件
			A.vue
			B.vue
	index.html			//入口文件
	node_modules
	package.json
2, 常用文件
1)index.html
<div id="app"></div>
<script type="module" src="/src/main.ts"></script>
2)main.ts
import { createApp } from 'vue';
import App from './App.vue';
createApp(App).mount('#app')
3)App.vue
<template>...</template>
<script lang="ts">...</script>
<style scoped>...</style>
注: <script>里加lang="ts"表示用typescript解析;
style标签加上scoped表示局部样式, 防止其他组件的样式冲突;


>>选项式API(OptionsAPI)与组合式API(CompositionAPI)
1)vue2中用的是选项式API
<script>
	export default {
		data(){
			return {
				price: 100,
				discount: 0.8
			}
		},
		computed: {
			discountPrice() {
				return this.price * this.discount
			}
		},
		methods: {
			updatePrice() {
				this.price += 10
			}
		}
	}
</script>
2)vue3中setup采用的是组合式API
<script>
	export default {
		name: 'APP',
		setup() {
			//数据
			let name = 'zhao'
			let age = 32
			//方法
			function changeName() {...}
			function changeAge() {...}
			//
			return {name, age, changeName, changeAge}
		}
	}
</script>
2)setup语法糖形式
<script setup>
	let name = 'zhao'
	let age = 32
	function changeName() {...}
	function changeAge() {...}
</script>
注: vue2的对象中可以使用this, vue3的setup中不用this;


>>响应式数据
1, ref
import {ref} from 'vue'
let person = ref({name: 'zhao', age: 32})  //将变量变为RefImpl对象
person.value.name = 'qian'  //修改数据, 要加.value
2, reactive
import {reactive} from 'vue'
let person = reactive({name: 'zhao', age: 32})  //将变量变为Proxy对象
person.name = 'qian'
3, ref和reactive的区别
1)ref可以定义基本类型和对象类型的响应式数据, 而reactive只能定义对象类型;
2)修改数据时, ref定义的变量要加.value, 而reactive数据可以直接修改;
3)修改对象类型时, ref定义的对象可以通过整体赋值修改, 而reactive不行;
[ref] person.value = {name: 'qian', age: 40}  //√
[reactive] person = {name: 'qian', age: 40}  //×
[reactive] Object.assign(person, {name: 'qian', age: 40})  //√
4)ref定义的对象类型, 底层实现用的就是reactive;
4, toRefs, toRef
toRefs将响应式对象的每个属性都变成响应式数据, toRef将响应式对象的某个属性变成响应式数据;
import {toRefs} from 'vue'
let person = reactive({name: 'zhao', age: 32})
let {name, age} = toRefs(person)
function changeName() {
	name.value = 'qian'
}
注: 修改name时, person.name也会同时修改, 所以在模板中使用{{name}}与{{person.name}}都可以;
toRef的使用类似: let name = toRef(person, 'name');


>>computed 计算属性
import {computed} from 'vue'
1)回调函数的形式
const discountPrice = computed(() => price * discount)
2)getter和setter的形式
const discountPrice = computed({
	get(){
		return price * discount
	},
	set(val){
		//....
	}
})
注: 计算属性本质上也是函数, 返回一个ref响应式数据;
计算属性与一般函数的区别是:
计算属性可以缓存, 当在模板中多次调用计算属性时, 计算属性只计算一次;
而当在模板中多次调用一般函数时, 函数会执行多次;


>>条件渲染和列表渲染
1)条件渲染
<div v-if="isShow">Hello</div>
注: v-if与v-show的区别是, 前者销毁了组件, 而后者只是隐藏组件;
2)列表渲染
const datas = [
	{id: '001', name: 'zhao'}, 
	{id: '002', name: 'qian'},
]
<ul>
	<li v-for="g in datas" :key="g.id">{{g.name}}</li>
</ul>


>>输入框与数据的双向绑定
使用ref: 数据 => 输入框, 使用v-model: 输入框 => 数据;
FirstName: <input type="text" v-model="firstName">
LastName: <input type="text" v-model="lastName">
FullName: {{firstName}}-{{lastName}}
//js
let firstName = ref('张')
let lastName = ref('三')


>>标签的ref属性
用在普通dom标签上, 获取的是dom节点;
用在组件标签上, 获取的是组件实例对象;
<div ref="box">合肥</div>
let box = ref()
console.log(box.value)


>>watch 监听
1, watch用于监听基本类型的响应式数据、对象类型的响应式数据、一个getter函数、
或多个数据源组成的数据;
1)ref定义的基本类型数据
let count = ref(0)
watch(count, (newValue, oldValue) => {
	//....
})
2)响应式对象
let person = ref({name: 'zhao', age: 30})
watch(person, (newValue, oldValue) => {
	//....
}, {deep: true})
注: ref定义的响应对象需要第三个参数{deep: true}表示监听对象的属性, 而reactive则默认是深度监听;
3)getter函数
watch(() => person.name, (newValue, oldValue) => {
	//....
})
4)以上数据源组成的数组
watch([() => person.name, () => person.age], (newValue, oldValue) => {
	//newValue和oldValue也为对应的数组['zhao', 30]
}) 
注: watch()函数可传入第三个参数作为配置项, 如deep: true表示深度监听, 
immediate: true表示组件加载时立即执行一次;
watch()函数的返回值可以用来停止监听;
2, watchEffect
watchEffect(() => {
	//....
})
watch监视指定的数据, 只在监视的数据变化时执行回调函数;
watchEffect不用指定具体的监视数据, 它在开始时、以及回调函数里用到的数据发生变化时执行;


>>slot 插槽
子组件用插槽占位, 父组件调用子组件传递具体内容;
如果子组件有多个插槽, 则要为每个插槽命名, 成为具名插槽;
当父组件没有传递任何内容时, 子组件slot里的内容为默认显示值;
//Son.vue 
<template>
	<view>
		<slot name="header">
			这是header区域
		</slot>
	</view>
	<view>
		<slot name="main">
			这是main区域
		</slot>
	</view>
</template>
//Parent.vue
<template>
	<Son>
		<template #header>
			This is header area.
		</template>
		<template #main>
			This is main area.
		</template>
	</Son>
</template>
注: #header是v-slot:header的简写;


>>props
父组件给子组件传递数据;
1, 父组件中通过属性给子组件传递数据
<Son :a="personList" b="zhao" />
2, 子组件通过defineProps()接收数据
<ul>
	<li v-for="g in a" :key="g.id">{{g.name}}</li>
</ul>
//props只在视图中使用
defineProps(['a', 'b'])  
//props需要进一步处理, 用变量接收
const props = defineProps(['a', 'b'])
//对接收的props进行约束
defineProps({
	username: {
		type: String,
		default: 'zhao'
	},
	age: Number
}) 
注: 以define开头的一般为宏函数, 不需要从vue中导入;


>>父组件给子组件传递函数
子组件通过$emit()调用父组件的传递的函数, $emit的第二个参数开始表示子组件传给父组件的数据;
//Parent.vue
<Son @myCall="handleMyCall"></Son>
function handleMyCall(v) {
	//....
}
//Son.vue: 在<template>中通过$emit()调用
<button @click="$emit('myCall', 12)">Click me</button>
//Son.vue: 在<script>中通过defineEmits先声明后调用
<button @click="hancleClick">Click me</button>
function handleClick() {
	const emit = defineEmits(['myCall'])
	emit('myCall', 12)
}


>>组件暴露属性和方法
子组件通过defineExpose()暴露属性和方法, 父组件通过ref得到子组件实例对象, 然后调用子组件的属性和方法;
//Son.vue
let count = ref(12)
function f1() {
	count.value++
}
defineExpose({
	count,
	f1
})
//Parent.vue
<Son ref="son"></Son>
const son = ref(null)
function handleClick() {
	son.value.f1()
	console.log(son.value.count)
}



>>生命周期
1, vue2的生命周期
创建 -> 挂载 -> 更新 -> 销毁
<script>
	export default {
		name: 'Person',
		data() { //数据 },
		methods: { //方法 },
		beforeCreate() { //创建前 },
		created() { //创建完毕 },
		beforeMount() { //挂载前 },
		mounted() { //挂载完毕 },
		beforeUpdate() { //更新前 },
		updated() { //更新完毕 },
		beforeDestroy() { //销毁前 },
		destroyed() { //销毁完毕 }
	}
</script>
2, vue3的生命周期
本质上同vue2, 只是部分钩子函数有所不同;
<script setup>
	import {...} from 'vue'  //导入钩子函数
	let count = ref(0)  //数据
	function add() { count.value += 1 }  //方法
	console.log('create')  //创建 
	onBeforeMount(() => {})  //挂载前
	onMounted(() => {})  //挂载完毕
	onBeforeUpdate(() => {})  //更新前
	onUpdated(() => {})  //更新完毕
	onBeforeUnmount(() => {})  //卸载前
	onUnmounted(() => {})  //卸载后
</script>
注: 最常用的三个钩子函数: onMounted、onUpdated、onBeforeUnmount;


>>自定义hooks
//useCount.js
import {ref} from 'vue'
export default function() {
	//数据 
	let count = ref(0)
	//方法
	function add() {
		count.value += 1
	}
	return {count, add}
}
//Person.js 组件中使用
import useCount from './hooks/useCount'
const {count, add} = useCount()


>>路由
1, 下载路由包 vue-router
npm i vue-router
2, 基本使用
1)定义路由器: 在路由器中指定路由规则;
router
	index.ts
//index.ts
import {createRouter, createWebHistory} from 'vue-router'
const router = createRouter({
	history: createWebHistory(),
	routes: [
		{path: '/home', component: Home},
		{path: 'about', component: About},
		{path: '/', redirect: '/about'}  //重定向
	]
})
export default router
2)修改main.ts, 在main.ts中引用路由器
import router from './router'
createApp(App).use(router).mount('#app')
3)在组件中使用路由
<template>
	//导航区
		<div class="nav">
			<RouterLink to="/home" active-class="active">Home</RouterLink>
			<RouterLink to="/about" active-class=active">About</RouterLink>
		</div>
	//展示区
		<div class="main-content">
			<RouterView></RouterView>
		</div>
</template>
<script lang="ts" setup>
	import {RouterView, RouterLink} from 'vue-router'
</script>
<style>
	.active{
		....
	}
</style>
注: active-class表示导航按钮被点击时的样式, 可以在style中自定义该样式;
导航区路由链接中的to有三种写法:
a)字符串形式, to="/home';
b)对象形式, :to="{path: '/home'}"
c)对象形式, :to="{name: 'zhuye'}"  //需要给每个路由规则一个name属性, 如name: 'zhuye';
3, 一般组件与路由组件
上面的Home、About属于路由组件, 路由组件一般放在src/pages或src/views文件夹, 而一般组件放在
src/components文件夹;
4, 路由器工作模式
1)history模式
url不带#, 更美观, 但需要服务端配合处理路径问题(后端增加一个配置项);
2)hash模式
将createWebHistory改成createWebHashHistory, 就成为hash模式, url带有#, 优点是不需要服务端配合处理路径问题;
注: 前台项目一般用history模式, 中后台管理项目有时用hash模式;
5, push与replace
路由默认是通过history的push()方法不断往上堆叠的, 从而可以回退;
在<RouterLink>中添加replace属性, 就成为了替换;
6, 嵌套路由
1)在路由器的路由规则中, 通过children属性定义二级路由规则:
{
	path: '/news',
	component: News,
	children: [
		{
			path: 'detail',
			component: Detail
		}
	]
}
2)导航区, 定义路由链接
<RouterLink to="/news/detail">Detail</RouterLink>
3)展示区
<RouterView></RouterView>
7, 给路由组件传参
1)query参数
//在路由链接中传参
<RouterLink to="/news/detail?name=zhao&age=32">Detail</RouterLink> 
或者
<RouterLink :to="{path: '/news/detail', query: {name: 'zhao', age: 32}}">Detail</RouterLink>
//路由组件中接收参数: route.query
<template>
	Name: {{route.query.name}}
	Age: {{route.query.age}}
</template>
<script setup>
	import {useRoute} from 'vue-router'
	const route = useRoute()
</script>
2)params参数
//修改路由规则, 加上占位符
{
	path: 'detail/:name/:age?',
	component: Detail
}
注: 在某个占位符后面加个?, 则表示该参数可选;
//在路由链接中传参
<RouterLink to="/news/detail/zhao/32">Detail</RouterLink>
//在路由组件中接收参数: route.params 
<template>
	Name: {{route.params.name}}
	Age: {{route.params.age}}
</template>
<script setup>
	import {useRoute} from 'vue-router'
	const route = useRoute()
</script>
3)路由规则的props配置, 让路由组件更方便的接收参数
//修改路由规则, 加上props属性
{
	path: 'detail/:name/:age',
	component: Detail,
	props: true
}
//在路由组件中通过defineProps()来接收props
<template>
	Name: {{name}}
	Age: {{age}}
</template>
<script setup>
	defineProps(['name', 'age'])
</script>
注: props有三种写法:
第一种写法, props: true, 将路由收到的所有params参数作为props传给路由组件;
第二种写法, props(route) {
	return {
		name: route.query.name, 
		age: route.query.age
	}
}, 可以自己决定将什么作为props传给路由组件;
第三种写法, props: {
	name: 'zhao',
	age: 32
}, 作用同第二种;
8, 编程式路由导航
不使用路由组件<RouterLink>, 而是使用router的push或replace方法来实现路由导航;
import {useRouter} from 'vue-router'
const router = useRouter()
router.push('/about')
router.replace('/about')  
push()和replace()的参数与路由组件的to属性完全相同
注: 实际项目中编程式路由比路由组件更常用;



>>pinia
1, pinia是用于vue3的集中式状态管理, vue2中用vuex;
2, 基本使用
1)下载pinia
npm i pinia
2)在main.ts中引入pinia
import {createPinia} from 'pinia'
createApp(APP).use(createPinia()).mount('#app')
3)存储数据到store
src
	store
		count.ts   //保存组件Count.vue里的状态
		person.ts  //保存组件Person.vue里的状态
//count.ts
import {defineStore} from 'pinia'
const useCountStore = defineStore('count', {
	state() {
		return {
			sum: 0
		}
	}
})
exoprt useCountStore
4)在组件里获取状态数据
//Count.vue
<template>
	当前求和为: {{countStore.sum}}
</template>
<script setup>
	import {useCountStore} from '@/store/count'
	const countStore = useCountStore()
</script>
5)在组件里修改数据
方式一, 直接修改
function add(n) {
	countStore.sum += n
}
方式二
countStore.$patch({
	sum: 1
})
方式三, 通过actions
//在count.ts里追加actions
const useCountStore = defineStore('count', {
	actions: {
		increment(value) {
			this.sum += value
		}
	}
})
//在Count.vue里修改
countStore.increment(5)
3, storeToRefs
将countStore对象里的数据变成响应式, toRefs是将一个对象里的所有数据与方法都变成响应式, 
而countStore只针对数据;
import {storeToRefs} from 'pinia'
const {sum} = storeToRefs(countStore)
function add(n) {
	sum.value += n
}
4, getters
当state中的数据, 需要经过处理后再使用时, 可以使用getters配置;
//在count.ts里追加getters配置
const useCountState = defineStore('count', {
	getters: {
		bigSum(state) {
			return state.sum*10  //也可以用this.sum
		},
		upperName() {
			return this.name.toUpperCase()
		}
	}
})
//在Count.vue组件里使用
const {bigSum, upperName} = storeToRefs(countStore)
5, $subscribe
通过store的$subscribe()方法监听state的变化;
countStore.$subscribe((mutate, state) => {
	//mutate: 本次的修改动作对象
	//state: 修改后的数据
})





