>>创建Vue工程
1, 基于vue-cli
npm install -g @vue/cli
vue create vue_test
2, 基于vite
npm create vue@latest


>>Vue项目结构
1, 目录结构
vue_test
	public
	src	
		main.ts	       
		App.vue		  	//根组件
		components      //其他组件
			A.vue
			B.vue
	index.html			//入口文件
	node_modules
	package.json
2, 常用文件
1)index.html
<div id="app"></div>
<script type="module" src="/src/main.ts"></script>
2)main.ts
import { createApp } from 'vue';
import App from './App.vue';
createApp(App).mount('#app')
3)App.vue
<template>...</template>
<script lang="ts">...</script>
<style scoped>...</style>
注: <script>里加lang="ts"表示用typescript解析;
style标签加上scoped表示局部样式, 防止其他组件的样式冲突;


>>选项式API(OptionsAPI)与组合式API(CompositionAPI)
1)vue2中用的是选项式API
<script>
	export default {
		data(){
			return {
				price: 100,
				discount: 0.8
			}
		},
		computed: {
			discountPrice() {
				return this.price * this.discount
			}
		},
		methods: {
			updatePrice() {
				this.price += 10
			}
		}
	}
</script>
2)vue3中setup采用的是组合式API
<script>
	export default {
		name: 'APP',
		setup() {
			//数据
			let name = 'zhao'
			let age = 32
			//方法
			function changeName() {...}
			function changeAge() {...}
			//
			return {name, age, changeName, changeAge}
		}
	}
</script>
2)setup语法糖形式
<script setup>
	let name = 'zhao'
	let age = 32
	function changeName() {...}
	function changeAge() {...}
</script>
注: vue2的对象中可以使用this, vue3的setup中不用this;


>>响应式数据
1, ref
import {ref} from 'vue'
let person = ref({name: 'zhao', age: 32})  //将变量变为RefImpl对象
person.value.name = 'qian'  //修改数据, 要加.value
2, reactive
import {reactive} from 'vue'
let person = reactive({name: 'zhao', age: 32})  //将变量变为Proxy对象
person.name = 'qian'
3, ref和reactive的区别
1)ref可以定义基本类型和对象类型的响应式数据, 而reactive只能定义对象类型;
2)修改数据时, ref定义的变量要加.value, 而reactive不行tive直接修改;
3)修改对象类型时, ref定义的对象可以通过整体赋值修改, 而reactive不行;
[ref] person.value = {name: 'qian', age: 40}  //√
[reactive] person = {name: 'qian', age: 40}  //×
[reactive] Object.assign(person, {name: 'qian', age: 40})  //√
4)ref定义的对象类型, 底层实现用的就是reactive;
4, toRefs, toRef
toRefs将响应式对象的每个属性都变成响应式数据, toRef将响应式对象的某个属性变成响应式数据;
import {toRefs} from 'vue'
let person = reactive({name: 'zhao', age: 32})
let {name, age} = toRefs(person)
function changeName() {
	name.value = 'qian'
}
注: 修改name时, person.name也会同时修改, 所以在模板中使用{{name}}与{{person.name}}都可以;
toRef的使用类似: let name = toRef(person, 'name');


>>computed 计算属性
import {computed} from 'vue'
1)回调函数的形式
const discountPrice = computed(() => price * discount)
2)getter和setter的形式
const discountPrice = computed({
	get(){
		return price * discount
	},
	set(val){
		//....
	}
})
注: 计算属性也是ref响应式数据;


>>条件渲染和列表渲染
1)条件渲染
<div v-if="isShow">Hello</div>
注: v-if与v-show的区别是, 前者销毁了组件, 而后者只是隐藏组件;
2)列表渲染
const datas = [
	{id: '001', name: 'zhao'}, 
	{id: '002', name: 'qian'},
]
<ul>
	<li v-for="g in datas" :key="g.id">{{g.name}}</li>
</ul>


>>输入框与数据的双向绑定
使用ref: 数据 => 输入框, 使用v-model: 输入框 => 数据;
FirstName: <input type="text" v-model="firstName">
LastName: <input type="text" v-model="lastName">
FullName: {{firstName}}-{{lastName}}
//js
let firstName = ref('张')
let lastName = ref('三')


>>标签的ref属性
用在普通dom标签上, 获取的是dom节点;
用在组件标签上, 获取的是组件实例对象;
<div ref="box">合肥</div>
let box = ref()
console.log(box.value)


>>watch 监视
1, 监视ref定义的基本类型数据
import {ref, watch} from 'vue'
let count = ref(0)
const stopWatch = watch(count, (newValue, oldValue) => {
	if(newValue >= 10) {
		stopWatch()  //解除监视
	}
})
注: watch()可以接收一个对象作为第三个参数, 包含很多配置项, 其中 immediate:true 表示组件加载时立即执行一次回调函数, 
类似于React中的useEffect():
watch(count, () => {}, {immediate: true});
2, 监视ref定义的对象类型数据
let person = ref({name: 'zhao', age: 30})
watch(person, (newValue, oldValue) => {
	//...
}) 
注: 直接写ref变量名, 监视的是变量的地址值, 若要监视对象属性的变化, 需要手动开启深度监视:
给watch传入第三个选项参数 {deep: true};
监视对象类型一般用reactive;
3, 监视reactive定义的对象类型数据
let person = reactive({name: 'zhao', age: 30})
watch(person, (newValue, oldValue) => {
	//...
}) 
注: reactive变量默认就是开启深度监视;
如果修改的是对象的属性, 则newValue与oldValue的值相同;
4, 监视getter函数, 用于只监视对象的某个属性
watch(() => person.name, (newValue, oldValue) => {
	//...
})
5, 监视以上数据组成的数组
watch([() => person.name, () => person.car.c1], (newValue, oldValue) => {
	//newValue和oldValue也为对应的数组: ['张三', '宝马']
})
6, watchEffect
watchEffect(() => {
	//...
})
watch监视指定的数据, 只在监视的数据变化时执行回调函数;
watchEffect不用指定具体的监视数据, 它在开始时、以及回调函数里用到的数据发生变化时执行;


>>props
父组件给子组件传递数据;
//Parent
<Son :a="personList" b="zhao" />
//Son
<ul>
	<li v-for="g in a" :key="g.id">{{g.name}}</li>
</ul>
import {defineProps} from 'vue'
defineProps(['a', 'b'])  //需要先声明接收到的props


>>生命周期
1, vue2的生命周期
创建 -> 挂载 -> 更新 -> 销毁
<script>
	export default {
		name: 'Person',
		data() { //数据 },
		methods: { //方法 },
		beforeCreate() { //创建前 },
		created() { //创建完毕 },
		beforeMount() { //挂载前 },
		mounted() { //挂载完毕 },
		beforeUpdate() { //更新前 },
		updated() { //更新完毕 },
		beforeDestroy() { //销毁前 },
		destroyed() { //销毁完毕 }
	}
</script>
2, vue3的生命周期
本质上同vue2, 只是部分钩子函数有所不同;
<script setup>
	import {...} from 'vue'  //导入钩子函数
	let count = ref(0)  //数据
	function add() { count.value += 1 }  //方法
	console.log('create')  //创建 
	onBeforeMount(() => {})  //挂载前
	onMounted(() => {})  //挂载完毕
	onBeforeUpdate(() => {})  //更新前
	onUpdated(() => {})  //更新完毕
	onBeforeUnmount(() => {})  //卸载前
	onUnmounted(() => {})  //卸载后
</script>


>>自定义hooks
//useCount.js
import {ref} from 'vue'
export default function() {
	//数据 
	let count = ref(0)
	//方法
	function add() {
		count.value += 1
	}
	return {count, add}
}
//Person.js  组件中使用
import useCount from './hooks/useCount'
const {count, add} = useCount()







