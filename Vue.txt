>>创建Vue工程
1, 基于vue-cli
npm install -g @vue/cli
vue create vue_test
2, 基于vite
npm create vue@latest


>>Vue项目结构
1, 目录结构
vue_test
	public
	src	
		main.ts	       
		App.vue		  	//根组件
		components      //其他组件
			A.vue
			B.vue
	index.html			//入口文件
	node_modules
	package.json
2, 常用文件
1)index.html
<div id="app"></div>
<script type="module" src="/src/main.ts"></script>
2)main.ts
import { createApp } from 'vue';
import App from './App.vue';
createApp(App).mount('#app')
3)App.vue
<template>
	...
</template>
<script lang="ts" setup>
	import {ref} from 'vue'
	//数据
	let name = ref('张三')
	let age = 32
	//方法
	function changeName() {
		name.value = 'zhang-san'
	}
	function showAge() {
		alert(age.value)
	}
</script>
<style scoped>
	....
</style>
3, setup
1)setup是vue3中的配置项, 值是一个函数, 用于组合式API(CompositionAPI), 而Vue2是选项式API(OptionsAPI);
export default {
	name: 'APP',
	setup() {
		//数据
		let name = 'zhao'
		let age = 32
		//方法
		function changeName() {...}
		function changeAge() {...}
		//
		return {name, age, changeName, changeAge}
	}
}
注: vue2中的data()、methods可以和vue3中的setup()同时存在, 但不建议;
setup()里没有this;
2)setup语法糖
setup()函数可以用<script setup>标签代替, 不用显式return;
<script setup>
	let name = 'zhao'
	let age = 32
	function changeName() {...}
	function changeAge() {...}
</script>
4, ref
定义基本类型和对象类型的响应式数据: let xxx = ref(初始值);
js中操作数据需要 xxx.value, 但模板中不需要 .value, 直接使用即可;
5, reactive
定义对象类型的响应式数据, 使用时直接用 obj.key, 不需要用value;
注: ref定义对象类型的响应式数据, 底层用的就是reactive;
6, scoped
style标签加上scoped表示局部样式, 防止其他组件的样式冲突;


>>条件渲染
<div v-if="isShow">Hello</div>
注: v-if与v-show的区别是, 前者销毁了组件, 而后者组件还在只是让其不可见;


>>列表渲染
const datas = [
	{id: '001', name: 'zhao'}, 
	{id: '002', name: 'qian'},
]
<ul>
	<li v-for="g in datas" :key="g.id">{{g.name}}</li>
</ul>


>>toRefs, toRef
toRefs将对象的每个属性都变成响应式数据, toRef将对象的某个属性变成响应式数据;
let {name, age} = toRefs(person);
let age = toRef(person, 'age');


>>页面与数据的双向绑定
FirstName: <input type="text" v-model="firstname">
LatName: <input type="text" v-model="lastname">
FullName: {{firstname}}-{{lastname}}
//js
let firstname = ref('张')
let lastname = ref('三')


>>computed 计算属性
FullName: {{fullname}}
//js
import {computed} from 'vue'
let fullname = computed({
	get(){
		return firstname.value + '-' + lastname.value
	},
	set(val){
		//...
	}
})
注: 这样定义的计算属性, 既可读, 也可修改;


>>watch
1, watch用于监视以下数据源:
ref或reactive响应式数据、getter函数、或多个数据源组成的数组;
2, 常用举例
1)基本类型响应式数据
let count = ref(0)
const stopWatch = watch(count, (newValue, oldValue) => {
	if(newValue >= 10) {
		stopWatch()  //解除监视
	}
})
2)对象类型数据之整个对象
watch(person, (newValue, oldValue) => {
	//...
}, {deep: true})  
加上第三个参数{deep: true}表示深度监视, 对象的属性变化时也会触发watch回调函数;
3)对象类型数据之对象的属性
数据源需要定义为一个getter函数;
watch(() => person.name, (newValue, oldValue) => {
	//...
})
4)监视多个值
监视对象为多个数据源的数组;
watch([() => person.name, () => person.car.c1], (newValue, oldValue) => {
	//newValue和oldValue也为对应的数组
})


>>watchEffect
watchEffect(() => {
	//...
})
watch监视指定的数据, 只在监视的数据变化时执行回调函数;
watchEffect不用指定具体的监视数据, 它在开始时、以及回调函数里用到的数据发生变化时执行;


>>标签的ref属性
用在普通dom标签上, 获取的是dom节点;
用在组件标签上, 获取的是组件实例对象;
<div ref="box">合肥</div>
let box = ref()
console.log(box.value)


>>props
父组件给子组件传递数据;
//Parent
<Son :a="personList" b="zhao" />
//Son
<ul>
	<li v-for="g in a" :key="g.id">{{g.name}}</li>
</ul>
defineProps(['a', 'b'])


>>生命周期
1, vue2的生命周期
创建 -> 挂载 -> 更新 -> 销毁
<script>
	export default {
		name: 'Person',
		data() { //数据 },
		methods: { //方法 },
		beforeCreate() { //创建前 },
		created() { //创建完毕 },
		beforeMount() { //挂载前 },
		mounted() { //挂载完毕 },
		beforeUpdate() { //更新前 },
		updated() { //更新完毕 },
		beforeDestroy() { //销毁前 },
		destroyed() { //销毁完毕 }
	}
</script>
2, vue3的生命周期
本质上同vue2, 只是部分钩子函数有所不同;
<script setup>
	import {...} from 'vue'  //导入钩子函数
	let count = ref(0)  //数据
	function add() { count.value += 1 }  //方法
	console.log('create')  //创建 
	onBeforeMount(() => {})  //挂载前
	onMounted(() => {})  //挂载完毕
	onBeforeUpdate(() => {})  //更新前
	onUpdated(() => {})  //更新完毕
	onBeforeUnmount(() => {})  //卸载前
	onUnmounted(() => {})  //卸载后
</script>


>>自定义hooks
//useCount.js
import {ref} from 'vue'
export default function() {
	//数据 
	let count = ref(0)
	//方法
	function add() {
		count.value += 1
	}
	return {count, add}
}
//Person.js  组件中使用
import useCount from './hooks/useCount'
const {count, add} = useCount()







