>>vue的特点
1, 组件化: 提高代码复用率;
2, 声明式编码: 提高开发效率;
3, 虚拟DOM: 提高性能;


>>创建Vue工程以及插件
1, 基于vite创建vue项目
npm create vue@latest
在交互中选择ts、vue-router、pinia、Prettier等功能;
2, 安装插件
npm i axios element-plus -S  //生产依赖
npm i sass -D  //开发依赖


>>环境变量
1, 可以在根目录下创建环境变量的文件, 包括
.env  //默认, 适用于所有环境
.env.development  //开发环境
.env.production  //生产环境
.env.test  //测试环境
2, 环境变量的文件写法
VITE_APP_TITLE=My Vue App
VITE_API_URL=https://api.example.com 
3, import.meta.env 
应用程序使用import.meta.env.VITE_API_URL 来使用环境变量;
4, 内置环境变量
import.meta.env默认会加载几个内置的环境变量, 如 
import.meta.env.MODE: 'development',
import.meta.env.BASE_URL: '/'等;


>>vue3比vue2的改进
1, 打包体积更小, 编译和运行的速度更快;
2, 组合式API代替选项式API;
3, 生命周期钩子的变化;
4, VDOM的优化;
5, 更好地支持ts;
6, pinia代替vuex;
7, vite代替webpack;
8, elementplus代替elementUI;
9, 底层响应式数据使用new Proxy(), 代替以前的Object.defineProperties();


>>Vue项目结构
1, 常用目录文件
public 
	favicon.ico   //替换为我们网站的快捷图标
src
	assets
		logo.svg	//替换为我们网站的logo图标
	components      //公共组件, 如header、footer等
		*.vue 
	views文件夹		//页面组件
		*.vue 
	router
		index.js 	//路由文件
	App.vue			//整个应用的根组件
	main.js			//应用的主js文件, 负责创建vue实例并挂载到DOM上
index.html			//应用的入口文件
package.json		//项目的依赖
vite.config.js		//配置vite的选项, 如开发服务器、构建设置、插件等
2, 入口文件
1)index.html
<body>
	<div id="app"></div>
	<script type="module" src="/src/main.js"></script>
</body>
2)main.js
import {createApp} from 'vue';
import App from './App.vue';
import router from './router';
const app = createApp(App);
app.use(router);
app.mount('#app);
3)App.vue 
<template></template>
<script setup></script>
<style scoped></style>


>>选项式API(OptionsAPI)与组合式API(CompositionAPI)
1)vue2中用的是选项式API
<script>
	export default {
		data(){
			return {
				price: 100,
				discount: 0.8
			}
		},
		computed: {
			discountPrice() {
				return this.price * this.discount
			}
		},
		methods: {
			updatePrice() {
				this.price += 10
			}
		}
	}
</script>
2)vue3中setup采用的是组合式API
<script>
	export default {
		name: 'APP',
		setup() {
			//数据
			let name = 'zhao'
			let age = 32
			//方法
			function changeName() {...}
			function changeAge() {...}
			//
			return {name, age, changeName, changeAge}
		}
	}
</script>
2)setup语法糖形式
<script setup>
	let name = 'zhao'
	let age = 32
	function changeName() {...}
	function changeAge() {...}
</script>
注: vue2的对象中可以使用this, vue3的setup中不用this;


>>响应式数据
1, ref
import {ref} from 'vue'
let person = ref({name: 'zhao', age: 32})  //将变量变为RefImpl对象
person.value.name = 'qian'  //修改数据, 要加.value
2, reactive
import {reactive} from 'vue'
let person = reactive({name: 'zhao', age: 32})  //将变量变为Proxy对象
person.name = 'qian'
3, ref和reactive的区别
1)ref可以定义基本类型和对象类型的响应式数据, 而reactive只能定义对象类型;
2)修改数据时, ref定义的变量要加.value, 而reactive数据可以直接修改;
3)修改对象类型时, ref定义的对象可以通过整体赋值修改, 而reactive不行;
[ref] person.value = {name: 'qian', age: 40}  //√
[reactive] person = {name: 'qian', age: 40}  //×
[reactive] Object.assign(person, {name: 'qian', age: 40})  //√
4)ref定义的对象类型, 底层实现用的就是reactive;
4, toRefs, toRef
toRefs将响应式对象的每个属性都变成响应式数据, toRef将响应式对象的某个属性变成响应式数据;
import {toRefs} from 'vue'
let person = reactive({name: 'zhao', age: 32})
let {name, age} = toRefs(person)
function changeName() {
	name.value = 'qian'
}
注: 修改name时, person.name也会同时修改, 所以在模板中使用{{name}}与{{person.name}}都可以;
toRef的使用类似: let name = toRef(person, 'name');


>>computed 计算属性
import {computed} from 'vue'
1)回调函数的形式
const discountPrice = computed(() => price * discount)
2)getter和setter的形式
const discountPrice = computed({
	get(){
		return price * discount
	},
	set(val){
		//....
	}
})
注: 计算属性本质上也是函数, 返回一个ref响应式数据;
计算属性与一般函数的区别是:
计算属性可以缓存, 当在模板中多次调用计算属性时, 计算属性只计算一次;
而当在模板中多次调用一般函数时, 函数会执行多次;


>>条件渲染和列表渲染
1)条件渲染
<div v-if="isShow">Hello</div>
注: v-if与v-show的区别是, 前者销毁了组件, 而后者只是隐藏组件;
注: 与v-if搭配的有v-else-if, v-else;
2)列表渲染
const datas = [
	{id: '001', name: 'zhao'}, 
	{id: '002', name: 'qian'},
]
<ul>
	<li v-for="g in datas" :key="g.id">{{g.name}}</li>
</ul>


>>双向绑定v-model
1, 在表单元素上使用
FirstName: <input type="text" v-model="firstName">
LastName: <input type="text" v-model="lastName">
FullName: {{firstName}}-{{lastName}}
//js
let firstName = ref('张')
let lastName = ref('三')
注: v-model的底层实现如下
<input type="text" :value="firstName" @input="firstname=$event.target.value">
2, 在自定义组件上使用v-model, 使子组件能够修改父组件的数据
1)方式一: 单个v-model
v-model默认使用modelValue作为prop, update:modelValue作为事件;
//父组件里
<CustomInput v-model="message" />
//CustomInput.vue 
defineProps(['modelValue'])
defineEmits(['update:modelValue'])
<input :value="modelValue" @input="$emit('update:modelValue', $event.target.value)">
2)方式二: 多个v-model, 需要具名
//父组件里
<CustomInput v-model:msg="message" />
//CustomInput.vue 
defineProps(['msg'])
defineEmits(['update:msg'])
<input :value="msg" @input="$emit('update:msg', $event.target.value)">


>>ref
1, 用在普通dom标签上, 获取的是dom节点;
<div ref="box">合肥</div>
let box = ref()
console.log(box.value)
2, 用在组件上, 获取的是组件的实例对象, 组件需要通过defineExpose()暴露属性和方法;
//Son.vue
let count = ref(12)
function f1() {
	count.value++
}
defineExpose({
	count,
	f1
})
//Parent.vue
<Son ref="son"></Son>
const son = ref(null)
function handleClick() {
	son.value.f1()
	console.log(son.value.count)
}


>>watch 监听
1, watch用于监听基本类型的响应式数据、对象类型的响应式数据、一个getter函数、
或多个数据源组成的数据;
1)ref定义的基本类型数据
let count = ref(0)
watch(count, (newValue, oldValue) => {
	//....
})
2)响应式对象
let person = ref({name: 'zhao', age: 30})
watch(person, (newValue, oldValue) => {
	//....
}, {deep: true})
注: ref定义的响应对象需要第三个参数{deep: true}表示监听对象的属性, 而reactive则默认是深度监听;
3)getter函数
watch(() => person.name, (newValue, oldValue) => {
	//....
})
4)以上数据源组成的数组
watch([() => person.name, () => person.age], (newValue, oldValue) => {
	//newValue和oldValue也为对应的数组['zhao', 30]
}) 
注: watch()函数可传入第三个参数作为配置项, 如deep: true表示深度监听, 
immediate: true表示组件加载时立即执行一次;
watch()函数的返回值可以用来停止监听;
2, watchEffect
watchEffect(() => {
	//....
})
watch监视指定的数据, 只在监视的数据变化时执行回调函数;
watchEffect不用指定具体的监视数据, 它在开始时、以及回调函数里用到的数据发生变化时执行;


>>$event表示事件对象
1, <button @click="fn">点我</button>
function fn(e) {
	//不传任何参数时, e就是事件对象
}
2, <button @click="fn(1, $event)">点我</button>
function fn(a, e) {
	//传递多个参数时, 占位符$event表示事件对象
}


>>事件修饰符
1)阻止事件冒泡
<a @click.stop="f1">..</a>
等价于在f1函数中调用event.stopProgation();
2)阻止浏览器的默认行为
<a @click.prevent="f2">..</a>
等价于在f2函数中调用event.preventDefault();
3)多个修饰符可以串联
<a @click.stop.prevent="f3">..</a>


>>自定义hooks
//useCount.js
import {ref} from 'vue'
export default function() {
	//数据 
	let count = ref(0)
	//方法
	function add() {
		count.value += 1
	}
	return {count, add}
}
//Person.js 组件中使用
import useCount from './hooks/useCount'
const {count, add} = useCount()


>>slot 插槽
子组件用插槽占位, 父组件调用子组件传递具体内容;
如果子组件有多个插槽, 则要为每个插槽命名, 成为具名插槽;
当父组件没有传递任何内容时, 子组件slot里的内容为默认显示值;
1, 匿名插槽
//Son.vue
<view>
	<slot></slot>
	<slot></slot>
</view>
//Parent.vue
<Son>
	<p>This is customized content</p>
</Son>
2, 具名插槽
//Son.vue 
<view>
	<slot name="header">
		这是header区域
	</slot>
</view>
//Parent.vue
<Son>
	<template #header>
		This is header area.
	</template>
</Son>
注: #header是v-slot:header的简写;
注: template标签用于占位, 不会增加额外的结构;


>>生命周期
1, vue2的生命周期
创建 -> 挂载 -> 更新 -> 销毁
<script>
	export default {
		name: 'Person',
		data() { //数据 },
		methods: { //方法 },
		beforeCreate() { //创建前 },
		created() { //创建完毕 },
		beforeMount() { //挂载前 },
		mounted() { //挂载完毕 },
		beforeUpdate() { //更新前 },
		updated() { //更新完毕 },
		beforeDestroy() { //销毁前 },
		destroyed() { //销毁完毕 }
	}
</script>
2, vue3的生命周期
本质上同vue2, 只是部分钩子函数有所不同;
<script setup>
	import {...} from 'vue'  //导入钩子函数
	let count = ref(0)  //数据
	function add() { count.value += 1 }  //方法
	console.log('create')  //创建 
	onBeforeMount(() => {})  //挂载前
	onMounted(() => {})  //挂载完毕
	onBeforeUpdate(() => {})  //更新前
	onUpdated(() => {})  //更新完毕
	onBeforeUnmount(() => {})  //卸载前
	onUnmounted(() => {})  //卸载后
</script>
注: 最常用的三个钩子函数: onMounted、onUpdated、onBeforeUnmount;


>>组件间的通信
1, 父传子props
*1)父给子传递数据
//Parent.vue
<Son :c1="car" />
let car = ref('宝马')
//Son.vue
Car from Parent: {{c1}}
defineProps(['c1'])
2)父给子传递函数
//Parent.vue
toyFromSon: {{toyFrom}}
<Son :f1="getToy" />
let toyFrom = ref('')
function getToy(value) {
	toyFrom.value = value
}
//Son.vue
<button @click=f1(toy)">Send Toy</button>
let toy = ref('奥特曼')
defineProps(['f1'])
*2, 父传子使用自定义事件
//Parent.vue
toyFromSon: {{toyFrom}}
<Son @send-toy="getToy" />
let toyFrom = ref('')
function getToy(value) {
	toyFrom.value = value
}
//Son.vue
方法一: 在模板中直接使用$emit触发
<button @click="$emit('send-toy', toy)">Send Toy</button>
let toy = ref('奥特曼')
方法二: 通过defineEmits()显式声明
const emit = defineEmits(['send-toy'])
emit('send-toy', toy.value)
*3, 任意组件的通信: mitt(消息订阅与发布)
接收数据的组件, 提前绑定好事件(订阅消息),
提供数据的组件, 在合适的时候触发事件(发布消息);
1)安装mitt
npm i mitt
2)准备mitt公共文件
src 
	utils
		emitter.js
//emitter.js
import mitt from 'mitt'
export default mitt()
3)使用mitt绑定事件和触发事件
//A.vue 
import emitter from '@/utils/emitter.js'
emitter.on('send-toy', (value) => {  //绑定事件
	console.log('send-toy被调用')
})
onUnmounted(() => {
	emitter.off('send-toy')  //组件卸载时解绑事件
})
//B.vue
import emitter from '@/utils/emitter.js'
emitter.emit('send-toy', toy)  //触发事件
*4, 祖传孙 provide/inject
1)祖先组件中
import {provide, ref} from 'vue';
const car = ref('宝马')
provide('car', car)
2)后代组件中
import {inject} from  'vue';
const car2 = inject('car') 
注: 后代组件接收到的数据也是响应式的, 如果修改该数据, 祖先组件中的原始数据也会被修改;
5, 祖传孙 $attrs
1)$attrs是什么
$attrs表示父给子传递的数据中, 不包含在子组件defineProps()里的其他数据;
//Parent.vue
<Son :a="a" :b="b" :c="c" :d="d" />
//Son.vue
<div>a: {{a}}</div>
<div>其他: {{$attrs}}</div>
defineProps(['a'])
注: 此处$attrs就等于 {b: 2, c: 3, d: 4};
2)祖传孙
//Parent.vue
<Son :a="a" :b="b" :c="c" :d="d" />
//Son.vue
<Sun v-bind="$attrs" />
//Sun.vue
defineProps(['a', 'b', 'c', 'd'])


>>路由
1, 下载路由包 vue-router
npm i vue-router
2, 基本使用
1)定义路由器: 在路由器中指定路由规则;
router
	index.ts
//index.ts
import {createRouter, createWebHistory} from 'vue-router'
const router = createRouter({
	history: createWebHistory(),
	routes: [
		{path: '/home', component: Home},
		{path: 'about', component: About},
		{path: '/', redirect: '/about'}  //重定向
	]
})
export default router
2)修改main.ts, 在main.ts中引用路由器
import router from './router'
createApp(App).use(router).mount('#app')
3)在组件中使用路由(声明式路由)
<template>
	//导航区
		<div class="nav">
			<RouterLink to="/home" active-class="active">Home</RouterLink>
			<RouterLink to="/about" active-class=active">About</RouterLink>
		</div>
	//展示区
		<div class="main-content">
			<RouterView></RouterView>
		</div>
</template>
<script lang="ts" setup>
	import {RouterView, RouterLink} from 'vue-router'
</script>
<style>
	.active{
		....
	}
</style>
注: active-class表示导航按钮被点击时的样式, 可以在style中自定义该样式;
导航区路由链接中的to有三种写法:
a)字符串形式, to="/home';
b)对象形式, :to="{path: '/home'}"
c)对象形式, :to="{name: 'zhuye'}"  //需要给每个路由规则一个name属性, 如name: 'zhuye';
3, 一般组件与路由组件
上面的Home、About属于路由组件, 路由组件一般放在src/pages或src/views文件夹, 而一般组件放在
src/components文件夹;
4, 路由器工作模式
1)history模式
url不带#, 更美观, 但需要服务端配合处理路径问题(后端增加一个配置项);
2)hash模式
将createWebHistory改成createWebHashHistory, 就成为hash模式, url带有#, 优点是不需要服务端配合处理路径问题;
注: 前台项目一般用history模式, 中后台管理项目有时用hash模式;
5, push与replace
路由默认是通过history的push()方法不断往上堆叠的, 从而可以回退;
在<RouterLink>中添加replace属性, 就成为了替换;
6, 嵌套路由
1)在路由器的路由规则中, 通过children属性定义二级路由规则:
{
	path: '/news',
	component: News,
	children: [
		{
			path: 'detail',
			component: Detail
		}
	]
}
2)导航区, 定义路由链接
<RouterLink to="/news/detail">Detail</RouterLink>
3)展示区
<RouterView></RouterView>
7, 给路由组件传参
1)query参数
//在路由链接中传参
<RouterLink to="/news/detail?name=zhao&age=32">Detail</RouterLink> 
或者
<RouterLink :to="{path: '/news/detail', query: {name: 'zhao', age: 32}}">Detail</RouterLink>
//路由组件中接收参数: route.query
<template>
	Name: {{route.query.name}}
	Age: {{route.query.age}}
</template>
<script setup>
	import {useRoute} from 'vue-router'
	const route = useRoute()
</script>
或者, 直接在模板中使用 {{ $route.query.name }};
2)params参数
//修改路由规则, 加上占位符
{
	path: 'detail/:name/:age?',
	component: Detail
}
注: 在某个占位符后面加个?, 则表示该参数可选;
//在路由链接中传参
<RouterLink to="/news/detail/zhao/32">Detail</RouterLink>
//在路由组件中接收参数: route.params 
<template>
	Name: {{route.params.name}}
	Age: {{route.params.age}}
</template>
<script setup>
	import {useRoute} from 'vue-router'
	const route = useRoute()
</script>
或者, 直接在模板中使用 {{ $route.params.name }};
3)路由规则的props配置, 让路由组件更方便的接收参数
//修改路由规则, 加上props属性
{
	path: 'detail/:name/:age',
	component: Detail,
	props: true
}
//在路由组件中通过defineProps()来接收props
<template>
	Name: {{name}}
	Age: {{age}}
</template>
<script setup>
	defineProps(['name', 'age'])
</script>
注: props有三种写法:
第一种写法, props: true, 将路由收到的所有params参数作为props传给路由组件;
第二种写法, props(route) {
	return {
		name: route.query.name, 
		age: route.query.age
	}
}, 可以自己决定将什么作为props传给路由组件;
第三种写法, props: {
	name: 'zhao',
	age: 32
}, 作用同第二种;
8, 编程式路由导航
不使用路由组件<RouterLink>, 而是使用router的push或replace方法来实现路由导航;
import {useRouter} from 'vue-router'
const router = useRouter()
router.push('/about')
router.replace('/about')  
push()和replace()的参数与路由组件的to属性完全相同
注: 实际项目中编程式路由比路由组件更常用;
注: vue2中实现路由跳转直接用: this.$router.push('/about');


>>路由守卫
1)全局守卫
//添加前置守卫, 如果用户没有登录, 不能访问/home
router.beforeEach((to, from, next) => {
	if(to.path == '/login') {
		return next()  //放行
	}
	//判断用户是否登录, 如果没有登录, 则跳转到/login
	const userInfo = sessionStorage.getItem('userInfo')
	if(!userInfo) {
		return next('/login')
	}
	next()
})
2)路由独享守卫
//写在具体的路由定义里
{
	path: '/admin',
	component: Admin,
	beforeEnter: (to, from, next) => {
		if(isAdmin()) next()
		else next('/login')
	}
}
3)组件内守卫
beforeRouteEnter  进入前
beforeRouteUpdate 更新前
beforeRouteLeave  离开前


>>路由元数据
1, 元数据通过meta定义
const routes = [
{
	path: '/admin',
	component: Admin,
	meta: {requireAuth: true}
}
]
2, 访问元数据
1)route.meta对象
2)全局守卫中访问to.meta
3)组件内通过$route访问


>>pinia
1, pinia是用于vue3的集中式状态管理, vue2中用vuex;
2, 基本使用
1)下载pinia
npm i pinia
2)在main.ts中引入pinia
import {createPinia} from 'pinia'
createApp(APP).use(createPinia()).mount('#app')
3)存储数据到store
src
	stores
		counter.ts   //保存组件Count.vue里的状态
		person.ts  //保存组件Person.vue里的状态
//count.ts
import {defineStore} from 'pinia'
export const useCountStore = defineStore('counter', {
	const count = ref(0)
	function increment() {
		count.value++
	}
	return {count, increment}
})
4)其他组件使用store中的状态数据
import {useCountStore} from '@/stores/counter'
const counter = useCountStore()
count.count++
counter.increment()
3, pinia的持久化存储
将pinia的状态数据进行持久化存储, 可以防止刷新丢失, 具体使用请AI, 很简单;





----------Vue3项目从0搭建步骤-------------------------
1, 创建项目
npm create vue@latest
一般选择ts、vue-router、pinia、Prettier等功能;
2, 安装相关组件与依赖
1)npm i element-plus axios --save
2)在main.js中引入element-plus
import ElementPlus from 'element-plus'
import 'element-plus/dist/index.css'
import zhCn from 'element-plus/es/locale/lang/zh-cn'  //中文语言包
const app = createApp(App)
app.use(ElementPlus, {locale: zhCn})
3, 引入全局样式
//assets/global.css
...
//main.js
import './assets/global.css'
4, 二次封装axios工具类
1)二次封装
//utils/http.js
import axios from 'axios'
//创建axios实例
const http = axios.create({
	baseURL: 'http://127.0.0.1/api/',
	timeout: 8000,
	headers: {
		'Content-Type': 'application/json;charset=utf-8'
	}
})
//请求拦截器
http.interceptors.request.use(
  config => {
    return config
  },
  error => {
    return Promise.reject(error)
  },
)
//响应拦截器
http.interceptors.response.use(
  response => {
    return response.data
  },
  error => {
    return Promise.reject(error)
  },
)
export default http
2)将http添加到全局属性
//main.js
import http from '@utils/http'
app.config.globalProperties.axios = http
注: 或者不添加到全局属性, 在需要时导入utils/http就行;
3)使用axios工具类
import {getCurrentInstance} from 'vue'
const axios = getCurrentInstance().appContext.config.globalProperties.axios
axios.get('counselor/page?pageNum=1&pageSize=10').then(resp=>{
	console.log(resp)
})
5, 二次封装localStorage工具类
可以将内存里的数据持久化到localStorage, 为了防止多个项目的命名冲突, 
可以采用如下的方式:
//project1的项目
localStorage.setItem('project1', JSON.stringify({name: 'zhao', age: 30}))
var obj = JSON.parse(localStorage.getItem('project1'))
obj.major = 'maths'
localStorage.setItem('project1', JSON.stringify(obj))
//project2的项目
localStorage.setItem('project2', JSON.stringify({name: 'qian', age: 40}))
6, 路由配置 
//src/router/index.js
const router = createRouter({
	history: createWebHistory(),
	routes: [
		{
			path: '/',
			redirect: '/login'
		},
		{
			path: '/login',
			name: 'Login',
			component: () => import('@/views/Login.vue')
		},
		{
			path: '/home',
			name: 'Home',
			component: () => import('@/views/Home.vue')
		}
	]
})
7, 登录逻辑
1)添加前置路由守卫
//如果用户没有登录, 不能访问/home
router.beforeEach((to, from, next) => {
	if(to.path == '/login') {
		return next()  //放行
	}
	//判断用户是否登录, 如果没有登录, 则跳转到/login
	const userInfo = sessionStorage.getItem('userInfo')
	if(!userInfo) {
		return next('/login')
	}
	next()
})
2)登陆成功时保存后端返回的用户信息
//src/views/Login.vue
const resp = await axios.get(`协议://域名:端口/项目名/资源路径/username=${loginData.username}&password=${loginData.password}&source=1`)
if(resp.data.code == 200) {
	//登录成功, 将用户信息保存到sessionStorage, 并跳转到/home 
	sessionStorage.setItem('userInfo', JSON.stringify(resp.data.data))
	router.replace('/home')
} else {
	//提示用户名或密码错误
}
注: 前端登录成功后保存后端返回的用户数据, 有如下几种方式:
1)localStorage
本地存储, 浏览器关闭后不会消失, 除非手动清除;
2)sessionStorage
会话存储, 浏览器关闭后就消失;
*3)存储到pinia并进行持久化













