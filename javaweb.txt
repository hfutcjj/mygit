>>外网的jar包网页打不开的解决方案
通过阿里云的文件仓库下载: maven.aliyun.com

>>XML 可扩展标记语言
>>XML文档语法规则
1, 基础
1)xml与html
xml没有预定义标签, html存在大量预定义标签;
xml重在保存与传输数据, html用于显示信息;
2)xml的用途
java程序的配置描述文件;
用于保存程序产生的数据;
网络间的数据传输;
3)xml文档结构
第一行必须是xml声明, 有且只有一个根节点;
<?xml version="1.0" encoding="UTF-8" ?>
4)处理特殊字符
//使用字符实体
&lt;(<), &gt;(>), $amp;(&), &apos;('), &quot;(");
//使用CDATA标签
CDATA指的是不应由XML解析器进行解析的文本数据, 原义输出;
<![CDATA[
	...
]]>
>>XML语义约束
1, 语义约束一: DTD
1)规定XML文档中允许和不允许出现哪些元素;
2)语义约束的两种定义方式: DTD 和 XML Schema;
3)DTD
文档类型定义, 文件扩展名为.dtd;
<!ELEMENTS hr (employee)> //hr节点下只允许出现一个employee子节点
注: employee后面添加+, *, ?分别表示允许出现1-n次, 0-n次, 0-1次节点
<!ELEMENTS employee (name,age,salary,department)> //employee节点下必须包含以下四个节点，且按顺序出现
<!ELEMENTS name (#PCDATA)> //name标签体只能时文本, #PCDATA表示文本
<!ATTLIST employee number CDATA ""> 节点中的属性声明 number-属性名 CDATA-类型 ""-默认值
4)举例
//hr.xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE hr SYSTEM "hr.dtd"> //引入dtd文件, hr-根节点, SYSTEM-本地
<!-- 人力资源管理系统 -->
<hr>
	<employee no="101">
		<name>张三</name>
		<age>31</age>
		<salary>4000</salary>
		<department>
			<dname>会计部</dname>
			<address>XX大厦B103</address>
		</department>
	<employee>
	<employee> 
		//同上(省略) 
	</employee
</hr>
//hr.dtd
<?xml version="1.0" encoding="UTF-8" ?>
<!ELEMENT hr (employee+)>
<!ELEMENT employee (name,age,salary,department)>
<!ATTLIST employee no CDATA "">
<!ELEMENT name (#PCDATA)>
<!ELEMENT age (#PCDATA)>
<!ELEMENT salary (#PCDATA)>
<!ELEMENT department (dname,address)>
<!ELEMENT dname (#PCDATA)>
<!ELEMENT address (#PCDATA>
2, 语义约束二: SML schema
1)XML schema是W3C标准, 提供了数据类型、格式限定、数据范围等特性, 使用很广泛;
2)举例
//hr.xml
<?xml version="1.0" encoding="UTF-8"?>
<!-- 人力资源管理系统 -->
<hr xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="hr.xsd">
...(省略)
//hr.xsd
<?xml version="1.0" encoding="UTF-8" ?>
<schema xmlns="http://www.w3.org/2001/SMLSchema">
<element name="hr">
	<complexType>
		<sequence>
			<element name="employee" minOccurs="1" maxOccurs="999">
				<complexType>
					<sequence>
						<element name="name" type="string"></element>
						<element name="age" type="integer"></element>
						<element name="salary" type="integer"></element>
						<element name="department">
							<complexType>
								<sequence>
									<element name="dname" type="string"></element>
									<element name="address" type="string"></element>
								</sequence>
							</complexType>
						</element>
					</sequence>
				</complexType>
			</element>
		</sequence>
	</complexType>
</element>
>> XML文档解析
1, java利用DOM4j来解析XML文档, DOM4j中的SAXReader类是读取XML文件的核心类, 用于将XML解析
后以"树"的形式保存在内存中;
DOM4j需要下载, 然后将DOM4j引入到java工程，方法:
在工程下建立文件夹lib，将DOM4j复制到lib下，然后右键DOM4j, 点击Build Path即可;
2, 举例，使用DOM4j读取hr.xml表中的员工信息
String file = "E:/java/workspace/test/src/hr.xml";
SAXReader reader = new SAXReader();
Document document = reader.read(file); //将xml文件解析成DOM树
Element root = document.getRootElement(); //获取xml文件的根节点
List<Element> employees = root.elements("employee"); //获取指定元素的集合
for(Element v : employees){
	sysout(v.element("name").getText() + "  " +  //element()获取一个子元素, getText()-获取文本值
		v.element("age").getText() + "  " +
		v.element("salary").getText() + "  " + 
		v.element("department").element("dname").getText() + "  " + 
		v.element("department").element("address").getText() + "  " + 
		v.attribute("no").getText());  //attribute()获取属性节点
}
3, 举例, 给hr.xml表增加一条员工信息
Element employee = root.addElement("employee");
employee.addAttibute("no", "103");
employee.addElement("name").setText("赵六");
employee.addElement("age").setText("25");
employee.addElement("salary").setText("3600");
Element department = employee.addElement("department");
department.addElement("dname").setText("人事部");
department.addElement("address").setText("XX大厦B106");
Writer writer = new OutputStreamWriter(new OutputStreamFile(file), "UTF-8");
document.write(writer);
writer.close();
3, XPath路径表达式
1)XPath是XML文档中查找数据的语言;
XPath查询比较方便和高效，建议优先使用XPath来查询xml的数据;
2)基本语法
/hr/employee  //hr下的employee子元素
//employee  //所有employee元素
//employee[salary<3000]  //工资小于3000的employee元素
//employee[name='张三']  //名字叫张三的employee元素
//employee[@no=3304]  //no属性等于3304的employee元素
//employee[1]  //第一个employee元素
//employee[last()]  //最后一个employee元素
//employee[position<6]  //前5个employee元素
//employee[3] | employee[8]  //第3个和第8个employee元素
3)举例
public void xpath(String xpathExp){
	String file = "E:/java/workspace/test/src/hr.xml";
	SAXReader reader = new SAXReader();
	Document document = reader.read(file);
	List<Node> nodes = document.selectNodes(xpathExp);
	for(Node node : nodes){
		Element emp = (Element)node;
		sysout(emp.attribute("no").getText());
		sysout(emp.element("name").getText());
	}
}
new Demo().xpath("//employee[1]");



>>Servlet













