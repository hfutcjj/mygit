>>mysql目录结构
1, bin，存储可执行文件;
2, data，存储数据文件;
3, docs, 文档;
4, include, 存储包含的头文件;
5, lib, 存储库文件;
6, share, 错误信息和字符集文件;

>>启动和关闭mysql服务
1, net start mysql //启动
2, net stop mysql //关闭
注: net start/stop 也能启动与关闭其他服务;

>>登录与退出
1, mysql -hlocalhost -uroot -p -P3306 //登录
如果是本地登录，端口号是默认的3306，则可省略-h与-P参数;
2, 退出
exit / quit / \q;

>>操作数据库
1, 创建数据库
create database test;
create database if not exists test;
create database character set [=] utf8;
2, 显示所有数据库
show databases;
3, 查看创建数据库的信息
show create database test;
4, 修改数据库
alter database test character set [=] utf8;
5, 删除数据库
drop database test;
drop database if exists test;
6, 打开数据库
use test;
7, 显示当前打开的数据库名
select database();
8, 设置客户端的编码
set names utf8 / gbk;
注: 设置数据库服务器的编码需要在配置文件中设置;

>>数据类型
1, 整型
1)tinyint: 1字节
有符号: -128~127; 无符号: 0~255; (百)
2)smallint: 2字节
有符号: -32768~32767; 无符号: 0~65535; (万)
3)mediumint: 3字节
有符号: -8388608~8388607; 无符号: 0~16777215; (百万)
4)int: 4字节
有符号: -2147483648~2147483647; 无符号: 0~4294967259; (十亿)
5)bigint: 8字节
有符号: -2^63~2^63-1; 无符号: 0~2^64-1;
2, 浮点型
1)float(m, d): 单精度浮点, m是数字总位数，d是小数点后面的位数;
2)double(m, d): 双精度浮点;
3, 字符型
1)char(m): 定长, m个字节 <= 255字节
2)varchar(m): 不定长 <= 65535字节
3)tinytext: <= 2^8字节
3)text: <= 2^16字节
4)mediumtext: <= 2^24字节
5)longtext: <= 2^32字节
6)enum('value1', 'value2', ...): 枚举
7)set('value1', 'value2', ...): 集合
4, 日期时间类型
1)year: 1字节
2)date: 3字节
3)time: 3字节
4)datetime: 8字节
5)timestamp: 4字节
注: 实际开发中日期时间类型经常用整型代替;

>>操作数据表
1, 查看当前数据库中的所有表
show tables;
show tables from mysql;
2, 创建表
1)基本创建命令
create table [if not exists] tname(
	cname ctype,
	...
)engine=InnoDB default charset=utf8;
举例:
create table if not exists t(
	id int unsigned primary key auto_increment,
	name varchar(20) not null,
	age tinyint unsigned,
	salary float(8, 2)
);
2)自己创建表结构，然后复制旧表的数据
create table t1(
	id int unsigned primary key auto_increment,
	pname varchar(20) not null,
	page tinyint unsigned
) select age page, name pname from t;
create...select结构，要复制的列名一定要相同，顺序可以不同;
3)直接复制表结构到新表
create table tnewname like toldname;
可复制字段类型以及约束条件;
4)复制表结构以及数据到新表
create table tnewname select cnames from toldname where condition;
3, 查看创建的数据表结构信息
show columns from t; 
desc / describe t; //这两种查询一样，都是显示所有列的信息
show create table t; //显示创建表的信息
4, 约束
约束保证数据的完整性和一致性;
约束分为列级约束和表级约束;
1)primary key //主键, 一张表只能有一个主键列，主键自动为 not null 和 unique;
2)not null //非空约束
3)unique //唯一性约束
4)auto_increment //自动编号, 只能用于主键;
5)default //默认值
6)外键约束
foreign key (pid) references province(id);
foreign key (pid) references province(id) on delete cascade;
支持外键约束的表的存储引擎必须是InnoDB;
子表的外键列与父表的参照列的数据类型必须要兼容;
外键约束的参照操作有:
cascade(级联): 从父表删除或更新时，自动修改子表;
set null(置空): 从父表删除或更新时，将子表对应字段置为空;
restrict(拒绝): 拒绝对父表的删除或更新;
注: 实际开发中物理的外键约束用得比较少，一般用程序来逻辑的控制;
5, 修改表的结构
1)添加列
alter table tname add [column] cname ctype [first|after cname];
2)删除列
alter table tname drop [column] cname;
3)修改列
modify只能修改列的类型和位置:
alter table tname modify [column] cname ctype [first|after cname];
change除了能修改列的类型和位置，还能修改列名:
alter table tname change [column] coldname cnewname ctype [first|after cname];
4)添加约束
alter table tname add [constraint pk_tname_id] primary key (id);
alter table tname add [constraint uq_tname_name] unique (name);
alter table tname add [constraint fk_tname_pid] foreign key (pid) references province (id);
alter table tname alter cname set default 15;
alter table tname alter cname drop default;
5)删除约束
alter table tname drop primary key;
alter table tname drop [index|foreign key] constraint_name;
6)修改表名
alter table tname rename [to|as] tnewname;
6, 插入记录
1)直接插入
insert [into] tname[(cname, ...)] values (val, ...);
举例:
insert into tname values (default/null, 'zhao', 30, 5200);
insert into tname(name, age, salary) values ('zhao', 30, 5200);
insert into tname(cnames) values (...), (...), ...;
注: 插入数据时，对于带有auto_increment约束的主键，省略时可以用default/null来代替;
对于有默认值的字段，可以不插入值，也可以插入default;
2)插入其他表的数据
insert into t1(pname) select name from t where condition;
insert into t1 select null, name from t where condition;
与create...select不同，create...select要求复制的列名要相同，
而insert into...select不要求列名相同，只要求能一一对应;
7, 更新数据
1)单表更新
update tname set cname = value where condition;
update tname set cname1 = value1, cname2 = value2 where condition;
2)多表更新
比较灵活，可单独修改连接的左表或右表，也可同时修改两张表;
update t1 inner join t2 on t1.c1 = t2.c2 set t1.c = value where condition;
update t1 inner join t2 on t1.c1 = t2.c2 set t2.c = value where condition;
update t1 inner join t2 on t1.c1 = t2.c2 set t1.c = value, t2.c = value where condition;
8, 删除数据
1)单表删除
delete from tname where condition;
2)多表删除
delete t1 from t1 inner join t2 on t1.c1 = t2.c2 where condition;
delete t2 from t1 inner join t2 on t1.c1 = t2.c2 where condition;
delete t1, t2 from t1 inner join t2 on t1.c1 = t2.c2 where condition;
注: 把要删除记录的表放在 delete 和 from 之间;
9, 查询数据
select [distinct] [tname.]cnames [as cnewnames]
	from tname where condition
	group by cname [having condition]
	order by cname [asc|desc]
	limit [offset], count;
举例:
select Dno, avg(Sage) from Student group by Dno having avg(Sage) < 30 order by Dno desc;
注: 进行分组查询时，查询的字段必须是分组的字段或者其他字段的聚合函数;
limit 10; //返回查询结果的前10条
limit 3, 10; //返回从第4条结果开始的10条记录
注: limit可用于后端实现查询分页显示;

>>子查询
1)出现在其他sql语句内的select子句, 叫子查询;
用于where中的比较时，子查询返回一条结果可以用于比较运算符，返回多条结果则必须用[not] in;
select * from teacher where Salary > (select avg(Salary) from teacher);
select * from course where Cno in (select Cno from SC where Sno = '1001');
2)用于创建表或插入数据
create table tname(cnames ctypes) select ...;
insert into tname(cnames) select ...;
3)出现在from后，这样的子查询的结果作为临时表，必须起一个别名;

>>连接
1)内连接
select * from student t1 [inner] join dept t2 on t1.Dno = t2.Dno;
等价于
select * from student t1, dept t2 where t1.Dno = t2.Dno;
2)左外连接
select * from student t1 left [outer] join dept t2 on t1.Dno = t2.Dno;
3)右外连接
select * from student t1 right [outer] join dept t2 on t1.Dno = t2.Dno;
4)全连接
mysql不支持全连接，可合并左外连接与右外连接的结果得到:
select * from student t1 left [outer] join dept t2 on t1.Dno = t2.Dno
union 
select * from student t1 right [outer] join dept t2 on t1.Dno = t2.Dno;
5)交叉连接(笛卡尔积)
select * from student t1 cross join dept t2; 等价于
select * from student t1, dept t2;

>>mysql系统函数
1, 字符串函数
1)length() //获取字符串的长度
length('hello'); //5
2)substring() //字符串截取
substring('hello,world', 2, 3); //'ell', 索引从1开始
substring('hello,world',2); //'ello,world'
substring('hello,world', -2); //'ld'
3)left()/right() //从左或右边截取
left('hello,world', 4); //'hell'
right('hello,world', 4); //'orld'
4)replace() //字符串替换
replace('hello,world', 'o', '*'); //'hell*,w*rld'
5)upper()/lower() //转换为大小写
upper('Hello'); //'HELLO'
lower('Hello'); //'hello'
6)trim()/ltrim()/rtrim() //删除字符串前或后的空格
7)concat()/concat_ws() //连接
concat('a', 'b', 'c'); //'abc'
concat_ws('|', 'a', 'b', 'c'); //'a|b|c'
8)[not] like //模式匹配
select 'hello' like 'h%'; //1
2, 数学函数
1)abs() //取绝对值
2)ceil() //向上取整
3)floor() //向下取整
4)round() //四舍五入, 可指定精度
round(3.14159); //3
round(3.14159, 2); //3.14
5)power() //幂运算
power(2, 3); //8
6)trancate() //数字截断
trancate(5.6789, 2); //5.67
3, 日期时间函数
1)now() //当前日期和时间
now(); //'2020-05-07 10:56:00'
2)curdate() //当前日期
curdate(); //'2020-05-07'
3)curtime() //当前时间
curtime(); //'10:56:00'
4)date_format() //对日期时间进行格式化
date_format('2020-5-1', '%m/%d/%Y'); //'05/01/2020'
5)date_add() //对日期时间进行增减
date_add('2020-5-1', interval 2 year/month/week/day);
6)datediff() //计算两个日期相差的天数
datediff('2020-6-1', '2020-5-1'); //31
4, 信息函数
1)connection_id() //当前连接的ID
2)database() //当前打开的数据库
3)user() //当前用户
user(); //root@localhost
4)version() //数据库版本
5)last_insert_id() //最后一次插入的id
6)row_count() //上一次操作影响的行数
5, 聚合函数
1)count() //计数
2)sum() //求和
3)max() //最大值
4)min() //最小值
5)avg() //平均值
注: 聚合函数只能用于数据表的查询字段;
6, 加密函数
1)md5() //md5加密
2)sha() //sha加密

>>修改mysql默认分隔符
delimiter //

>>自定义函数
1, 不带参数
create function f1() returns varchar(30)
return date_format(now(), '%Y年%m月%d日 %H时%i分%s秒');
调用: select f1();
2, 带参数
create function f1(num1 int, num2 int) returns float(10, 2)
return (num1+num2)/2;
调用: select f1(1, 2);
3, 复合结构函数体
delimiter //
create function adduser(username) returns int unsigned 
begin
insert into test(username) values (username);
return last_insert_id();
end
//
delimiter ;
调用: select adduser('zhao');
注: 函数体由多条语句组成的话需要加 begin...end 结构;
4, 删除函数
drop function f1;

>>存储过程
1, 优点
sql引擎执行sql语句的流程: 语法分析->编译->执行;
存储过程只在第一次执行时进行语法分析和编译，然后保存了编译后的结果，后面直接执行，速度更快;
实现功能封装;
减少网络流量;
2, 不带参数的存储过程
create procedure sp1() select version();
调用: call sp1();
3, 带有in类型参数的存储过程
delimiter //
create procedure sp1(in val int unsigned)
begin
delete from user where id = val;
end
//
delimiter ;
调用: call sp1(3);
4, 带有in和out类型参数的存储过程
delimiter //
create procedure sp1(in val int, out num int)
begin
delete from user where id = val;
select count(id) from user into num;
end
//
delimiter ;
调用: call sp1(3, @n);
select @n;
5, 带有多个out类型参数的存储过程
delimiter //
create procedure sp1(in val int, out delNum int, out userNum int)
begin 
delete from user where age = val;
select row_count() into delNum;
select count(id) from user into userNum;
end
//
delimiter ;
调用: call sp1(3, @v1, @v2);
select @v1, @v2;
6, 删除存储过程
drop procedure sp1;
7, 存储过程与自定义函数的区别
存储过程一般针对数据表操作，而自定义函数一般封装其他用户操作；
存储过程可以返回多个值，而自定义函数只能返回一个值；
存储过程一般独立执行，而自定义函数往往作为其他sql语句的一部分;
注：
创建存储过程或自定义函数时需要通过delimiter语句修改定界符;
如果函数体或过程体有多个语句，需要包含在begin...end语句块中;
存储过程需要通过call来调用;

>>存储引擎
1, 定义
mysql用不同的技术将数据保存在内存中，就是存储引擎;
常用的存储引擎有MyISAM和InnoDB;
2, 存储引擎需要重点考虑的几个问题
1)并发控制
多个连接对记录进行修改时保证数据的一致性和完整性;
解决: 引入锁机制;
锁分为共享锁(读锁)与排他锁(写锁);
锁的粒度分为表锁与行锁;
2)事务处理
事务用于保证数据库的完整性;
事务的特性(ACID): 原子性，一致性，隔离性，持久性;
3)外键
保证数据一致性的策略;
4)索引
是对数据表中一列或多列的值进行排序的一种结构;
3, 各个存储引擎的特点
MyISAM可存储的数据量为256TB, 支持表锁, 适用于读操作比较多的情形;
InnoDB可存储的数据量为64TB, 支持事务、外键以及行锁, 适用于写操作比较多的情形;
4, 设置存储引擎
1)修改mysql的配置文件
default-storage-engine = InnoDB
2)创建数据表时指定
create table tname(
cnames ctypes
)engine=InnoDB default charset=utf8;
3)修改数据表的存储引擎
alter table tname engine = InnoDB;

>>sql查询案例
1, 删除重复记录
商品表: goods(id, name, price), 要删除名称相同的商品，只保留价格最高的一个;
方法一:
delete t1 from goods t1 inner join goods t2 on t1.name = t2.name where t1.price < t2.price;
方法二:
delete t1 from goods t1 inner join 
	(select name, max(price) maxprice from goods group by name having count(*) > 1) t2 
	on t1.name = t2.name where t1.price < t2.maxprice;
2, 无限级分类
区域表: area(id, name, pid), 其中pid是参照id的外键;
1)列出所有区域和子区域
select p.id, p.name, s.name from area p left join area s on p.id = s.pid;
2)列出所有区域和父区域
select s.id, s.name, p.name from area s left join area p on s.pid = p.id;
3)列出所有区域以及子区域的个数
select p.id, p.name, count(s.name) from area p left join area s on p.id = s.pid 
	group by p.id, p.name;
3, 订单汇总
用户表(用户ID, 姓名, 电话, 地址, 邮箱),
订单表(订单ID, 用户ID, 下单时间, 支付类型, 订单状态),
商品表(商品ID, 名称, 描述, 过期时间),
订单商品表(订单ID, 商品ID, 商品数量, 商品价格);
查询每个用户的订单信息：
select b.用户名, b.电话, b.地址, a.订单ID, sum(c.商品价格*c.商品数量) as 订单价格 
from 订单表 a 
join 用户表 b on a.用户ID = b.用户ID 
join 订单商品表 c on c.订单ID = b.订单ID
group by b.用户表, b.电话, b.地址, a.订单ID;
	
>>数据库设计
1, 数据库设计的目标
较少的存储空间、高效的数据访问、减少数据冗余、易于维护;
2, 数据库设计的步骤
需求分析、逻辑设计、物理设计、维护优化;
3, 需求分析
确定实体以及实体的属性，确定实体间的联系以及联系的属性。实体和联系都是关系表;
实体间的联系有一对一、一对多、多对多的联系，一对一和一对多的联系一般作为属性包含在
实体的关系表中，而多对多的联系要用独立的关系表来表示；
将多对多的联系转化为两个一对多的联系，如学生-课程之间多对多的联系，通过考试这个联系表，
转化为学生-考试和课程-考试这两个一对多的联系；
4, 逻辑设计
1)将需求分析的结果转化为逻辑模型，结果用E-R图来表示，与具体的DBMS无关；
矩形表示实体，椭圆表示属性，菱形表示联系，线段用来连接实体与属性、实体与联系，
联系的m:n的关系在线段上标出，主键属性在下面加下划线;
2)逻辑模型设计的要求
符合第一范式1NF、第二范式2NF、第三范式3NF、BC范式BCNF，不规范的逻辑设计会导致
数据冗余以及插入、更新、删除异常;
3)第一范式
表中的属性不可再分；
不符合1NF的可将属性拆分，使之符合1NF；
4)第二范式
在满足1NF的基础上，不存在某个非主属性对候选码的部分函数依赖;
单一主键的表都满足2NF；
某些复合主键的表不满足2NF，可将其拆分为两个实体表以及一个联系表，使之满足2NF；
5)第三范式
在满足2NF的基础上，不存在某个非主属性对候选码的传递函数依赖；
不满足3NF的表，可将其拆分为两个实体表和一个联系表，使之满足3NF；
6)BC范式
在满足3NF的基础上，不存在候选码之间的传递函数依赖；
不满足BCNF一般是因为表中存在多个联系，可将其拆分为多个单一联系的表，使之满足BCNF；
5, 物理设计
数据库设计的具体物理实现；
包括选择具体的DBMS，选取合适的存储引擎，确定数据库、表、字段的命名，
确定字段的数据类型，以及建立索引等；
在物理设计阶段，有时会反范式化设计，即为了提高访问速度，在表中增加一到多个冗余字段；
6, 维护和优化
维护数据字典、维护索引、维护表结构、对表进行垂直拆分和水平拆分；
1)表的垂直拆分和水平拆分
垂直拆分: 如果表的字段太多，可将其分为两个表，如t(cid, c2, c3, c4, c5, c6, c7)拆分为
t1(cid, t2, t3, t4)和t2(cid, t5, t6, t7);
水平拆分: 如果表的数据量太大，可按照主键的哈希值，将其分为多个表;





	
