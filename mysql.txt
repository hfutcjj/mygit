>>mysql目录结构
1, bin，存储可执行文件;
2, data，存储数据文件;
3, docs, 文档;
4, include, 存储包含的头文件;
5, lib, 存储库文件;
6, share, 错误信息和字符集文件;
注: 安装mysql会包括两个文件夹, 一个是RDBMS目录, 另一个是DB数据文件目录;


>>启动和关闭mysql服务
1, net start mysql //启动
2, net stop mysql //关闭
注: net start/stop 也能启动与关闭其他服务;


>>字符集设置
mysql5默认的字符集为latin, 不支持中文, 需要在配置文件中修改字符集:
[mysql]
default-character-set=utf8
[mysqld]
character-set-server=utf8
collation-server=utf8_general_ci
然后重启mysql服务, 可通过 show variables like 'character_%' 查看字符集;
mysql被oracle收购后, mysql8的默认字符集就是utf8, 不需要修改;


>>图形用户界面连接不上mysql8的解决方案
1, 升级图像用户界面版本;
2, 修改mysql8的解密规则:
use mysql;
alter user `root`@`localhost` identified with mysql_native_password by `123456`;


>>登录与退出
1, mysql -hlocalhost -uroot -p -P3306 //登录
如果是本地登录，端口号是默认的3306，则可省略-h与-P参数;
2, 退出
exit / quit / \q;

>>修改用户可以远程操作数据库的主机地址
user mysql;
update user set host = '%' where user = 'root';
flush privileges;  //让修改的权限数据立即生效
注: '%'表示任意设备都可以使用root用户来登陆数据库服务器;
注: 远程访问数据库服务器需要防火墙放行3306端口;


>>SQL语句的类型：
1)DDL 数据定义语言
数据库、数据表、视图、索引;
create;
2)DCL 数据控制语言
用户、权限、事务控制;
grant, revoke,
commit, rollback;
3)DML 数据操作语言
表的数据;
select, insert, update, delete;
注: 只有DML操作是可以回滚的, DDL不可以回滚, 所以执行DDL一定要小心;


>>操作数据库
1, 创建数据库
create database test;
create database if not exists test;
create database character set [=] utf8;
2, 显示所有数据库
show databases;
3, 查看创建数据库的信息
show create database test;
4, 修改数据库
alter database test character set [=] utf8;
5, 删除数据库
drop database test;
drop database if exists test;
6, 打开数据库
use test;
7, 显示当前打开的数据库名
select database();
8, 设置客户端的编码
set names utf8 / gbk;
注: 设置数据库服务器的编码需要在配置文件中设置;


>>数据类型
1, 整型
1)tinyint: 1字节
有符号: -128~127; 无符号: 0~255; (百)
2)smallint: 2字节
有符号: -32768~32767; 无符号: 0~65535; (万)
3)mediumint: 3字节
有符号: -8388608~8388607; 无符号: 0~16777215; (百万)
4)int: 4字节
有符号: -2147483648~2147483647; 无符号: 0~4294967259; (十亿)
5)bigint: 8字节
有符号: -2^63~2^63-1; 无符号: 0~2^64-1;
2, 浮点型
1)float(m, d): 单精度浮点, m是数字总位数，d是小数点后面的位数;
2)double(m, d): 双精度浮点;
3)decimal(m, n); 
注: float和double是不精确的小数, 而decimal是用字符串的形式来表示小数, 是精确的小数表示法;
3, 字符型
1)char(m): 定长, m个字节 <= 255字节
2)varchar(m): 不定长 <= 65535字节
3)tinytext: <= 2^8字节
3)text: <= 2^16字节
4)mediumtext: <= 2^24字节
5)longtext: <= 2^32字节
6)enum('value1', 'value2', ...): 枚举
7)set('value1', 'value2', ...): 集合
注: mysql中字符串一般用varchar(m)就足够了，如果需要保存更长的，建议用NoSQL数据库来保存;
4, 日期时间类型
1)year: 1字节
2)date: 3字节
3)time: 3字节
4)datetime: 8字节
5)timestamp: 4字节
注: 实际开发中日期时间类型经常用整型代替;


>>创建数据表
1, 创建数据表的几种方法
1)基本创建命令
create table [if not exists] tname(
	cname ctype,
	...
)engine=InnoDB default charset=utf8;
举例:
create table if not exists t(
	id int unsigned primary key auto_increment,
	name varchar(20) not null,
	age tinyint unsigned,
	salary float(8, 2)
);
2)自己创建表结构，然后复制旧表的数据
create table t1(
	id int unsigned primary key auto_increment,
	pname varchar(20) not null,
	page tinyint unsigned
) [as] select age page, name pname from t;
create...select结构，要复制的列名一定要相同，顺序可以不同;
3)直接复制表结构到新表
create table tnewname like toldname;
可复制字段类型以及约束条件;
4)复制表结构以及数据到新表
create table tnewname select cnames from toldname where condition;
2, 查看创建的数据表结构信息
show columns from t; 
desc / describe t; //这两种查询一样，都是显示所有列的信息
show create table t; //显示创建表的信息
3, 查看当前数据库中的所有表
show tables;
show tables from mysql;


>>约束
1, 约束保证数据的完整性和一致性; 约束分为列级约束和表级约束;
2, 常用的约束
1)primary key //主键, 一张表只能有一个主键列，主键自动为 not null 和 unique;
2)not null //非空约束
3)unique //唯一性约束
4)auto_increment //自动编号, 只能用于主键;
5)default //默认值
6)外键约束
foreign key (pid) references province(id);
foreign key (pid) references province(id) on delete cascade;
支持外键约束的表的存储引擎必须是InnoDB;
子表的外键列与父表的参照列的数据类型必须要兼容;
外键约束的参照操作有:
cascade(级联): 从父表删除或更新时，自动修改子表;
set null(置空): 从父表删除或更新时，将子表对应字段置为空;
restrict(拒绝): 拒绝对父表的删除或更新;
注: 实际开发中物理的外键约束用得比较少，一般用程序来逻辑的控制;


>>修改表的结构
1, 添加列
alter table tname add [column] cname ctype [first|after cname];
2, 删除列
alter table tname drop [column] cname;
3, 修改列
modify只能修改列的类型和位置:
alter table tname modify [column] cname ctype [first|after cname];
change除了能修改列的类型和位置，还能修改列名:
alter table tname change [column] coldname cnewname ctype [first|after cname];
4, 添加约束
alter table tname add [constraint pk_tname_id] primary key (id);
alter table tname add [constraint uq_tname_name] unique (name);
alter table tname add [constraint fk_tname_pid] foreign key (pid) references province (id);
alter table tname alter cname set default 15;
alter table tname alter cname drop default;
5, 删除约束
alter table tname drop primary key;
alter table tname drop [index|foreign key] constraint_name;
6, 修改表名
alter table tname rename [to|as] tnewname;


>>插入记录
1, 直接插入
insert [into] tname[(cname, ...)] values (val, ...);
举例:
insert into tname values (default/null, 'zhao', 30, 5200);
insert into tname(name, age, salary) values ('zhao', 30, 5200);
insert into tname(cnames) values (...), (...), ...;
注: 插入数据时，对于带有auto_increment约束的主键，省略时可以用default/null来代替;
对于有默认值的字段，可以不插入值，也可以插入default;
2, 插入其他表的数据
insert into t1(pname) select name from t where condition;
insert into t1 select null, name from t where condition;
与create...select不同，create...select要求复制的列名要相同，
而insert into...select不要求列名相同，只要求能一一对应;
3, 插入的字段使用子查询
insert into student(name, age, deptno) values 
	('zhao', 30, select dno from dept where dname = '计算机系');
注: 这种子查询只能返回一条数据才是有效的;
4, mysql方言(只在mysql中支持)
insert into 表名 set 字段1=值1, 字段2=值2, ...;
5, ignore关键字
忽略有冲突的数据，只插入数据库中不存在的数据;
如果没有ignore关键字，只要一条数据出错，其他所有数据都插不进去;
insert ignore into 表名 ...;
6, replace [into]
insert: 遇到有冲突的数据则报错;
insert ingore: 遇到有冲突的数据则跳过该数据;
replace: 遇到有冲突的数据则替换原数据;


>>更新数据
1, 单表更新
update [ignore] 表名 set 字段1=值1, 字段2=值2, ... 
	[where 条件1 ...][order by ...][limit ...];
执行顺序: update -> where -> order by -> limit -> set; (先查询后修改)
update tname set cname = value where condition;
update tname set cname1 = value1, cname2 = value2 where condition;
//根据其他条件修改
update student set age = age + 1 order by age desc limit 3;
2, 多表更新
update 表1 [left/right] join 表2 on 条件 set 字段1 = 值1, 字段2 = 值2, ...;
等价于
update 表1, 表2 set 字段1 = 值1, 字段2 = 值2, ... where 连接条件;
比较灵活，可单独修改连接的左表或右表，也可同时修改两张表;
update t1 join t2 on t1.c1 = t2.c2 set t1.c = value where condition;
update t1 join t2 on t1.c1 = t2.c2 set t2.c = value where condition;
update t1 join t2 on t1.c1 = t2.c2 set t1.c = value, t2.c = value where condition;

	
>>删除数据
1, 单表删除
delete [ignore] from 表名 
	[where 条件1 ...][order by ...][limit ...];
执行顺序: from -> where -> order by -> limit -> delete;
delete from tname where condition;
2, 多表删除
delete t1 from t1 join t2 on t1.c1 = t2.c2 where condition;
delete t2 from t1 join t2 on t1.c1 = t2.c2 where condition;
delete t1, t2 from t1 join t2 on t1.c1 = t2.c2 where condition;
注: 把要删除记录的表放在 delete 和 from 之间;
3, delete与truncate
delete from t: 属于DML, 在设置了(set autocommit=false)后是可以回滚的;
truncate [table] t: 属于DDL, DDL是不可以回滚的;
后者比前者速度更快, 但实际中一般使用delete, 因为更安全;


>>查询数据
1, 查询的完整格式
select [distinct] [tname.]cnames [as cnewnames]
	from tname where condition
	group by cname [having condition]
	order by cname [asc|desc]
	limit [offset], count;
举例:
select Dno, avg(Sage) from Student group by Dno having avg(Sage) < 30 order by Dno desc;
注: 进行分组查询时，查询的字段必须是分组的字段或者其他字段的聚合函数;
limit 10; //返回查询结果的前10条
limit 3, 10; //返回从第4条结果开始的10条记录
2, limit可用于后端实现查询分页显示;
select * from tname limit m, n; 等价于
select * from tname limit n offset m;
3, 查询中各子句的执行顺序
from -> where -> group by -> having -> select -> order by -> limit;
注: where一定要紧跟在from之后, 而且select中列的别名不能出现在where中, 因为where执行顺序靠前, 但列的别名可以出现在order by中;
4, where的注意事项
当检索大数据量时，优化where子句也能加快检索速度;
1)索引字段的条件应写在前面;
2)筛选掉记录最多的条件写在前面;
5, group by ... having
having是group by的条件，having里只能放分组字段或者聚合函数，
不过建议把分组字段的条件放到where中，where是在分组之前执行，提高效率;
6, 按多个字段分组
查询每个部门里，每种职位的人员数量与平均底薪:
select deptno, job, count(*), avg(sal) from t_emp group by deptno, job order by deptno;
7, with rollup //汇总
select deptno, job, count(*), sum(sal), avg(sal), max(sal), min(sal) 
	from t_emp group by deptno, job with rollup;
对分组的结果进行汇总;
如果按一个字段分组，则汇总成一条最终的结果;
如果按两个字段分组，则按第一个分组字段的每个值进行汇总;
8, group_concat()
把非分组字段的所有值拼接成一个字符串，让它可以出现在select中;
查询每个部门内底薪超过2000元的人数和员工姓名:
select deptno, group_concat(ename), count(*) from t_emp where sal >= 2000 
	group by deptno;


>>索引
1, 建表时创建索引
create table student(
	id int unsigned primary key auto_increment,
	name varchar(20) not null,
	age tinyint unsigned,
	index id_name (name) //在name字段上创建索引
);
2, 表已存在时添加索引
alter table student add index [id_name] (name);
create index [id_name] on student(name);
3, 查看索引
show index from student;
4, 删除索引
drop index id_name on student;
5, 索引的使用原则
数据量很大，而且经常被查询的数据表可以设置索引;
索引只添加在经常被用作检索条件的字段上;
不要在大字段上创建索引;
注: 索引默认采用btree来组织;
索引对数据的查询很重要，但增加写数据的效率，所以对于写操作比较多的场合，索引不能太多;


>>比较运算符
1, 基本比较运算符
>, >=, <, <=, =, !=;
2, in
where dept in ('maths', 'computer', 'english');
3, is [not] null 
where score is null;
4, between and
where score between 60 and 80;
5, like
where name like 'a%';
6, regexp
where name regexp '^[a-zA-Z]{4}$';
where name regexp '^[\\u4e00-\\u9fa5]{2,4}$'; //查询汉字人名


>>逻辑运算符
1, and //且
2, or //或
3, not //非
where not expression;
4, xor //异或


>>子查询
子查询可以写在select、from、where子句中，分别称为select子查询、from子查询、where子查询;
子查询也可以出现在having子句中;
1)出现在其他sql语句内的select子句, 叫子查询;
用于where中的比较时，子查询返回一条结果可以用于比较运算符，返回多条结果则必须用[not] in;
select * from teacher where Salary > (select avg(Salary) from teacher);
select * from course where Cno in (select Cno from SC where Sno = '1001');
2)用于创建表或插入数据
create table tname(cnames ctypes) select ...;
insert into tname(cnames) select ...;
3)出现在from后，这样的子查询的结果作为临时表，必须起一个别名;
注: 推荐使用from子查询，特别不推荐使用select子查询和where子查询;
select子查询和where子查询都是相关子查询，效率非常低，而from子查询不是相关子查询，只执行一次，效率高;


>>in, all, any, exists
这些都是where子查询的语法，实际工作中应该改为连接来实现;
1, all, any
用来处理多行结果集的条件判断;
查询比FORD和MARTIN底薪都高的员工信息:
select ename from t_emp where sal > all(
	select sal from t_emp where ename in ('FORD', 'MARTIN')
	);
2, exists
where子句是exists查询;
查询工资等级是3级或4级的员工信息:
select eno, ename, sal from t_emp where exists(
	select grade from t_salgrade where sal between losal and hisal and grade in (3, 4)
	);

	
>>连接
1)内连接
select * from student t1 [inner] join dept t2 on t1.Dno = t2.Dno;
等价于
select * from student t1 join dept t2 where t1.Dno = t2.Dno;
等价于
select * from student t1, dept t2 where t1.Dno = t2.Dno;
2)左外连接
select * from student t1 left [outer] join dept t2 on t1.Dno = t2.Dno;
3)右外连接
select * from student t1 right [outer] join dept t2 on t1.Dno = t2.Dno;
4)全连接
mysql不支持全连接(full join)，可合并左外连接与右外连接的结果得到:
select * from student t1 left [outer] join dept t2 on t1.Dno = t2.Dno
union (all)
select * from student t1 right [outer] join dept t2 on t1.Dno = t2.Dno;
5)交叉连接(笛卡尔积)
select * from student t1 cross join dept t2; 等价于
select * from student t1, dept t2;
注: 内连接中，查询条件写在on子句与where子句里的效果相同，但在外连接中，条件写在where子句里，
不符合条件的记录会被过滤掉，而不是保留下来;
举例：
选择同时在t1表中和t2表中的人:
select * from t1 join t2 on t1.name = t2.name;
选择在t1表中但不在t2表中的人的记录：
select t1.* from t1 left join t2 on t1.name = t2.name where t2.name is null;
选择在t2表中但不在t1表中的人的记录：
select t2.* from t1 right join t1 on t1.name = t2.name where t1.name is null;
6)连接的分类
可以从不同角度对连接进行分类, 如
按连接条件, 分为等值连接与非等值连接;
按连接源, 分为自连接与非自连接;
按是否包含null值的行, 分为内连接、外连接(左连接、右连接、全连接)等;
7)等值连接的另一种写法: 自然连接
select * from t1 natural join t2 using c;  //c为t1和t2的同名字段


>>连接举例
示例用到以下三张表:
t_emp(empno, ename, job, mgr, hiredate, sal, comm, deptno); //员工(编号，姓名，职位，上司编号，入职日期，工资，绩效，部门编号)
t_dept(deptno, dname, loc); //部门(编号，名称，地点)
t_salgrade(grade, losal, hisal); //工资等级(等级，最低工资，最高工资)
1, 连接条件不一定是关联字段的相等关系，也可以是其他关系，如
查询每个员工的工号、姓名、部门名称、底薪、职位、工资等级:
select e.empno, e.ename, d.dname, e.sal, e.job, s.grade from t_emp e
	join t_dept d on e.deptno = d.deptno 
	join t_salgrade s on e.sal between s.losal and s.hisal;
2, 查询底薪超过公司平均底薪的员工信息:
1)用连接实现, from子句里的子查询
select e1.eno, e1.ename, e1.job, e1.sal from t_emp e1 
	join (select avg(sal) avgsal from t_emp) e2 on e1.sal > e2.avgsal;
2)用子查询实现(不推荐), where子句里的子查询
select e.eno, e.ename, e.job, e.sal from t_emp e where e.sal >= 
	(select avg(sal) from t_emp);
注: 方式2的子查询效率特别低，因为t_emp表有多少条记录，就要重复执行多少次子查询;
而方式1的连接，子查询只执行了一次，然后就用连接来实现，效率很高;
3, 查询每种职业的最高工资、最低工资、最高工资等级和最低工资等级:
select e.job, max(e.sal + ifnull(e.comm, 0)), min(e.sal + ifnull(e.comm, 0)), 
	max(s.grade), min(s.grade) from t_emp e 
	join t_salgrade s on (e.sal + ifnull(e.comm, 0)) between s.losal and s.hisal
	group by e.job;
注: (e.sal + ifnull(e.comm, 0)) 为基本工资加绩效，绩效可能为null, 所以要用ifnull()函数判断;
4, 查询每个底薪超过部门平均底薪的员工信息:
select e1.ename, e1.dno, e1.sal from t_emp e1 
	join (select dno, avg(sal) avgsal from t_emp group by dno) e2 on e1.dno = e2.dno 
	where e1.sal > e2.avgsal;
注: 这个查询的条件可以写在on里面，如 on e1.dno = e2.dno and e1.sal > e2.avgsal;
5, 查询每名员工的编号、姓名、部门、月薪、工资等级、工龄、上司编号、上司姓名、上司部门:
select e1.empno, e1.ename, d1.dname, e1.sal+ifnull(e1.comm,0), s.grade, floor(datediff(now(),e1.hiredate)),
	e2.empno, d2.dname, d2.dname from t_emp e1
	left join t_dept d1 on e1.deptno = d1.deptno
	left join t_salgrade s on e1.sal between s.losal and s.hisal 
	left join t_emp e2 on e1.mgr = e2.empno
	left join t_dept d2 on e2.deptno = d2.deptno;
注: 要用left join防止丢失数据;


>>mysql系统函数
1, 字符串函数
1)length() //获取字符串的长度
length('hello'); //5
2)substring() //字符串截取, substr()完全相同
substring('hello,world', 2, 3); //'ell', 索引从1开始
substring('hello,world',2); //'ello,world'
substring('hello,world', -2); //'ld'
3)left()/right() //从左或右边截取
left('hello,world', 4); //'hell'
right('hello,world', 4); //'orld'
4)replace() //字符串替换
replace('hello,world', 'o', '*'); //'hell*,w*rld'
5)upper()/lower() //转换为大小写
upper('Hello'); //'HELLO'
lower('Hello'); //'hello'
6)trim()/ltrim()/rtrim() //删除字符串前或后的空格
7)concat()/concat_ws() //连接
concat('a', 'b', 'c'); //'abc'
concat_ws('|', 'a', 'b', 'c'); //'a|b|c'
8)instr() //查找子串出现的位置，没找到则返回0
instr('hello world', 'o'); //5
instr('hello world', 'x'); //0
instr('hello world', 'll'); //3
9)insert() //插入/替换
insert('hello world', 1, 0, '**'); //'**hello world'
insert('hello world', 1, 1, '**'); //'**ello world'
insert('hello world', 1, 2, '**'); //'**llo world'
insert('hello world', 1, 2, ''); //'llo world'
10)lpad()/rpad() //填充字符
lpad('hello', 10, '*'); //'*****hello'
rpad('hello', 10, '*'); //'hello*****'
11)[not] like //模糊查询
select 'hello' like 'h%'; //1
举例: 将身份证号中的出生日期用*代替:
set @num = '340822201505051163';
select concat(rpad(substring(@num, 1, 6), 14, '*'), right(@num, 4));
12)regexp 或 rlike  //模式匹配
select * from user where username rlike '^a';
2, 数学函数
1)abs() //取绝对值
2)ceil() //向上取整
3)floor() //向下取整
4)round() //四舍五入, 可指定精度
round(3.14159); //3
round(3.14159, 2); //3.14
5)power() //幂运算
power(2, 3); //8
3, 日期时间函数
1)now(), curdate(), curtime() //当前日期时间、日期、时间
now(); //'2020-05-07 10:56:00'
curdate(); //'2020-05-07'
curtime(); //'10:56:00'
2)year()/month()/day()/week()/hour()/minute()/second()  //指定日期时间字段
等价于 
extract(year from now());
extract(hour from '2022/8/21');
3)date_format() //对日期时间进行格式化
date_format('2020-5-1', '%m/%d/%Y'); //'05/01/2020'
4)date_add() //对日期时间进行增减
date_add('2020-5-1', interval 2 year/month/week/day/hour/minute/second);
5)datediff() //计算两个日期相差的天数
datediff('2020-6-1', '2020-5-1'); //31
4, 信息函数
1)connection_id() //当前连接的ID
2)database() //当前打开的数据库
3)user() //当前用户
user(); //root@localhost
4)version() //数据库版本
5)last_insert_id() //最后一次插入的id
6)row_count() //上一次操作影响的行数
5, 聚合函数
1)count() //计数
2)sum() //求和
3)max() //最大值
4)min() //最小值
5)avg() //平均值
注: 聚合函数只能用于数据表的查询字段, 只能出现在select或者having中, 不能出现在where中;
count(*)与count(score)的区别:
前者统计表中所有数据条数，而count(score)不包括了score为null的数据;
注: 聚合函数都会自动忽略NULL值;
6, 加密函数
1)md5() //md5加密
2)sha() //sha加密
7, 条件函数
1)ifnull(表达式, 值)
如果表达式的为null, 则用第二个参数的值来替代;
2)if(表达式, 值1, 值2)
如果表达式的值为true, 则使用值1, 否则使用值2;
	
	
>>条件语句
1)类似于switch结构
case deptno
	when '100' then '研发部'
	when '101' then '运营部'
	when '102' then '财务部'
	else '市场部'
end
2)类似于if...else...if结构
case 
	when grade >= 90 then 'A'
	when grade >= 80 then 'B'
	when grade >= 60 then 'C'
	else 'D'
end

	
>>修改mysql默认分隔符
delimiter //


>>自定义函数
1, 不带参数
create function f1() returns varchar(30)
return date_format(now(), '%Y年%m月%d日 %H时%i分%s秒');
调用: select f1();
2, 带参数
create function f1(num1 int, num2 int) returns float(10, 2)
return (num1+num2)/2;
调用: select f1(1, 2);
3, 复合结构函数体
delimiter //
create function adduser(username) returns int unsigned 
begin
insert into test(username) values (username);
return last_insert_id();
end
//
delimiter ;
调用: select adduser('zhao');
注: 函数体由多条语句组成的话需要加 begin...end 结构;
4, 删除函数
drop function f1;


>>存储过程
1, 优点
sql引擎执行sql语句的流程: 语法分析->编译->执行;
存储过程只在第一次执行时进行语法分析和编译，然后保存了编译后的结果，后面直接执行，速度更快;
实现功能封装;
减少网络流量;
2, 不带参数的存储过程
create procedure sp1() select version();
调用: call sp1();
3, 带有in类型参数的存储过程
delimiter //
create procedure sp1(in val int unsigned)
begin
delete from user where id = val;
end
//
delimiter ;
调用: call sp1(3);
4, 带有in和out类型参数的存储过程
delimiter //
create procedure sp1(in val int, out num int)
begin
delete from user where id = val;
select count(id) from user into num;
end
//
delimiter ;
调用: call sp1(3, @n);
select @n;
5, 带有多个out类型参数的存储过程
delimiter //
create procedure sp1(in val int, out delNum int, out userNum int)
begin 
delete from user where age = val;
select row_count() into delNum;
select count(id) from user into userNum;
end
//
delimiter ;
调用: call sp1(3, @v1, @v2);
select @v1, @v2;
6, 删除存储过程
drop procedure sp1;
7, 存储过程与自定义函数的区别
存储过程一般针对数据表操作，而自定义函数一般封装其他用户操作；
存储过程可以返回多个值，而自定义函数只能返回一个值；
存储过程一般独立执行，而自定义函数往往作为其他sql语句的一部分;
注：
创建存储过程或自定义函数时需要通过delimiter语句修改定界符;
如果函数体或过程体有多个语句，需要包含在begin...end语句块中;
存储过程需要通过call来调用;


>>存储引擎
1, 定义
mysql用不同的技术将数据保存在内存中，就是存储引擎;
常用的存储引擎有MyISAM和InnoDB;
2, 存储引擎需要重点考虑的几个问题
1)并发控制
多个连接对记录进行修改时保证数据的一致性和完整性;
解决: 引入锁机制;
锁分为共享锁(读锁)与排他锁(写锁);
锁的粒度分为表锁与行锁;
2)事务机制
3)外键
保证数据一致性的策略;
4)索引
是对数据表中一列或多列的值进行排序的一种结构;
3, 各个存储引擎的特点
MyISAM可存储的数据量为256TB, 支持表锁, 适用于读操作比较多的情形;
InnoDB可存储的数据量为64TB, 支持事务、外键以及行锁, 适用于写操作比较多的情形;
4, 设置存储引擎
1)修改mysql的配置文件
default-storage-engine = InnoDB
2)创建数据表时指定
create table tname(
cnames ctypes
)engine=InnoDB default charset=utf8;
3)修改数据表的存储引擎
alter table tname engine = InnoDB;


>>事务机制
1, RDBMS = SQL语句 + 事务(ACID)
2, mysql有5种日志文件，其中undo日志和redo日志是与事务有关的,
执行SQL之前，先将数据文件拷贝到undo日志, 然后执行update/delete操作，将结果保存到redo日志,
如果提交事务，则将redo日志与数据文件同步，负责就将undo日志与数据文件同步;
3, 执行单条SQL语句时, mysql自动执行 开启事务->执行SQL->提交事务 的过程，而如果多条SQL作为一个整体，
则需要手动管理事务, 格式如下:
start transaction;
SQL语句
commit / rollback;
4, 事务的特性(ACID): 原子性，一致性，隔离性，持久性;
原子性: 一个事务中的所有操作要么全部完成，要么全部失败，事务执行后，不允许停留在中间某个状态;
一致性: 不管在任何给定的时间，并发事务有多少，事务必须保证运行结果的一致性;
隔离性: 事务不受其他并发事务的影响，在给定的时间内，该事务是数据库唯一运行的事务;
持久性；事务一旦提交，结果便是永久性的，即使发生宕机，依然可以依靠事务日志完成数据的持久化;
5, 事务的隔离级别
默认情况下mysql不允许事务之间相互读取临时数据, 但可以修改这种隔离级别;
1)四种隔离级别
read uncommitted //读取未提交数据
read committed //读取已提交数据
repeatable read //重复读取(mysql默认的隔离级别)
serializable //序列化
2)修改事务的隔离级别
案例: 买票业务，修改隔离级别为可以读取其他事务未提交的数据
set session transaction isolation level read uncommitted;
案例: 银行转账业务, 隔离级别必须为只能读取其他事务已提交的数据
set session transaction isolation level read committed;
案例: 购买商品过程中商家涨价, 隔离级别设置为可重复读;
底层实现很简单，只读取自己的undo日志文件;
set session transaction isolation level repeatable read;
案例: 序列化是让事务逐一执行，可以避免读错数据的情况，但牺牲了数据库的并发性，一般很少使用;
set session transaction isolation level serializable;
注: session代表只对当前查询面板有效;
注: 隔离级别的不同也会导致所谓的脏读、幻读、不可重复读;


>>数据的导入、导出与备份
1, 导出与备份的区别
数据导出，导出的纯粹是业务数据;
数据备份，备份的是数据文件、日志文件、索引文件等等;
2, 导入
1)命令行导入: 与命令行导出不同，命令行导入必须先登录进入sql数据库
mysql > use demo;
mysql > source D:/backup.sql;
2)图形界面导入: 
右键数据库，运行SQL文件;
3, 导出
可导出为sql文件或者文本文档，数据量小可以导出为sql文件，数据量大则可选择导出为文本文档;
1)命令行导出:
mysqldump -uroot -p 数据库名(imooc) > 路径(E:/demo.sql)
2)图形界面导出:
右键数据库，转储SQL文件;
注: 如果数据量很大，则应该先导出表结构，然后将数据导出为文本文档, 速度非常快, 步骤如下: 
右键数据库或表，转储SQL文件(仅结构), 导出表结构(t_emp.sql);
再右键表, 导出向导, 导出数据成文本文件(t_emp.txt);
导入时，则先导入表结构，再按导入向导导入数据文件;
4, 备份
全量备份(第一次)->增量备份1->增量备份2->....
数据的备份需要在linux环境，并且没有图形用户界面，具体操作另行百度;


>>配置文件my.ini
一些主要的配置项如下:
[client] #图形界面客户端配置
port=3306
[mysql] #命令行界面配置
no-beep
[mysqld] #数据库配置
port=3306 #端口号
datadir=C:/ProgramData/MySQL/MySQL Server 8.0\Data #数据目录
default_authentication_plugin=mysql_native_password #密码认证插件
default-storage-engine=INNODB #默认存储引擎
sql-mode="STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION" #开启严格模式
log-output=FILE #用文件记录日志
general-log=0 #关闭日志输出
general_log_file="DESKTOP-D5J8UKO.log" #日志文件名称
slow-query-log=1 #开启慢查询日志
slow_query_log_file="DESKTOP-D5J8UKO-slow.log" #慢查询日志文件名称
long_query_time=10 #大于多少秒的执行SQL被记录在慢查询日志
log-error="DESKTOP-D5J8UKO.err" #错误日志名称
log-bin="DESKTOP-D5J8UKO-bin" #
server-id=1 #数据库ID(数据库集群使用)
lower_case_table_names=1 #把表名转换成小写
secure-file-priv="C:/ProgramData/MySQL/MySQL Server 8.0/Uploads" #导入导出数据的目录地址
max_connections=151 #最大连接数
thread_cache_size=10 #线程数量

	
>>数据库设计
1, 数据库设计的目标
较少的存储空间、高效的数据访问、减少数据冗余、易于维护;
2, 数据库设计的步骤
需求分析、逻辑设计、物理设计、维护优化;
3, 需求分析
确定实体以及实体的属性，确定实体间的联系以及联系的属性。实体和联系都是关系表;
实体间的联系有一对一、一对多、多对多的联系，一对一和一对多的联系一般作为属性包含在
实体的关系表中，而多对多的联系要用独立的关系表来表示；
将多对多的联系转化为两个一对多的联系，如学生-课程之间多对多的联系，通过考试这个联系表，
转化为学生-考试和课程-考试这两个一对多的联系；
4, 逻辑设计
1)将需求分析的结果转化为逻辑模型，结果用E-R图来表示，与具体的DBMS无关；
矩形表示实体，椭圆表示属性，菱形表示联系，线段用来连接实体与属性、实体与联系，
联系的m:n的关系在线段上标出，主键属性在下面加下划线;
2)逻辑模型设计的要求
符合第一范式1NF、第二范式2NF、第三范式3NF、BC范式BCNF，不规范的逻辑设计会导致
数据冗余以及插入、更新、删除异常;
3)第一范式
表中的属性不可再分；
不符合1NF的可将属性拆分，使之符合1NF；
4)第二范式
在满足1NF的基础上，不存在某个非主属性对候选码的部分函数依赖;
单一主键的表都满足2NF；
某些复合主键的表不满足2NF，可将其拆分为两个实体表[以及一个联系表]，使之满足2NF；
5)第三范式
在满足2NF的基础上，不存在某个非主属性对候选码的传递函数依赖；
不满足3NF的表，可将其拆分为两个实体表[和一个联系表]，使之满足3NF；
6)BC范式
在满足3NF的基础上，不存在候选码之间的传递函数依赖；
不满足BCNF一般是因为表中存在多个联系，可将其拆分为多个单一联系的表，使之满足BCNF；
5, 物理设计
数据库设计的具体物理实现；
包括选择具体的DBMS，选取合适的存储引擎，确定数据库、表、字段的命名，
确定字段的数据类型，以及建立索引等；
在物理设计阶段，有时会反范式化设计，即为了提高访问速度，在表中增加一到多个冗余字段；
6, 维护和优化
维护数据字典、维护索引、维护表结构、对表进行垂直拆分和水平拆分；
1)表的垂直拆分和水平拆分
垂直拆分: 如果表的字段太多，可将其分为两个表，如t(cid, c2, c3, c4, c5, c6, c7)拆分为
t1(cid, t2, t3, t4)和t2(cid, t5, t6, t7);
水平拆分: 如果表的数据量太大，可按照主键的哈希值，将其分为多个表;


>>sql查询案例
1, 删除重复记录
商品表: goods(id, name, price), 要删除名称相同的商品，只保留价格最高的一个;
方法一:
delete t1 from goods t1 inner join goods t2 on t1.name = t2.name where t1.price < t2.price;
方法二:
delete t1 from goods t1 inner join 
	(select name, max(price) maxprice from goods group by name having count(*) > 1) t2 
	on t1.name = t2.name where t1.price < t2.maxprice;
2, 无限级分类
区域表: area(id, name, pid), 其中pid是参照id的外键;
1)列出所有区域和子区域
select p.id, p.name, s.name from area p left join area s on p.id = s.pid;
2)列出所有区域和父区域
select s.id, s.name, p.name from area s left join area p on s.pid = p.id;
3)列出所有区域以及子区域的个数
select p.id, p.name, count(s.name) from area p left join area s on p.id = s.pid 
	group by p.id, p.name;
3, 订单汇总
用户表(用户ID, 姓名, 电话, 地址, 邮箱),
订单表(订单ID, 用户ID, 下单时间, 支付类型, 订单状态),
商品表(商品ID, 名称, 描述, 过期时间),
订单商品表(订单ID, 商品ID, 商品数量, 商品价格);
查询每个用户的订单信息：
select b.用户名, b.电话, b.地址, a.订单ID, sum(c.商品价格*c.商品数量) as 订单价格 
from 订单表 a 
join 用户表 b on a.用户ID = b.用户ID 
join 订单商品表 c on c.订单ID = b.订单ID
group by b.用户表, b.电话, b.地址, a.订单ID;
4, 查询每个人打怪数量最多的日期
打怪表: kills(id, name, datestr, times);
方法一(不推荐):
select t1.name, t1.datestr, t1.times from kills t1 join 
	(select name, max(times) mtimes from times group by name) t2 
	on t1.name = t2.name where t1.times = t2.mtimes;
方法二(最优):
select t1.name, t1.datestr, t1.times from kills t1 join kills t2 on t1.sid = t2.sid 
	group by t1.name, t1.datestr, t1.times having t1.times = max(t2.times);
注: 聚合函数只能出现在having中，不能出现在where中;
5, 如何查询每个人打怪数量排名前三的日期
？
6, 将月收入前三名的员工底薪减100元:
update t_emp set sal = sal - 100 order by sal + ifnull(comm, 0) desc limit 3;
7, 比如要给主键加1, 就必须先降序排列再修改，否则会引发主键冲突, 如
update student set sno = sno + 1 order by sno desc;
8, 把ALLEN调往RESEARCH部门, 职务调整为ANALYST: 
update t_emp e join t_dept d 
	set e.dno = d.dno, e.job = 'ANALYST'
	where e.ename = 'ALLEN' and d.dname = 'RESEARCH';
注: 此例不能写连接条件，否则修改不了任何数据，因为查不到结果;
9, 把底薪低于公司平均底薪的员工，底薪增加150元:
update t_emp e1 join (select avg(sal) avgsal from t_emp) e2 on e1.sal < e2.avgsal 
	set e1.sal = e1.sal + 150;
10, 使用外连接的更新: 
把没有部门的员工，或者SALES部门低于2000元底薪的员工，都调往20部门: 
update t_emp e left join t_dept d on e.dno = d.dno 
	set e.dno = 20
	where e.dno is null or (d.dname = 'SALES' and e.sal < 2000);
11, 删除SALES部门的员工，以及没有部门的员工:
delete e from t_emp e left join t_dept d on e.dno = d.dno 
	where d.dname = 'SALES' or e.dno is null;
12, 查询每个部门中, 1982年以后入职的员工超过2个人的部门编号。
select deptno from t_emp where hiredate >= '1982-01-01' 
	group by deptno having count(*) >= 2 
	order by deptno;
13, 查询每个部门的名称和部门的人数:
select d.dname, count(e.ename) from t_dept d 
	left join t_emp e on d.deptno = e.deptno 
	group by d.dname;
14, 中秋节公司发放礼品，SALES部门发放礼品A，其余部门发放礼品B，打印每名员工获得的礼品:
select e.ename, d.dname, if(d.dname='SALES', 'A', 'B') gift 
	from t_emp e left join t_dept d on e.dno = d.dno;	
15, 公司组织旅游，SALES部门去P1地点，ACCOUNTING部门去P2地点，RESEARCH部门去P3地点；
select e.ename, d.dname, 
	case 
		when d.dname = 'SALES' then 'P1'
		when d.dname = 'ACCOUNTING' then 'P2'
		when d.dname = 'RESEARCH' then 'P3'
	end as place
from t_emp e join t_dept d on e.deptno = d.deptno;
16, 公司决定为员工调整基本工资，具体调整方案如下:
1)SALES部门中工龄超过20年，涨幅10%;
2)SALES部门中工龄不满20年，涨幅5%;
3)ACCOUNTING部门，+300元;
4)RESEARCH部门里低于部门平均底薪，+200元;
5)没有部门的员工，+100元;
update t_emp e left join t_dept d on e.deptno = d.deptno 
	left join (select deptno, avg(sal) avgsal from t_emp group by deptno) t on e.deptno = t.deptno
	set e.sal = (
		case 
			when d.dname='SALES' and datediff(now(), e.hiredate)/365>=20 then e.sal*1.1
			when d.dname='SALES' and datediff(now(), e.hiredate)/365<20 then e.sal*1.05
			when d.dname='ACCOUNTING' then e.sal+300
			when d.dname='RESEARCH' and e.sal < t.avgsal then e.sal+200
			when d.deptno is null then e.sal+100
			else e.sal  //默认情况不能漏掉, 否则值被置为NULL
		end
	);
17, 查询工资高于本部门平均工资的员工信息:
1)方式一(使用连接):
select e1.ename, e1.salary, e1.deptno from employee e1 
	join (select deptno, avg(salary) avg from employee group by deptno) e2
	on e1.deptno = e2.deptno and e1.salary > e2.avg;
2)方式二(使用相关子查询, 不推荐):
select e1.ename, e1.salary, e1.deptno from employee e1 
	where salary > 
	(select avg(salary) from employee where deptno = e1.depntno);
注: 使用连接的方式, 比使用相关子查询的方式快一个数量级:
18, 查询部门平均工资最低的部门信息:
首先查询平均工资最低的部门号:
select eno, avg(salary) avg_sal from employee group by dno order by avg_sal limit 1;
然后将上面的查询结果作为临时表, 与部门表进行连接查询:
select e.eno, e.avg_sal, d.* 
	from (
		select eno, avg(salary) avg_sal from employee group by dno order by avg_sal limit 0
	) e
	join department d on e.dno = d.dno;

















	
