>>nodejs的作用
1, 开发服务端应用
2, 开发工具类应用(Webpack、Vite、Babel等)
3, 开发桌面端应用(nodejs -> electron -> 各种桌面端程序)


>>前端js = ECMAScript + Web API, 其中Web API = DOM + BOM + ...;
nodejs = ECMAScript + Node API, 其中Node API = fs + path + url + ...;
nodejs不能使用DOM与BOM;


>>缓存: Buffer
缓存(字节序列)的操作;
1, Buffer.alloc(100);
内容全为00;
2, Buffer.allocUnsafe(100);
与前者的区别是, 该方法不对内存空间进行清空, 可能含有旧数据, 优点是快速;
3, Buffer.from('hello');
4, Buffer转为字符串
const buf = Buffer.from([105, 108, 111, 112]);
const s = buf.toString();
注: Buffer每个英文字符占1个字节, 中文占3个字节;


>>文件操作: fs
1, 导入fs模块
const fs = require('fs');
2, 文件写入
1)写入
fs.writeFile('f1.txt', data, [option], err => {
	if(err) {
		console.warn('写入失败');
		return;
	}
});
注: 如果文件不存在, 则会创建文件;
第三个参数可选, 是一个对象, 如{flag: 'a'}表示追加写入;
fs.writeFileSync('f1.txt', data)为同步写入, 使用不多;
2)追加写入
fs.appendFile() / fs.appendFileSync()
参数与writeFile() / writeFileSync() 完全相同;
3)流式写入
const ws = fs.createWriteStream('f1.txt');
ws.write('11');
ws.write('22');
ws.close();
流式写入可以减少打开与关闭文件的次数, 适用于大文件写入或频繁写入的场景;
3, 文件读取
1)异步读取
fs.readFile('f1.txt', (err, data) => {
	if(err) {
		console.warn('读取失败');
		return
	}
	console.log(data.toString());
});
注: 读取的内容是一个Buffer, 使用toString()将其转换为字符串;
2)同步读取
let data = fs.readFileSync('f1.txt');
let s = data.toString();
3)流式读取
const rs = fs.createReadStream('f1.txt');
fs.on('data', chunk => {
	console.log(chunk)
});
//可选
fs.on('end', () => {
	console.log('读取结束')
});
4, 案例: 文件复制
//采用流式读取与写入, 占用内存空间最小
fs.on('data', chunk => {
	fs.write('f2.txt');
})
5, 文件重命名或移动
fs.rename('f1.txt', 'f2.txt', err => {});
6, 文件删除
fs.unlink('f1.txt', err => {});
fs.rm('f1.txt', err => {});  //等价
7, 文件夹操作
1)创建文件夹
//创建单个
fs.mkdir('cao', err => {});
//递归创建
fs.mkdir('a/b/c', {recursive: true}, err => {}); 
2)读取文件夹
fs.readdir('cao', (err, files) => {
	//files是数组
})
3)删除文件夹
//删除单个
fs.rmdir('cao', err => {})
//递归删除
fs.rm('a/b/c', {recursive: true}, err => {})
8, 查看资源的状态
rs.stat('f1.txt', (err, data) => {
	//data为包含各种状态属性的对象
})
9, __dirname
表示源程序所在目录的绝对路径, 不会随着在哪执行程序而改变;
10, __filename
当前文件的绝对路径;


>>路径: path
const path = require('path');
1, 获取操作系统的路径分隔符
path.sep
2, 拼接规范的绝对路径
path.resolve(__dirname, './test.html')
3, 解析路径
path.parse(__filename)
4, 路径的目录名
path.dirname
5, 路径的文件名
path.basename
6, 路径的扩展名
path.extname


>>网络: http
1, 创建服务
//导入http模块
const http = require('http')
//创建服务对象
const server = http.createServer((request, response) => {
	response.end('hello nodejs server')  //设置响应体
})
//监听端口, 启动服务
server.listen(9000, () => {
	console.log('服务已经启动....')
})
注: 解决中文乱码的方法是设置响应头:
response.setHeader('content-type', 'text/html;charset=utf-8');
2, 获取请求信息
1)请求头信息
request.headers  //包含所有请求头的对象
request.method   //请求方法
request.ip       //请求端ip
request.url		 //url路径, 只包含路径与查询字符串, 如 /search?name=zhao&age=30
2)解析url
require('url').parse(request.url)  或者
new URL(request.url, 'http://localhost:9000')
返回的结果都是包含url各字段的对象;
3, 设置响应信息
1)设置响应状态码
response.statusCode = 200 
2)设置响应头
response.setHeader('key', 'value') 
3)设置响应体
response.write('hello')
response.write('world')
response.end()
注: 可以有多个write()方法, 有且只能有一个end()方法并放在最后;


>>模块化
nodejs使用的 module.exports/require 是commonJS的模块系统, 与ES6的 import/export 模块系统不同;
1, 导出
//a.js
function f1() {}
function f2() {}
module.exports = {
	f1,
	f2
}
或者
exports.f1 = f1
exports.f2 = f2
注: exports = module.exports = {}, 但是因为require()使用的是module.exports的值, 
所以exports不能用来导出基本类型的数据;
2, 导入 
1)导入js
const a = require('./a.js')
a.f1()
a.f2()
2)导入json
//b.json
{
	"name": "zhao",
	"age": 32
}
//test.js
const b = require('./b.json')
b.name
3)导入文件夹
首先检测文件夹下package.json文件中main属性对应的文件, 如果文件存在则导入, 不存在则报错;
如果不存在package.json文件或者不存在main属性, 则会导入文件夹下的index.js或index.json文件;
如果以上两者都不存在, 则报错;


>>包管理工具: npm
1, 初始化
npm init [-y]
注: 包名默认是文件夹名称, 不能使用大写和中文;
2, 下载安装包
npm i/install jquery 
npm i [-S | -D] jquery  //-S(默认)是保存为生产依赖, -D为开发依赖
npm i [-g] jquery  //-g为全局安装, 默认是安装到运行命令所在的目录
注: windows默认不允许npm全局命令执行脚本文件, 所以需要修改windows的执行策略:
以管理员身份打开powershell命令行 -> 键入命令set-ExecutionPolicy remoteSigned;
3, 安装包里的所有依赖
npm i/install 
会依据package.json和package-lock.json的依赖声明安装项目依赖;
4, 安装指定版本的包
npm i jquery@1.11.2
5, 删除依赖包
npm remove jquery  //局部删除
npm remove -g jquery  //全局删除
6, 命令的别名
可以在package.json的"scripts"属性中配置命令的别名, 如 
"scripts": {
	"start": "node test.js",
	"build": "react-script build"
}
然后通过 npm run 来运行每个命令;
注: start这个命令比较特别, 使用时可以省略run, 如 npm start;
npm run 与require()函数一样, 有自动向上查找的特性;
7, 比npm速度更快的包管理工具: yarn 
1)安装yarn
npm i -g yarn
2)初始化
yarn init / yarn init -y 
3)安装包 
yarn add jquery  //生产依赖
yarn add jquery --dev  //开发依赖
yarn global add jquery  //全局安装
4)删除包
yarn remove jquery  //局部删除 
yarn global remove jquery  //全局删除 
5)安装项目依赖
yarn 
6)运行命令别名
yarn 别名  //不需要添加run
8, npm和yarn的区分
npm管理的项目的锁文件是package-lock.json, 而yarn的锁文件是yarn.json;
npm和yarn最好不要混用;


>>express框架
1, 搭建步骤
1)创建文件夹、初始化为npm包、下载express
npm init 
npm i express
2)使用express
//导入express
const express = require('express')
//创建应用对象
const app = express();
//创建路由
app.get('/home', (req, res) => {
	res.end('home by get method')
})
app.post('/login', (req, res) => {
	res.end('login by post method')
})
//监听端口并启动服务
app.listen(9000, () => {
	console.log('start server....')
})
注: 也可以通过Router对象来创建路由规则:
const router = express.Router()
router.get('/home', (req, res) => {})
router.post('/login', (req, res) => {})
app.use(router)
2, 路由
1)路由 = 请求方法 + 路径 + 回调函数
2)express使用路由
app.<method>(path, callback)
3)获取路由参数
路由参数是指路径中的参数, 如http://localhost:9000/123.html中的123, 可以使用占位符 :id 来获取,
app.get('/:id.html', (req, res) => {
	//req.params.id
})
3, 获取请求头
1)使用与原生http相同的方式
req.method
req.url
req.ip
req.headers
2)express独有的方式
req.path   //获取路径
req.query  //获取查询字符串, 由各查询字段组成的对象
req.get('host')  //获取指定的请求头
4, 设置响应 
1)使用与原生http相同的方式
res.statusCode = 404
res.setHeader('key', 'value')
res.write('响应体')
res.end('xxx')
2)express独有的方式
res.status(500)  //设置响应状态码 
res.set('key', 'value')   //设置响应头 
res.send('响应体')  //设置响应体
注: send()方法会自动设置响应头的content-type为utf-8编码;
//连贯操作
res.status(404).set('key', 'value').send('响应体')
3)其他响应
res.redirect('http://abc.com')  //重定向
res.download('./package.json')   //下载响应
res.json(jsonObj)  //发送json
res.sendFile(__dirname + '/home.html')  //响应文件内容
5, 中间件
1)中间件本质是一个回调函数, 用来对请求进行先行处理, 并将请求继续往后传;
按类型分为全局中间件和路由中间件;
2)全局中间件
针对所有请求的回调函数;
//定义中间件函数
function fn(req, res,next) {
	const {url, ip} = req
	require('fs').appendFileSync('./log.txt', `${url} ${ip}`)
	next()  //*调用next()将请求继续往后传
}
//使用中间件函数
app.use(fn)
3)路由中间件
针对特定路由的回调函数;
//定义中间件函数 
function fn(req, res, next) {
	if(req.query.code === '520') {
		next()
	} else {
		res.send('参数错误')
	}
}
//使用中间件函数 
app.get('/admin', fn, (req, res) => {
	....
})
注: 与全局中间件不同, 路由中间件是把中间件函数放到对应的路由处理函数中;
4)静态资源中间件
app.use(express.static('./public'))  //静态资源放在/public目录
注: 如果请求的url不带任何路径, 则默认打开/public/index.html;
路由响应动态资源, 静态资源中间件响应静态资源;
6, 获取请求体
express可以使用body-parser包来处理请求体;
1)安装并导入
npm i body-parser 
const bodyParser = require('body-parser')
2)获取中间件函数
//处理querystring格式的请求体
const urlParser = bodyParser.urlencoded({extended: false})
//处理json格式的请求体
const jsonParser = bodyParser.json()
3)设置路由中间件, 然后使用req.body来获取请求体数据
app.post('/login', urlParser, (req, res) => {
	//req.body
	res.send('获取请求体数据')
})
7, 防盗链
通过在中间件函数中, 对请求头中的referer信息进行判断;
app.use((req, res, next) => {
	const referer = req.get('referer')
	//todo 
	next()
)
8, 文件上传
1)前端
<form method="post" action="./handle.js" enctype="multipart/form-data">
	Username: <input type="text" name="username">
	Photo: <input type="file" name="photo">
	<button>Submit</button>
</form>
注: 上传文件必须设置表单属性: enctype="multipart/form-data";
2)后端: 使用formidable包
npm i formidable
//具体使用AI


>>express-generator: 自动搭建express框架的工具
1)自动创建项目并导入依赖包
express -e express-generator  //使用ejs模板引擎
或者 npx express-generator
npm i
2)启动 
npm start
3)在routes文件夹里添加路由, 在views文件夹里添加视图文件;


>>模板引擎: ejs
1, 安装与引用
npm i ejs [--save]
const ejs = require('ejs')
2, 使用 
//test.html
<div>姓名: <%= name %></div>
<div>年龄: <%= age %></div>
//nodejs 
const name = 'zhao'
const age = 32
const tpl = fs.readFileSync('./test.html').toString()
const rs = ejs.render(tpl, {name, age})
3, for循环(列表渲染)
<ul>
	<% datas.forEach(v => { %>
	<li><%= v %></li>
	<% }) %>
</ul>
注: <% %>是ejs的标记, 里面可以写js;
4, if条件(条件渲染)
<% if(isLogin){ %>
	<h2>Welcome Back</h2>
<% }else{ %>
	<h2>Login</h2>
<% } %>
5, 在express中使用ejs
1)设置视图引擎
app.set('view engine', 'ejs') 
2)指定视图文件夹
app.set('views', './myViews')
3)创建视图文件 ./myViews/home.ejs   //摸板文件的后缀是 ejs
<h2>Welcome <%= name %></h2>
4)渲染视图并传递数据 nodejs 
app.get('/', (req,res) => {
	res.render('home', {name: '糖饼'})
})


>>会话控制
1, cookie
1)cookie是保存在浏览器的数据, cookie是按照域名划分的;
2)cookie的流程
服务端校验账户和密码通过后, 在响应头中以 "set-cookie:name=zhao" 发送给浏览器;
浏览器后续发送请求时, 在请求头中以 "cookie:name=zhao" 发送给服务器进行校验;
3)express中使用cookie
//创建cookie 
res.cookie('name', 'zhao', {maxAge: 60*1000})
注: cookie默认在浏览器关闭时销毁
//删除cookie
res.clearCookie('name')
注: 一般在退出登录时销毁session
//获取cookie: 使用cookie-parse包
app.use(cookieParse())
req.cookies.name
2, session
1)session是保存在服务器的数据;
2)session的流程
服务端检验账户和密码后, 创建session信息, 然后将session_id的值通过cookie发送给浏览器;
浏览器后续发送请求时, 就会携带该session_id到服务端进行校验;
3)express中使用session
//创建session: 使用express-session包
app.use(session({
	name: 'sid',   //使用sid作为cookie字段
	resave: true,  //每次请求时重新保存session
	cookie: {
		httpOnly: true,  //前端js无法操作cookie, 只能通过http传输使用
		maxAge: 60*1000
	}
}))
req.session.username = 'zhao'
req.session.password = '123'
注: sid会自动生成并发送给浏览器;
//删除session
req.session.destroy()
//读取session
req.session.username
3, token
1)token是服务端生成并返回给客户端的加密字符串, token的流程同cookie, 区别是: 
服务端将token放在响应体中发给客户端, 后续客户端必须手动将token添加到请求头中发给服务端;
token是加密的, 比cookie更安全;
2)jwt: (json web token)基于token的身份认证
npm i jsonwebtoken
const jwt = require('jsonwebtoken')  
//创建token
const token = jwt.sign({  //三个参数: 用户数据、加密字符串、配置对象
	username: 'zhao'
}, 'aabbccdd', {
	expiresIn: 60
})
//校验token
jwt.verify(token, 'aabbccdd', (err, data) => {
	//....
})












