>>数据类型
1, 整型 int
2, 浮点型 float / double
3, 布尔型 bool
4, 字符串 string
5, null
6, 数组 
索引数组、关联数组
7, 对象
8, 资源类型


>>基础知识点
1, 变量判断相关函数
1)isset()
变量是否已声明且不为null;
echo isset($name) : $name ? 'zhao';
echo $name ?? 'zhao';  //等价
2)empty()
变量是否为空, 以下变量被认定为空: null、''、0、false、[];
3)is_null()
判断变量是否为null;
4)unset()
销毁变量；
5)gettype()
获取变量的类型;
6)is_string(), is_int()/is_integer(), is_float(), is_bool(), 
is_numeric(), is_array(), is_object(), is_null(), is_resource(),
is_scalar(), is_callable(), is_iterable()
判断变量是否为相应的类型;
7)print_r()
打印数组或对象变量;
2, <=>
组合比较符, 按<、=、>分别返回-1, 0, 1;
3, 特殊的变量写法
$a = 'age';
$age = 32;
echo $$a;  //32
4, 常量
define('NATION', 'China');
const NATION = 'China';  //等价
echo NATION;
注: 常量默认是全局的;
const可以在类中使用, 而define()不可以;


>>超级全局变量
1, $GLOBALS
存储所有全局变量的数组
2, $_SERVER
包含服务器环境信息和请求信息
3, $_GET
存储通过GET请求传递到当前脚本的变量
4, $_POST
存储通过POST请求传递到当前脚本的变量
5, $_REQUEST
包含$_GET, $_POST, $_COOKIE的组合数据
6, $_COOKIE 
存储通过Cookies传递到当前脚本的变量
7, $_SESSION
存储会话期间的用户数据
8, $_FILES
存储通过HTML表单上传的文件信息


>>魔术常量
__NAMESPACE__: 当前命名空间
__FILE__: 当前文件名, 包含完整路径
__LINE__: 当前行号
__DIR__: 当前目录
__FUNCTION__: 当前函数名, 用在函数中
__CLASS__: 当前类名
__METHOD__: 当前方法名
__TRAIT__: 当前trait名


>>字符串相关的函数
1, 字符串长度
strlen($s);  //按字节数计算, 一个中文算3个字符
mb_strlen($s, 'utf-8');  //按字符数
2, 字符串拼接
$s1.$s2;
implode('*', $arr);  //将数组拼接成字符串
3, 字符串查找
查找子串第一次出现的位置, 可选的第三个参数表示起始查找的位置
strpos($s, 'o', [n]);
stripos(); //不区分大小写
strrpos($s, 'o', [n]);  //从后往前查找
strripos($ss, 'o', [n]);  //不区分大小写的从后往前查找
strstr($s1, $s2);  //返回$s2出现的位置到字符串末尾的部分
4, 字符串替换
str_replace('o', '*', 'hello world');
str_ireplace();  //不区分大小写
5, 字符串截取
substr($s, $start, $len);
mb_substr($s, $start, $len);  //支持中文的按字符截取
6, 大小写转换
strtolower($s);
strtoupper($s);
ucfirst($s);  //将字符串的第一个字符转换为大写
ucwords($s);  //将字符串中每个单词的首字母大写
7, 字符串分割
explode(',', $s);  //将字符串分割成数组
8, 去除字符串首尾的空白字符
trim($s);
ltrim($s);  
rtrim($s);
9, 字符串比较
strcmp($s1, $s2);
10, 填充字符串
str_pad($s, 10, '*');
11, 重复字符串
str_repeat($s, n);
12, 字符串逆转
strrev($s);
13, 打乱字符串
str_shuffle($s);


>>数组相关的函数
1, 数组的创建与初始化
$a = array();
$a = ['zhao', 'qian', 'sun'];  //索引数组
$a = ['name'=>'zhao', 'age'=>32];  //关联数组
$a = range(1, 10);
$a = range(1, 100, 2);  //创建一个包含指定范围的数组 
2, 数组的长度
count($a);
3, 数组的遍历
foreach($arr as $k => $v) {
	//....
}	
array_walk($arr, function($k, $v) {
	//....
});
4, 数组的查找
array_key_exists($key, $a);  //检查数组中是否存在指定的键
in_array($a, $v);  //数组中是否存在某个值
array_search($a, $v);  //查找该值的键名
5, 数组的首尾添加与删除
array_push();
array_pop();
array_unshift();
array_shift();
6, 数组的截取
array_slice($a, $start, $len);
array_splice($a, $start, $len, $b);  //截取并替换
7, 数组的过滤与映射
array_filter($a, callback);
array_map(callback, $a);
8, 数组的合并
array_merge($a, $b);  //键相同的会覆盖
array_merge_recursive($a, $b);  //相同键的值合并为数组
9, 数组的拼接
implode('*', $a);
10, 数组的排序
sort($a) / rsort($a);  //用于索引数组
ksort($a);  //关联数组: 按键排序
asort($a);  //关联数组: 按值升序
usort($a, function($x, $y) {  //自定义排序
	return $a <=> $b;  
});
11, 数组的反转
array_reverse($a);
12, 操作数组的键和值
array_keys($a);  //获取所有键
array_values($a);  //获取所有值
array_flip(#a);  //交换键和值
13, 数组的统计函数
array_sum($a);
max($a);
min($a);
array_count_values($a);  //统计数组中每个值的出现次数
14, 数组去重
array_unique($a);
15, 提取多维数组的一列
$a = [['id'=>1, 'name'=>'zhao'], ['id'=>2, 'name'=>'qian']];
array_column($a, 'name'); //['zhao', 'qian']


>>日期事件相关的函数
1, 获取当前日期和时间
date('Y-m-d H:i:s');  //格式化当前时间
time();  //当前时间戳
getdate();  //包含当前日期时间信息的关联数组
2, 日期时间与时间戳的转换
strtotime('2025-03-16');  //将字符串转换为时间戳
strtotime('+1 day');  //明天的时间戳
mktime($h, $i, $s, $m, $d, $y);  //转换为时间戳
echo date('Y-m-d', strtotime('+1 week'))  //一周后的日期
3, 检查日期事件格式是否有效
checkdate(3, 16, 2025);
4, 时区
date_default_timezone_set('Asia/Shanghai');  //设置时区
5, 使用DateTime对象
$date = new DateTime();  //当前时间
$date = new DateTime('2025-03-16 08:30:00');  //指定时间
$date = new DateTime('2025-03-16 08:30:00', new DateTimeZone('Asia/Shanghai'));  //指定时区
$date->format('Y-m-d H:i:s');
$date->setDate(2025, 3, 18);  //修改日期
$date->setTime(12, 34, 56);  //修改时间
$date->setTimestamp(time() + 86400);  //设置时间戳
$date->setTimezone(new DateTimeZone('UTC'));  //修改时区
$date->modify('+1 day'); //加一天
$d1->diff($d2);  //返回两个日期时间差的关联数组


>>文件包含
1, require
引入指定的文件, 如果文件不存在, 则产生一个致命错误;
2, include
如果文件不存在, 只会报警告, 程序会继续运行;
3, require_once, include_once
只会引入一次;


>>函数的相关知识
1, 在函数内部访问全局变量
使用关键字global或者超级全局变量$GLOBALS;
$name = 'zhao';
function test() {
	global $name;
	$GLOBALS['name'] = 'qian'; //等价
}
2, 静态变量
静态变量只初始化一次, 在函数执行结束后也不会销毁;
function test() {
	static $count = 0;
	$count++;
	return $count;
}
3, 匿名函数
$test = function() {
	//...
}
4, 默认参数值
function test($name, $age = 20) {
	//...
}
5, 可变参数
function test(...$args) {
	//将多个参数收集到$args数组中
}
6, 引用传参与返回引用
function test(&$value) {  //传递引用
	//...
}
function &test() {  //返回变量的引用
	//...
}
7, 类型声明
PHP7+开始支持类型声明;
function test(int $a, int $b): int {
	//...
}


>>面向对象
1, 类
class Person {
	public $name;
	public $age;
	public function __construct($name='zhao', $age=18) {  //构造函数
		$this->name = $name;
		$this->age = $age;
	}
	public function __destruct() {  //析构函数
		//....
	}
	public function say() {
		echo "My name is {$this->name}. I am {$this->age} years old.";
	}
}
1)类的实例化
$p = new Person('zhao', 32);
$p = new Person();
$p->name = 'zhao';
$p->age = 32;
2)访问修饰符
public: 外部可访问
protected: 类的内部及其子类中可访问
private: 仅在类的内部访问
3)静态属性与方法
//类中定义
class Counter {
	public static $count = 0;
	public static function increment() {
		self::$count++;
	}
}
//类外使用
Counter:increment();
echo Counter::$count;
注: 静态属性和方法属于类本身, 而不是类的实例, 通过类名直接访问;
4)类常量
const NATION = '中国';
self::NATION
注: 类常量与类的静态属性相似, 唯一区别是静态属性可以更改;
2, 继承
class Student extends Person {
	public $major;
	public function __construct($name, $age, $major) {
		parent::__construct($name, $age);
		$this->major = $major;
	}
	public function say() {
		echo "My name is {$this->name}, I am {$this->age} years old. I am majoring in {$this->major}."
	}
}
1)子类构造函数中调用父类构造函数:
parent::__construct($name, $age);
2)final关键词
final写在类前, 禁止该类被继承;
final写在方法前, 禁止该方法被重写;
3)静态方法与静态属性也可以被继承, 可以通过父类或子类进行调用;
4)PHP不支持多重继承, 但可通过interface或trait类实现多重继承的功能;
5)多态
多态是指允许不同类的对象对相同的消息做出不同的响应, 是在类的继承中, 通过方法重载和方法重写来实现;
3, 接口与抽象类
1)接口定义了一组行为规范;
//定义接口
interface PersonInter {
	public function say();
}
//类实现接口
class Person implements PersonInter {
	public function say() {
		echo 'Person say....';
	}
}
2)类可以实现多个接口
class Person implements IEat, IWork {
	//....
}
3)抽象类
abstract class Person {
	abstract public function f1();
}
注: 抽象类可以包含抽象方法与具体方法, 只能被继承, 不能被实例化;
4, trait
解决类的单一继承问题, 把通用的代码抽离出来, 写成trait;
可同时使用多个trait;
类似类的继承, 但trait不能被实例化;
trait A {
	//....
}
trait B {
	//....
}
class C {
	use A, B;
	//....
}


>>php文件和目录的操作
1, 文件操作
1)打开文件
r: 只读, w: 写入, a: 追加, r+/w+/a+: 读写(开头/清空/结尾);
$file = fopen('test.txt', 'r');
2)读取文件
//按指定字节数读取
fread($file, n);
//逐行读取
while(!feof($file)) {
	$line = fgets($file);
}
//读取整个文件内容
$content = file_get_contents('test.txt');
3)写入文件
//使用fwrite()或fputs()写入
fwrite($file, 'hello world');
//使用file_put_contents()
file_put_contents('test.txt', 'hello world');
4)关闭文件
fclose($file);
5)文件其他操作
//检查文件或目录是否存在
file_exists('test.txt');
//删除文件
unlink('test.txt');
//获取文件大小, 以字节为单位
filesize('test.txt');
//获取文件最后修改时间
filemtime('test.txt');
2, 目录操作
1)打开目录
$dir = opendir('./cao');
2)创建目录
mkdir('cao');
3)删除目录
rmdir('cao');
4)遍历目录
$files = scandir('./cao');
foreach($files as $file) {
	//....
}
5)检查是否为目录
is_dir('./cao');
3, 文件和目录的其他操作
1)复制文件
copy('s1.txt', 's2.txt');
2)移动或重命名文件
rename('t1.txt', 't2.txt');



>>php操作mysql
1, 面向过程的方式
//连接数据库
$conn = mysqli_connect('localhost', 'root', '123456', 'test');
if(!$conn) {
	die('连接失败:'.mysqli_connect_error());
}
//查询数据
$s = "select * from teacher";
$result = mysqli_query($conn, $s);
if(mysqli_num_rows($result) > 0) {
	while($row = mysqli_fetch_assoc($result)) {
		echo "ID: {$row['id']}, Name: {$row['name']}\n";
	}
} else {
	echo 'No Data';
}
//插入、更新、删除: 都是使用mysqli_query($conn, $s)函数;
//关闭连接
mysqli_close($conn);
2, 面向对象的方式
//连接数据库
$conn = new mysqli('localhost', 'root', '123456', 'test');
if($conn->connect_error) {
	die('连接失败:'.$conn->connect_error);
}
//查询数据
$s = "select * from teacher";
$result = $conn->query($s);
if($result->num_rows > 0) [
	while($row = $result->fetch_assoc()) {
		echo "ID: {$row['id']}, Name: {$row['name']}\n";
	}
} else {
	echo 'No Data';
}
//插入、更新、删除: 都是使用$conn->query($s)方法;
//关闭连接
$conn->close();
3, 使用PDO(PHP Data Objects)
//连接数据库
try {
    $pdo = new PDO("mysql:host=localhost;dbname=test", "root", "123456");
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    echo "连接失败:" . $e->getMessage();
}
//查询数据
$s = "select * from teacher";
$stmt = $pdo->query($s);
while($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
	echo "ID: {$row['t_id']}, Name: {$row['t_name']}\n";
}
//插入数据
$s = "insert into teacher values (:id, :name)";
$stmt = $pdo -> prepare($s);
$stmt->bindParam(":id", $id);
$stmt->bindParam(":name", $name);
$id = '05';
$name = '何申杰';
$stmt->execute();
echo '最后插入的ID: '.$pdo->lastInsertId()."\n";
//更新数据
$s = "update teacher set name = :name where id = :id";
$stmt = $pdo->prepare($s);
$stmt->bindParam(":name", $name);
$stmt->bindParam(":id", $id);
$name = "zhao";
$id = '05';
$stmt->execute();
//关闭连接
$pdo = null;	
4, 防止sql注入
使用预处理语句防止sql注入, 上面pdo的方式就是;
$stmt = $conn->query("select * from teacher where id = ?");
$stmt->bind_param("id", $id);
$id = '05';
$stmt->execute();
$result = $stmt->get_result();	
5, 设置字符集
$conn->set_charset('utf8');
6, 开启错误报告
$conn->report_mode = MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT;
$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
7, mysqli与pdo的区别
mysqli: 语法简单、性能稍高, 仅用于mysql数据库;
pdo: 支持多种数据库, 适合大型项目;



>>Cookie、Session、Token的操作
1, Cookie
1)设置cookie
setcookie(name, value, expire, path, domain, secure, httponly);
setcookie($username, 'zhao', time()+3600*24, '/');  //一天后过期
2)获取cookie
$_COOKIE[$username]
3)修改cookie
setcookie($username, 'qian', time()+3600*24, '/');
4)删除cookie
setcookie($username, '', time()-3600, '/');
2, Session 
1)启动session
session_start();  //必须在输出任何内容之前调用该函数
2)设置session
$_SESSION['username'] = 'zhao';
3)获取session
$_SESSION['username'];
4)删除session
session_destroy();  //销毁会话
3, Token 
1)用户提交用户名和密码, 服务器验证成功后生成token并返回给客户端
session_start();
if($_POST['username'] == 'admin' && $_POST['password'] = '123456') {
	$_SESSION['token'] = bin2hex(random_bytes(32));
	setcookie('token', $_SESSION['token'], time()+3600, ’/');
	echo '登录成功';
} else {
	echo '登录失败';
}
2)客户端在请求受限资源时携带token
session_start();
if(!isset($_SESSION['token']) || $_SESSION['token'] != $_COOKIE['token']) {
	echo '访问失败！';
	exit;
} else {
	echo '欢迎访问';
}































