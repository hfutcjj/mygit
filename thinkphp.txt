>>tp5目录结构
tp5
	application	//....................应用目录app，我们在这个目录中编程
		index  //.....................一个模块
			controller //.............控制层
			model //..................模型层
			view //...................视图层
		admin //......................另一个模块
		config.php //.................应用的配置文件
		database.php //...............数据库配置
		route.php //..................路由文件
		common.php //.................公共文件，可以将项目的通用函数放到这
		command.php //................用命令行运行php时读取的配置文件
		tags.php //...................应用行为扩展
	public //.........................网站的根目录，对外开放的接口
		index.php //..................入口文件
		static //.....................放置网站的静态文件
			css //....................css文件
			js //.....................js文件
			imgs //...................图片
		favicon.ico //................网站的默认图标
		router.php //.................用于快速启动的配置
		robots.txt //.................给搜索引擎爬取
	thinkphp //.......................tp5的框架
		base.php //...................定义一些常量
		composer.json //..............定义composer的配置文件
		console.php //................控制台的入口文件
		convention.php //.............框架默认的配置文件
		helper.php //.................助手函数
		start.php //..................框架启动文件
		lang //.......................语言包
		library //....................框架的核心
			think //..................核心文件
			traits //.................类库的扩展
		tpl //........................框架默认的一些模板
	extend //.........................第三方类库可以放到这
	runtime //........................运行中的缓存文件
	vendor //.........................安装过程中生成的类库放在这个文件夹
注：php默认将common模块为公共模块，里面放一些公共的方法，所以common模块无法通过浏览器访问，
可以在其他模块的控制器中引入common模块里的方法来调用；
	
>>设置域名绑定
打开apache的配置文件httpd.conf, 添加
<VirtualHost *:80>
    DocumentRoot "/home/www/tp5/public"
    ServerName tp5.com
</VirtualHost>
打开系统文件C:/Windows/System32/drivers/etc/hosts文件, 修改
127.0.0.1 tp5.com

>>隐藏入口文件
localhost/index.php/index/Index/index 简化为 localhost/index/Index/index；
现在的tp版本默认隐藏入口文件，如果没有默认隐藏，可自行百度进行隐藏设置；

>>绑定入口文件
在public/index.php中添加
define('BIND_MODULE', 'admin'); //url: localhost/user/validate
define('BIND_MODULE', 'admin/user'); //url: localhost/validate
define('BIND_MODULE', 'admin/user/validate'); //url: localhost
应用举例，比如给第三方写一个接口，可以在public中新建一个对外的接口，在其中进行入口绑定，不允许
第三方访问访问除API以外的其他模块；
//public/api.php
<?php
define('APP_PATH', __DIR__.'/../application/');
define('BIND_MODULE', 'api');
require(__DIR__.'/../thinkphp/start.php');
第三方访问的url：localhost/controller/method; 访问被限制在API模块内部；

>>路由
1, tp采用单一入口模式访问应用，所有的请求都定位到入口文件, 系统从url参数解析当前请求的
模块、控制器和操作，标准的url访问格式：http://localhost/index.php/模块/控制器/操作;
入口文件默认可隐藏，隐藏后的url格式：http://localhost/模块/控制器/操作;
2, 命名规范: 模块名和操作名必须小写，控制器名和文件名保持一致，首字母大写;
控制器名如果采用驼峰命名，如HelloWorld，默认必须采用hello_world的形式访问，可以修改
配置文件的'url_convert'=>true来支持驼峰访问;
3, 带参数的url
http://localhost/index/Index/index/name/zhao/age/30
http://localhost/index/Index/index?name=zhao&age=30
或 http://localhost/index/Index/index.html?name=zhao&age=30
url会自动寻找同名的参数，参数的先后顺序可以随意;
还可以精简url的参数形式省略参数名，修改配置 'url_param_type'=>1就可以，此时url变成
http://localhost/index/Index/index/zhao/30
4, 自定义路由
修改application/route.app文件；
比如在route.php中新增一项 news/:name=>'index/index/info', 则url由
localhost/index/Index/info/name/zhao 变成 localhost/news/zhao.html;

>>配置
1，只修改框架自带的配置文件
1)惯例配置 
位于thinkphp/convention.php，包含所有的配置选项，一般不修改该文件；
2)项目配置
位于application/config.php，可以修改该配置文件，修改结果会覆盖惯例配置；
3)数据库配置
位于application/database.php，可以在这修改数据库配置，修改结果会覆盖惯例配置；
2，自定义配置文件
修改public/index.php文件, 添加
//定义配置文件目录
define('CONF_PATH', __DIR__.'/../config/');
新建与application同级的文件夹config, 在里面添加配置文件;
配置文件都是以数组的形式返回;
能通过助手函数config()输出所有配置;
1)应用配置
在config文件夹下新建配置文件, 如config.php, database.php, session.php, cookie.php等;
这些配置文件会覆盖惯例配置中的配置项;
应用配置对这个应用有效;
2)模块配置
新建config/index/config.php, 设置index模块的配置项;
新建config/admin/config.php, 设置admin模块的配置项;
模块配置仅对特定模块有效;
3)场景配置
在config/config.php中添加一项: 'app_status'=>'home'或'office';
新建config/home.php, 设置home的配置选项;
新建config/office.php, 设置office的配置选项;
3，动态配置
在控制器的构造函数中或者某个方法中配置; 
Config::set('key', 'value');
config('key', 'value');
注: 开发时一定要设置'app_debug'=>true, 否则错误不显示;

>>Config类与config()助手函数
1, Config类
Config类位于thinkphp/library/think/config/Config.php, 使用Config类需要先导入;
use think\Config;
Config::set('username', 'tangbing');
echo Config::get('username');
echo Config::has('username');
//也可以写成 $res = \think\Config::get();
2, config()助手函数
助手函数位于thinkphp/helper.php文件, 助手函数全局可用，不需要导入;
$res = config('username');
echo config('?username'); //前面加个?号，判断是否存在

>>系统环境变量
Env类位于thinkphp/library/think/Env.php, 使用Env类需要先导入, use \think\Env;
新建与application同级的文件.env配置文件, 在.env文件填写相关环境配置;
.env经常与config文件配合使用，用于开发环境、测试环境与线上环境的切换;
//.env
status=dev
[database]
username=root
password=root
//config/config.php
return [
	'status' => Env::get('app_status', 'dev'); //如果没有设置app_status环境变量，则默认使用第二个参数的值
];
//config/database.php
return [
	'username' => Env::get('database.username', 'root'),
	'password' => Env::get('database.password', 'root');
];
//config/dev.php
return [
	'app_now_status' => 'dev'
];
//config/test.php
return [
	'app_now_status' => 'test'
];
//config/prod.php
return [
	'app_now_status' => 'prod'
];
当不同环境之间切换时，只用修改.env文件;

>>请求对象Request
Request对象处理客户端的数据以及服务器端的环境变量; 需要引入use think\Request;
Request对象封装了$_GET, $_POST, $_REQUEST, $_SESSION, $_COOKIE, $_FILES等全局变量的值;
1, Request对象的几种调用方式
1)$request = request(); //request()助手函数
2)class Index{
	public function index(Request $request){ //自动注入请求对象
		//...
	}
}
3)$request = Request::instance(); //单例模式
$request->param('id');
4)class Index extends Controller{
	public function index(){
		echo $this->request->param('id'); //think\Controller包含request属性
	}
}
5)echo input('session.username'); //input()助手函数获取具体参数值
6)echo session('username'); //session()助手函数获取具体的参数值
2, 获取请求信息
1)获取请求参数
$req->param(); //返回所有请求参数的数组, 不需要区分请求的类型，统一获取
$req->param('name');
$req->param('name', 'zhao'); //第二个参数是默认值
$req->get();
$req->get('name');
$req->post();
$req->cookie();
$req->session();
$req->file();
$req->method(); //请求的类型
$req->url(); //获取当前的url地址，有关url信息的有很多其他方法，具体参考文档
$req->module(); //当前模块
$req->controller(); //当前控制器
$req->action(); //当前操作
$req->routeInfo(); //路由信息
$req->dispatch(); //调度信息
2)使用助手函数input()
input('param.'); //$request->param();
input('param.name'); //$request->param('name');
input('?name');  
input('?param.name'); //同上, $request->has('name');

>>响应对象Response
大多情况下，我们不需要关注Response对象本身，只需要在控制器的方法中返回数据即可；
public function getUserInfo($type = 'json'){
	Config::set('default-return-type', $type);
	$res = [
		'code' => 200,
		'data' => ['name'=>'zhao', 'age'=>30]
	];
	return $res;
	//等价于 return json_encode($res);
}

>>重定向
public function show($name){
	if($name == 'baidu'){
		$this->redirect('http://www.baidu.com');
		//return redirect('http://www.baidu.com'); //等价, 这是使用redirect()助手函数
	}else{
		return $this->fetch();
	}
}

>>命名空间
app命名空间代表application；
think命名空间代表thinkphp/library/think;

>>视图和模板
1, 调用视图
1)使用助手函数view()
//app/index/controller/Index.php
public function index(){
	return view(); //app/index/view/Index/index.html
	return view('main'); //app/index/view/Index/main.html
	return view('page/main'); //app/index/view/Page/main.html
	return view('main', ['name'=>'zhao']); //向页面传递参数
	return view('./../application/index/view/Page/main.html'); //全路径查找(只做演示用)，效果同上
	return view('./page.html'); //public/page.html
}
注：'./page.html'表示public目录下的page.html文件，必须带后缀;
2)使用模板控制器的方法(推荐)
//app/index/controller/Index.php
namespace app\index\controller;
use think\Controller;
class Index extends Controller{
	public function index(){
		return $this->fetch('main'); //参数的意义同view()
	}
}
3)不调用视图，直接输出字符串
$this->assign('name', 'zhao');
$this->display('My name is {$name}');
注: fetch()是调用视图文件, 而display()直接将字符串输出，常用于简单调试;
2, 从控制器向视图传递数据的四种方式
1)直接传参(常用)
//app/index/controller/Index.php
public function index(){
	return $this->fetch('main', ['name'=>'zhao', 'age'=>30]);
}
//app/index/view/index/main.html
<div>Name: {$name}, age: {$age}</div>
2)通过assign()方法(常用)
$this->assign('name', 'zhao');
$this->assign('age', 30);
return $this->fetch('main');
3)$this->view->city = 'hefei';
4)use think\View;
View::share('major', 'maths');
注: 视图模板编译后的文件保存在runtime/temp文件夹中;
3, 更改模板配置
模板配置在惯例配置thinkphp/convention.php里的template键里, 如果要更改模板配置, 
可以把template的值复制到应用配置里，再修改;
4, 字符串替换
模板提供了预定义的字符串替换, 如
__STATIS__: /static //根目录就是入口文件所在的目录，也就是public
__JS__: /static/js
__CSS__: /static/css
也可以自己定义字符串替换:
复制惯例配置中'view_replace_str'=>[], 在其中添加自定义字符串的配置, 如
'view_replace_str'=[
	'__CSS__' => '/front/css,
	'__UPLOAD__' => '/upload'
];
5, 系统变量
视图中可以直接通过$Think来调用系统变量，无须通过控制器传参;
//main.html
{$Think.server.OS} //等价于<?php echo $_SERVER['OS'] ?>
{$Think.session.name}
{$Think.cookie.email}
{$Think.get.id}
{$Think.request.id}
{$Think.const.APP_PATH} 
{$Think.APP_PATH} //同上，获取系统常量
6, 变量调节器
视图中的变量可以使用函数以及运算来对输出进行调节;
{$name|strtoupper}
{$name|substr=0,5} //变量默认为第一个参数
{$name|str_replace='o','*',###} //变量不是第一个参数则用###来占位
{$name|md5|strtoupper} //管道方式
{$a+$b}
7, 变量的默认值
使用default，如果没有从控制器传参，则使用默认值，如果有从控制器传参则使用传参的值;
{$name|default='zhao'}
8, 变量的原样输出
{literal}{$name}{/literal} //原样输出{$name}
9, 模板注释
{/*This is template comment*/} //页面看不到, 查看源代码也看不到
而<!--This is html comment-->从源代码中能看到;
10, 条件判断
<!--if-->
{if $level>=2 and $level<=5}
	<div>This is a normal level</div>
{else}
	<div>The level is not normal</div>
{/if}
<!--switch-->
{switch name="Think.get.level"}
	{case value="1|2"}<div>优秀</div>{/case} //0|1表示0或1
	{case value="3"}<div>良好</div>{/case}
	{case value="4"}<div>及格</div>{/case}
	{default}其他{/default}
{/switch}
注：条件标签还有很多，具体百度;
11, 循环
视图模板的循环有三种形式
<!--foreach方式1(常用)-->
{foreach $arr as $key=>$value}
	<div>{$key}: {$value.name}, {$value.age}</div>
{/foreach}
<!--foreach方式2-->
{foreach name="arr" key="k" item="v"}
	<div>{$k}: {$v.name}, {$v.age}</div>
{/foreach}
<!--for-->
{for start="1" end="10" step="2" name="i"}
	<div>{$i}</div> //step可省略, 默认为1, name可省略, 默认为i
{/for}
<!--volist-->
{volist name="arr" id="value"}
	<div>{$value.name}, {$value.age}</div>
{/volist}
12, 模板的布局
//目录结构
view 
	common 
		header.html --------被包含头模块
		footer.html --------被包含尾模块
		base.html ----------基类模块
	index
		main.html
		page1.html 
		page2.html
	layout.html ------------模板文件
1)模板包含 {include file=""}
//main.html
{include file="common/header"}
<div>This is container.</div>
{include file="common/footer"}
2)模板继承 {extend name=""}
在基模板中设置{block}，然后在继承时重写{block}，其他地方保持不变;
使用{__block__}可以引用基模板中对应name的内容;
//base.html
<div>
	{block name="myname"}This is index/main.{/block}
</div>
//index.html
{extend name="common/base"}
//page1.html
{extend name="common/base"}
<div>
	{block name="myname"}This is index/page1.{/block}
</div>
//page2.html
{extend name="common/base"}
<div>
	{block name="myname"}This is index/page2.{/block}
</div>
3)模板文件layout.html
修改应用配置，增加
'template' => [
	'layout_on' => true,
	'layout_name' => 'layout'
],
这样，控制器所有的视图$this->fetch()都指向view/layout.html文件了;
//layout.html
<div>{__CONTENT__}</div>  //{__CONTENT__}会由具体文件中的内容替换
//main.html
This is main.
//page1.html
This is page1.
//page2.html
This is page2.

>>数据库操作
tp中的数据库操作有三种方式: 
数据库原生查询(SQL查询);
数据库链式查询(查询构造器);
模型的对象化查询;
1, 设置数据库配置
在应用配置中新建database.php文件，将惯例配置中的数据库部分复制过来并修改;
2, 连接数据库的四种方式
//config.php
return [
	'app_debug' 	=> true,
	'my_database' 	=> [
		'type' 		-> 'mysql',
		'hostname'  => '127.0.0.1',
		....
	]
];
//database.php
return [
	'type' 		=> 'mysql',
	'hostname'  => '127.0.0.1',
	....
];
1)use think\Db;
$conn = Db::connect();
2)$conn = Db::connect([
	'type' => 'mysql',
	'hostname' => '127.0.0.1',
	....
]);
等价于 $conn = Db::connect(Config::get('my_database'));
3)$conn = Db::connect('my_database');
4)$conn = Db::connecct('mysql://root:root@127.0.0.1:3306/test#utf8');
参数格式为: tpye://username:password@hostname:port/database#charset;
注：Db::connect()是惰性加载，只在执行query()或execute()方法时才真正连接数据库；
每次调用Db::query()/execute()方法时，都是默认连接database.php里配置的数据库，除非用
$db = Db::connect('db1'); $db->query();
3, 原生操作
//查询
$rs = Db::query('select * from tname where id = $id'); //不安全
$rs = Db::query('select * from tname where id = ?', [$id]); //参数绑定形式
$rs = Db::query('select * from tname where id = :id', ['id'=>$id]]); //占位符绑定形式
$rs = Db::query("desc tname");
$rs = Db::query("show variables like '%char%'");
//执行插入、更新、删除
$rs = Db::execute('insert into tname(name, age) values(?, ?)', ['zhao', 30]);
$rs = Db::execute('update tname set age = age + 1 where name = ?', ['zhao']);
$rs = Db::execute('delete from tname where name = ?', ['zhao']);
$rs = Db::execute('truncate table tname');
注: 1)Db::query()执行读操作，返回二维数组；Db::execute()执行写操作，返回影响的记录数；
2)也支持查询的时候切换数据库, 如
$rs = Db::connect('mysql://root:123456@127.0.0.1:3306/dbname2#utf8')->query('select * from tname');
为了简化代码，通常在配置文件(如application/config.php)中定义好多个数据库的连接配置, 如
'db1'=>[
	//配置参数
],
'db2'=>[
	//配置参数
]
$db1 = Db::connect('db1');
$db2 = Db::connect('db2');
$rs1 = $db1->query('...');
$rs2 = $db2->query('...');
4, 链式操作(查询构造器)
查询构造器的优点是基于PDO实现，对不同的数据库驱动都是统一的语法;
//查询
$db= Db::table('tname'); //等价于Db::name('tname'), 等价于db('tname')
$rs = $db->where(['id'=>3])->select(); //所有记录, 二维数组
$rs = $db->where('id', 3)->find(); //仅第一条记录，一维数组
$rs = $db->where(’id', 3)->value('name'); //一条记录的name字段的值，一个值
$rs = $db->where('id', 3)->column('name'); //所有满足条件的记录的name字段的值，一维数组
$rs = $db->where('age', '>', 20)
		->field('avg(age) as avg_age, level')
		->group('level')
		->order('level desc')
		->limit(2, 10)
		->select(); 
注: 链式操作不分先后，只要在select()方法之前调用就行;
注: table()里的表名含前缀, 而name()不含前缀;
Db::table('tname') 与 db('tname') 等价，后者是助手函数;
注: 如果查询结果为空，select()返回空数组，find()返回null;
注：链式查询可以用buildSql()来得到原生sql语句；
//插入
$db = Db::table('tname');
$rs = $db->insert(['name'=>'zhao', 'age'=>30]); //返回被影响的行数
$rs = $db->insertGetId(['name'=>'zhao', 'age'=>30]); //返回插入的Id
$data = [['name'=>'zhao', 'age'=>30], ['name'=>'qian', 'age'=>32]];
$rs = $db->insertAll($data); //插入多条数据, 返回影响的行数(也就是插入的条数)
//更新
$rs = $db->where('name', 'zhao')->update(['age'=>88]); //返回被影响的行数
$rs = $db->where('name', 'zhao')->setField('age', 99); //更新一个字段的值
$rs = $db->where('name', 'zhao')->setInc('age', 10); //set age = age + 10
$rs = $db->where('name', 'zhao')->setDec('age', 10); //set age = age - 10
//删除
$rs = $db->where(['name'=>'zhao'])->delete(); //返回被影响的行数
注: 更新和删除操作必须传where条件，否则报错;
//分组查询
$rs = $db->field('sid, avg(score) avgScore')->group('sid')->select();
5, 条件构造器
$db->where('name', 'null'); //id=3 或 name is null 的形式
$db->where('id', '>', 3); //=(eq), <>(neq), >(gt), >=(egt), <(lt), <=(elt)
$db->where('id', 'between', '1,10'); //between/between/in/notin, '1,10'/[1,10]
$db->where('id', '>', 1)->where('id', '<', 10); //and
$db->where('id', '>', 1)->whereOr('id, '<', 10); //or
$db->where('id', 'exp', '>1 and <10'); //自定义条件
//原生字符串查询
$db->where('id > 10 and name is not null');
$db->where('id > ? and age < ?', [5, 30]); //参数绑定防止sql注入
$db->where('id > :id and age < :age', ['id'=>5, 'age'=>30]); 
注: 可以用buildSql()来构造原生的sql语句;
6, 事务处理
//回调函数形式
Db::transaction(function(){
	Db::table('user')->insert(['name'=>'hu', 'age'=>20]);
	Db::execute('update tcount set len=len+1');
});
//手动控制事务的提交与回滚
Db::startTrans();
try{
	Db::table('user')->where('name', 'hu')->delete();
	Db::execute('update tcount set len=len-1');
	Db::commit(); //提交事务
}catch(\Exception $e){
	Db::rollback(); //执行失败则回滚事务
}
7, 分块查询
当数据量非常大时，一次性取数据会导致内存开销非常大，可以采用分块查询，如每次取100条数据进行处理：
Db::name('student')->where('status', '>', 0)
	->chunk(100, function($list){
		foreach($list as $val){
			//处理每一条数据
		}
	});
8, tp5对时间查询的支持
在数据表中新增一个表示时间的字段，比如birthday，类型可以是int/datetime/timestamp/string等都可以;
Db::name('student')->whereTime('birthday', '>', '2000-1-1')->select();
Db::name('student')->whereTime('birthday', '>', 'this week')->select();
Db::name('student')->whereTime('birthday', '>', '-2 months')->select();
Db::name('student')->whereTime('birthday', 'between', ['2000-1-1', '2010-1-1'])->select();
Db::name('student')->whereTime('birthday', 'today')->select();
Db::name('student')->whereTime('birthday', 'last week')->select();
9, 多表联合查询
$r = Db::name('student')->alias('s')
	->join('sc', 's.id = sc.sid')
	->join('course c', 'c.id = sc.cid')
	->field('s.name sname, c.name cname, sc.score')
	->select();

>>模型
0, tp5的模型
tp5的模型是ORM(对象-关系映射)的封装；
关系表->模型，记录->模型对象实例，字段->对象属性;
模型是一种对象化操作，不是简单的CURD操作，简单的CURD操作用Db类即可；
Db类的查询默认返回数组，而模型类返回的是当前的模型对象实例；
1, 模型定义
1)模型命名
模型名与数据表的名称一致，遵循驼峰命名法, user->User.php, user_info->UserInfo.php;
namespace app\index\model;
use think\Model;
class User extends Model{
	//...
}
2)模型类的实现
大多数情况下，无须为模型定义任何的属性和方法即可完成基本的操作；
模型会自动对应一个数据表，数据库表前缀+模型类名->数据表名;
模型的命名是驼峰法，转换为表名会自动转换为小写+下划线的表名；
也可以在模型中定义单独的数据表，有两种方式:
a)protected $table = 'think_user'; //包含前缀
b)protected $name = 'user'; //不包含前缀
如果当前的模型类需要使用不同的数据库连接，可以定义模型的connection属性，
protected $connection = [
	//数据库的配置
];
注：一般来说，一个应用的模型都是公用的，不区分模块，所以不必在每个模块下面定义模型；
2, 引入模型的几种方式
1)use app\index\model\User; //推荐
User::get(1)->toArray();
2)use app\index\model\User;
$user = new User(); //实例化
3)use think\Loader;
$user = Loader::model('User'); //通过Laoder类，当模型很多时，无须引入模型
4)$user = model('User'); //model()助手函数
3, 查询
1)$user = new User();
$rs = $user->where('age', '>', 30)->select();
foreach($rs as $v){
	print_r($v->toArray());
}
2)$id = 2;
$rs = $user->get($id); //传入主键作为参数
$rs = $user->get(['email'=>'1234567@qq.com']); //传入数组作为非主键
$rs = $user->getByEmail('1234567@qq.com'); //同上
echo "name: {$rs->name}, age: {$rs->age}";
3)查询多条数据
$list = User::where('id', '<', 5)->select(); 
$list = User::all(); //所有数据
$list = User::all('1,2,3,4,5'); //主键等于1,2,3,4,5其中一个的数据
$list = User::all(function($query){ //通过闭包函数来查询
	$query->where('id', '<', 5)->select();
});
foreach($list as $v){
	print_r($v->toArray());
}
4, 插入
//插入单条数据
1)$user->insert(['name'=>'zhao', 'age'=>30]); 
2)$user = new User();
$user->name = 'zhao';
$user->age = 30;
if($user->save()){
	return '用户['.$user->name.']添加成功';
}else{
	return $user->getError();
}
//插入多条数据
1)$user->insertAll([[...], [...]]); //接收二维数组
2)$list = [[...], [...]];
$user->saveAll($list); 
5, 更新
1)$user->where('id', '5')->update(['age'=>32]);
2)$user = User::get($id);
$user->age += 1;
$user->save();
注：实例化模型后第一次执行save()，默认执行插入操作;
而对查询返回的实例执行save()，默认执行的是更新操作；
6, 删除
1)$user->where('name', 'exp', 'is null')->delete();
2)$user = User::get($id);
if($user){
	$user->delete();
}
7, 聚合操作
$user->count(); //计数
$user->where('age', '>', 30)->count(); //带条件
$user->avg('age'); 
$user->where('age', '>', 30)->avg('age'); 
常用的聚合函数有: count(), max(), min(), sum(), avg()等;
8, 模型读取器和修改器
数据库中User表的字段sex存储的值为0,1,2, 页面输出时自动显示'未知','男','女';
//模型文件 app/index/model/User.php
class User extends Model{
	protected function getSexAttr($val){ //函数名必须为getSexAttr
		return $val==0 ? '未知' : ($val==1 ? '男' : '女');
	}
	protected function getBirthdayAttr($val){ //对读取birthday字段进行格式化
		return date('Y-m-d', $val);
	}
	protected function setBirthdayAttr($val){ //$user->birthday = '1987-07-01'，自动存为时间戳
		return strtotime($val); 
	}
	protected function setPasswordAttr($val, $data){ //第二个参数为包含所有字段值的数组
		return md5($data['email'].$val);
	}
}
//控制器文件 app/index/controller/Index.php
class Index extends Controller{
	public function test1(){
		return User::get(1)->sex; //直接输出'男', '女' 或 '未知'
	}
	public function test2(){
		$user = new User();
		$user->name = 'zhao';
		$user->age = 30;
		$user->birthday = '1989-07-01';
		if($user->save()){
			return '新增成功';
		}else{
			return $user->getError();
		}
	}
}
9, 自动完成
给数据表添加create_time、insert_time、update_time、delete_time等字段，通过修改配置文件或者在
模型中添加方法，就可以对这些字段自动修改，具体参考文档；
10, 软删除
不真正删除数据库中的数据，而是将某个字段置为null或0，表示该条记录不存在;



