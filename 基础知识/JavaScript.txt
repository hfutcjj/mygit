>>javascript六种数据类型：
原始类型: boolean, number, string, undefined, null;
对象: object;

>>javascript没有块级作用域；
for(var i = 0; i < 10; i++){
	//...
}
console.log(i); //10

>>连续赋值的陷阱
function foo(){
	var a = b = 1;
}
foo();
console.log(typeof a); //'undefined'
console.log(typeof b); //'number'
这里的b隐式的创建为一个全局变量，应该改为：
var a = 1, b = 1;

>>try...catch
//抛出基本类型如字符串
try{
	throw 'test ';
}catch(ex){
	console.log(ex);
}finally{
	console.log('finally');
}
//抛出对象
try{
	throw new Error('test');
}catch(ex){
	console.log(ex.message);
}finally{
	console.log('finally');
}
注：finally语句可有可无, 无论是否抛出异常，finally都会被执行；

//for...in
var obj = {x: 1, y: 2};
for(var p in obj){
	//...
}
注：使用for...in时要注意，
1, 属性顺序不确定;
2, 属性标签enumerable为false时不会出现;
3, 属性受原型链的影响;

>>with
with可以关联一个对象到当前作用域。
with(document.forms[0]){
	console.log(name.value);
}
注: with语句有以下缺点：
1，可读性差；
2，让JS引擎优化更难；
3，严格模式下被禁用；
4，可被变量定义代替；
使用变量定义来代替，如下：
var form = document.form[0];
console.log(form.name.value);

>>对象的创建
1, 对象字面量
var obj = {x: 1, y: 2};
2, 构造函数
function foo(){this.x = 1; this.y = 2;}
foo.prototype.z = 3;
var obj = new foo();
3, Object.create(o);
该方法创建了一个以o为原型的空对象；

>>读对象的属性前要判断对象是否存在
var yz, obj = {};
if(obj.y){
	yz = obj.y.z;
}
上面的程序段可以简写如下：
var yz = obj && obj.y && obj.y.z;

>>对象属性的标签
1, 四个静态标签和两个读写的方法:
configurable, writable, enumerable, value;
get, set;
2, Object.defineProperty()
//给对象添加一个属性，并给该属性指定相关标签
var person = {};
Object.defineProperty(person, 'name', {
	enumerable: true,
	value: 'zhao'
});
注：用Object.defineProperty()方法添加属性，默认情况下该属性的标签都为false；
而用对象字面量的方式添加属性，属性的标签默认为true；
3, Object.defineProperties()
//给对象添加多个属性，并指定标签
var person = {};
Object.defineProperties(person, {
	title: {value: 'fe', enumerable: true},
	corp: {value: 'baba', enumerable: true},
	salary: {value: 10000, enumerable: true, writable: true}
});
4, Object.getOwnPropertyDescriptor()
//取对象的某个属性的所有标签，返回结果为一个对象
Object.getOwnPropertyDescriptor(person, 'salary');
//Object{value: 10000, writable: true, enumerable: true, configurable: false}
5, Object.getOwnPropertyDescriptors()
//取对象的所有属性的所有标签，返回结果为一个对象
Object.getOwnPropertyDescriptors(person);
//Object{title: {...}, corp: {...}, salary: {...}}
6, get/set方法
1)通过对象字面量来定义get/set方法
var man = {
	name: 'Bosn',
	_age: null,
	get age(){
		if(this._age == undefined){
			return new Date().getFullYear() - 1988;
		}else{
			return this._age;
		}	
	},
	set age(val){
		if(!isNaN(val) && val > 0 && val < 150){
			this._age = val;
		}else{
			throw new Error('Incorrect val = ' + val);
		}
	}
};
man.age; //32
man.age = 100;
man.age; //100
man.age = 'abc'; //error:Incorrect val = abc
2)通过Object.defineProperties()方法来定义get/set方法
var person = {};
Object.defineProperties(person, {
	title: {value: 'fe', enumerable: true},
	corp: {value: 'baba', enumerable: true},
	salary: {value: 10000, enumerable: true, writable: true},
	luck: {
		get: function(){
			return Math.random() > 0.5 ? 'good' : 'bad';
		}
	},
	promote: {
		set: function(level){
			this.salary *= 1 + level*0.1;
		}
	}
});
person.salary; //10000
person.promote = 2;
person.salary; //12000

>>对象的序列化
1, JSON.stringify(obj)
将对象序列化为字符串
2, JSON.parse(str)
将json字符串解析为对象
2, 可以通过toJSON来定制序列化的过程
var obj = {
	x: 1,
	y: 2,
	o: {
		o1: 1,
		o2: 2,
		toJSON: function(){
			return this.o1 + this.o2;
		}
	}
};
JSON.stringify(obj); //'{"x":1,"y":2,"o":3}'

>>对象转换为基本类型的过程
首先查找对象的valueOf()方法，如果valueOf()方法不存在或者返回对象，
则继续查找toString()方法，如果toString()方法也不存在或者返回对象，
则报错；

>>String对象
1, 常用方法
1)charAt()
指定位置的字符
2)indexOf()/lastIndexOf()
指定的字符第一次出现的位置
var s = 'hello,world';
s.indexOf('o'); //4
s.indexOf('o', 5); //7
s.lastIndexOf('o'); //7
3)substring()
提取指定起止的子字符串
4)substr()
提取指定数目的子字符串
var s = 'hello,world';
s.substring(2, 6); //'llo,'
s.substr(2, 6); //'llo,wo'
5)split()
字符串分割
var s = 'hello,world';
s.split(','); //['hello', 'world']
s.split(''); //['h', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'r', 'l', 'd']
s.split('', 5); //['h', 'e', 'l', 'l', 'o']
6)其他正则相关的函数

>>Math对象
1, 常用方法
1)Math.floor(), Math.ceil(), Math.round();
2)Math.random();
返回介于[0, 1)之间的小数;
注；四舍五入到指定小数点位数用 toFixed();
var a = 3.146;
a.toFixed(2); //3.15

>>Date对象
1, 创建Date对象
new Date(); //当前时间
new Date('October 13, 1975 11:13:00');
new Date(75, 10, 13, 11, 13, 0);
2, 获取与设置
d.getFullYear()/d.setFullYear();
d.getMonth()/d.setMonth(); //月份从0开始计算, 而php是从1开始
d.getDate()/d.setDate();
d.getHours()/d.setHours();
d.getMinutes()/d.setMinutes();
d.getSeconds()/d.setSeconds();
d.getDay(); //星期只有获取，没有设置函数
举例：
d.setDate(d.getDate()+2);
3, 时间戳(单位是毫秒)
d.getTime();
d.setTime();
举例: 
d.setTime(d.getTime()+24*60*60*1000); //将时间设置为一天后

>>数组的创建
1, 数组字面量
var arr = [1, 2, 4];
2, 构造函数
var arr = new Array(1, 2, 4);

>>常用的数组方法
1, Array.isArray()
判断一个对象是否为数组；
注意该方法属于Array构造器的方法，其他方法为Array.prototype的方法；
2，arr.indexOf()，arr.lastIndexOf()
查找元素在数组中的下标，如果不存在则返回-1;
也可以指定查找的起始位置；
3, arr.push()
将元素添加到数组尾部，返回数组的长度
4, arr.pop()
删除数组的最后一个元素，并返回该元素
5，arr.unshift()
将元素添加到数组头部，返回数组的长度
6，arr.shift()
删除数组的第一个元素，并返回该元素
7，arr.join()
将数组元素以指定分隔符连接成字符串，如果不指定分隔符，默认以逗号分隔；
8，arr.reverse()
数组逆序，注意该方法为本地方法，会修改原数组
9，arr.sort()
默认按字符串的顺序来排序，如果需要按数字的顺序或者要排序对象，需要自定义函数来排序；
该方法也是本地方法，会修改原数组；
10，arr.concat()
数组连接, 该方法不会改变原数组
var arr = [1, 2, 3];
arr.concat([10, 11], 13); //[1, 2, 3, 10, 11, 13]
11, arr.slice(start, end)
返回数组片段
12，arr.splice()
数组拼接，返回被删除的元素组成的数组，该方法为本地方法，会修改原数组
var arr = [1, 2, 3, 4];
var b= arr.splice(1, 2, 'a', 'b'); //[1, 'a', 'b', 4]
b; //[2, 3]
13, arr.forEach()
遍历数组
var arr = [1, 2, 3];
arr.forEach(function(x, index, a){
	console.log(x + '|' + index + '|' + (a === arr));
});
//1|0|true
//2|1|true
//3|2|true
14, arr.map()
数组映射，该方法不修改原数组
var arr = [1, 2, 3];
var b= arr.map(function(x){
	return x + 10;
});
b; //[11, 12, 13]
arr; //[1, 2, 3]
15, arr.filter()
数组过滤，该方法不修改原数组
var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var b = arr.filter(function(x, index){
	return x % 3 === 0;
});
b; //[3, 6, 9]
arr; //[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
16, arr.every()
判断数组中的所有元素满足某个条件
17，arr.some()
判断数组中是否存在元素满足某个条件

>>函数的创建
1，函数声明
function foo(){}
2, 函数表达式
var foo = function(){}
注：函数声明可以提前调用，而函数表达式不可以；

>>函数的调用方式
1，直接调用
foo();
2, 对象方法
o.method();
3, 构造器
new Foo();
4, call/apply/bind
func.call(o);

>>this
一般情况下，this绑定到调用该函数的对象上；

>>js函数作为一般函数调用和作为构造函数的区别
作为一般函数调用时，如果有return返回值则取返回值，没有则是undefined；
作为构造函数时，如果return一个对象，则返回该对象，如果没有return或者return一个基本类型，则按默认返回this处理;
function f1(){
	this.a = 1;
	return 5;
}
f1(); //5
new f1(); //{a: 1}
function f2(){
	this.a = 1;
	return {b: 2};
}
f2(); //{b: 2}
new f2(); //{b: 2}

>>call/apply
call()和apply()可以将函数中的this绑定到指定的对象
function add(c, d){
	return this.a + this.b + c + d;
}
var o = {a: 10, b: 20};
add.call(o, 1, 2); //33
add.apply(o, [1, 2]); //33
注：call()与apply()的作用一样，区别是call()以扁平化的方式传参，而apply()是以数组的方式传参；

>>bind()
1, 将函数中的this绑定到指定的对象, bind()返回的仍然是一个函数
function f(){return this.a;}
var o = {a: 1};
var g = f.bind(o);
g(); //1
2, currying
科里化，将一个函数拆分成不同的单元；
function add(a, b, c){
	return a + b + c;
}
var f1 = add.bind(null, 100);
f1(1, 2); //103
var f2 = f1.bind(null, 1000);
f2(1); //1101

>>闭包
内部函数包含了外部变量的引用，就是闭包。
function outer(){
	var localVar = 30;
	return function(){
		return localVar;
	}
}
var func = outer();
func(); //30
1, 闭包的常见例子：
1)事件点击
(function(){
	var localData = 'localData here';
	document.addEventListener('click', function(){
		console.log(localData);
	});
})();
2)异步请求的回调
(function(){
	var localData = 'localData here';
	$.ajax({
		url: 'test.php',
		success: function(){
			console.log(localData);
		}
	});
})();
2, 闭包的陷阱
以下程序段是应用闭包常见的陷阱：
document.body.innerHTML = '<div id="div1">aaa</div>' + 
	'<div id="div2">bbb</div><div id="div3">ccc</div>';
for(var i = 1; i < 4; i++){
	document.getElementById('div'+i).addEventListener('click', function(){
		alert(i); //all are 4!
	});
}
可改写为:
for(var i = 1; i < 4; i++){
	(function(){
		document.getElementById('div'+k).addEventListener('click, function(){
			alert(k);
		});
	})(i);
}
3, 闭包的优点
1)永久保存外层函数的变量；
2)实现封装，避免全局对象的污染：
var person = {};
(function(){
	var name = 'zhao';
	var age = 30;
	person.getName = function(){
		return name;
	};
	person.getAge = function(){
		return age;
	};
})();
4, 闭包的缺点
1)空间浪费
2)内存泄漏
3)性能消耗

>>原型
function Foo(){
	this.x = 1;
}
Foo.prototype.y = 2;
new Foo()的初始结构: 
{
	__proto__: Foo.prototype,
	x: 1
}
Foo.prototype的初始结构:
{
	constructor: Foo,
	__proto__: Object.prototype,
	y: 2
}

>>基于原型的继承
function Person(name, age){ 
	this.name = name;
	this.age = age;
}
Person.prototype.say = function(){
	console.log('My name is ' + this.name + ', I am ' + this.age + 
		' years old.');
};
Person.prototype.walk = function(){
	console.log(this.name + ' is walking.');
};
function Student(name, age, major){
	Person.call(this, name, age);
	this.major = major;
}
Student.prototype = Object.create(Person.prototype);
Student.prototype.constructor = Student;
Student.prototype.say = function(){
	console.log('My name is ' + this.name + ', I am ' + this.age + 
		' years old, I am majoring ' + this.major);
};
Student.prototype.learn = function(){
	console.log(this.name + ' is learning.');
};
这是最经典的组合式原型继承，
通过Person.call(this, name, age)继承基类的构造函数，
通过Student.prototype = Object.create(Person.prototype)继承基类的原型;
Student的原型链如下：
Student.prototype -> Person.prototype -> Object.prototype -> null;

>>BOM
1, window对象
BOM的核心，window对象指当前的浏览器窗口;
常用方法:
1)open()/close()
var win = window.open([url], [窗口名称], [参数字符串]);
url: http://www.baidu.com 或 test.php;
窗口名称: _blank(在新窗口打开, 默认), _self(当前窗口), _top(顶部窗口);
参数字符串: 'width=600,height=300,top=100,left=100,menubar=yes,toolbar=no,scrollbars=yes,status=yes';
window.close(); //关闭本窗口
win.close(); //关闭指定窗口
2)alert()/confirm()/prompt()
警示框、确认框、输入框;
3)print()
打印当前窗口内容
4)focus()/blur()
将焦点移入指定窗口或从指定窗口移开
5)moveBy()/moveTo(), resizeBy()/resizeTo(), scrollBy()/scrollTo()
移动窗口、调整窗口尺寸、滚动窗口内容;
6)setTimeout()/clearTimeout(), setInterval()/clearInterval()
计时器
var i = setInterval(function(){
	//...
}, 1000); //时间间隔的单位为毫秒
clearInterval(i);
2, history对象
记录用户浏览过的页面的历史记录，从窗口打开的那一刻开始记录;
history.length; //浏览器历史列表中的url数量
常用方法:
1)back()
前进到前一个页面，相当于go(-1);
2)forward()
后退到后一个页面，相当于go(1);
3)go(n)
跳转到某个具体的页面;
3, location对象
用于解析窗体的url;
举例: http://www.imooc.com:8080/list.php?courseid=8&chapterid=86#mediaid118
常用属性:
1)href //返回完整的url
2)protocol //协议 http
3)hostname //主机名 www.immoc.com
4)port //端口号 8080
5)host //主机名+端口号 www.imooc.com:8080
6)pathname //路径 list.php
7)search //查询字符串 ?courseid=8&chapterid=96
8)hash //锚 #mediaid118
常用方法:
1)assign()
加载新的文档
2)reload()
重新加载当前文档
3)replace()
用新的文档替换当前文档
4, navigator对象
包含浏览器的相关信息;
常用属性:
1)userAgent //用户代理，客户端发送给服务器的user-agent头部的值
2)appName //浏览器的名称
3)appVersion //浏览器的版本信息
4)appCodeName //浏览器代码名的字符串表示
5)platform //浏览器运行的操作系统信息
5, screen对象
用户的屏幕信息;
常用属性:
1)width/height //屏幕的宽度与高度
2)availWidth/availHeight //屏幕的可用宽度与可用高度
3)colorDepth //颜色位数

>>各种对象的尺寸
1, offsetParent
布局中设置了position属性(relative、absolute、fixed)的父容器，从最近的父节点开始查找，
一直到document.body;
2, 盒子的宽度与高度
box.offsetWidth;
box.offsetHeight;
3, 盒子的左边距和上边距
box.offsetLeft;
box.offsetTop;
4, 盒子滚动条的偏移距离
box.scrollLeft;
box.scrollTop;
5, 窗口显示区域的宽度与高度，不包括滚动条
window.innerWidth;
window.innerHeight;

