>>git是分布式版本控制系统，2005年由Linus开发，2008年GitHub网站上线；
版本控制只能跟踪文本文件，而word格式、图片、视频等都属于二进制文件，版本控制系统跟踪不了;

>>安装完git后进行名字和email地址的设置
git config --global user.name "hfutcjj"
git config --global user.email "*@qq.com"

>>创建并初始化版本库(repository)
mkdir mygit
cd mygit
git init
注: git init 后，当前目录下就多了一个 .git 的目录，这个目录就是Git来跟踪管理版本库的;
git init 也可以把其他已存在的目录变成git可管理的仓库;

>>添加文件到暂存区
git add text.txt //添加一个文件
git add . //添加所有改动的文件

>>将文件由暂存区提交到仓库
git commit -m 'add test.txt file'

>>查看文件
cat test.txt

>>查看仓库当前状态
git status

>>查看工作区做了哪些修改
git diff test.txt //工作区跟暂存区做比较
git diff HEAD -- test.txt //工作区跟分支做比较
git diff --cached test.txt //暂存区跟分支做比较

>>查看提交的历史记录
git log
精简每条历史记录在一行显示: 
git log --pretty=oneline

>>查看历史命令
git reflog

>>版本回退(已经提交到版本库)
git reset --hard HEAD^
git reset --hard HEAD~1
git reset --hard 1094a
注: HEAD是指向当前版本的指针;
HEAD表示当前版本(即最新的提交), 上一个版本就是HEAD^(同HEAD~1)，上上一个就是HEAD^^(同HEAD~2)，依次类推;
也可以用版本号的id来表示，只用写前面几位，只要系统能区分是哪个版本id就可以;

>>工作区、版本库(=暂存区stage+分支)
我们工作的目录，就是工作区;
.git目录就是版本库, 版本库包括暂存区和系统自动创建的第一个分支master(HEAD就是指向mster的指针);
git add 是把工作区修改的文件放到暂存区;
git commit 是把暂存区的文件全部提交到分支;

>>丢弃工作区文件的修改(仅修改工作区)
git restore <file>

>>退回提交给暂存区的文件(已经提交到暂存区)
git restore --staged <file>

>>删除文件
git rm test.txt
git commit -m 'remove test.txt'

>>关联本机和github网站
本地仓库和github仓库之间的传输是通过SSH加密的;
在本地电脑创建SSH key, 并把key添加到github, 就可以推送了;

>>关联本地仓库和github远程仓库
git remote add origin git@github.com:hfutcjj/mygit.git
注: 在本地的mygit库下运行这条命令;
添加后origin就是远程库的名字，这是默认叫法，也可以改成别的;

>>查看远程库的信息
git remote //远程仓库
git remote -v //远程库的详细信息

>>把本地库的内容推送到远程库
git push -u origin master (第一次)
git push origin master (以后)  
注: 其实是把本地的master分支推送到github上的master分支;

>>从远程库克隆
git clone git@github.com:hfutcjj/mygit.git
注: git支持ssh和https等多种协议, 如果公司只开放了http端口, 那么就只能使用https;

>>分支管理
//查看所有分支
git branch
//创建分支
git branch dev
//删除分支
git branch -d dev
//切换分支
git switch dev 或 git checkout dev
//创建并切换分支可以合并成一句
git switch -c dev 或 git checkout -b dev
//合并dev到当前分支
git merge dev
//解决冲突
当合并分支遇到冲突时，必须手动编辑合并失败的文件，然后再提交;
//删除远程分支
git push origin --delete dev

>>多人协作
//创建远程origin的dev分支到本地
git switch -c dev origin/dev 或 git checkout -b dev origin/dev
注: 新建后就可以直接推送到远程库, 也可以直接git pull
//指定本地dev分支与远程origin/dev的链接
git branch --set-upstream-to=origin/dev dev
注: 已存在的分支必须与远程分支关联后才能git pull
//多人协作推送冲突
git pull 把最新的提交从origin/dev抓取到本地，在本地解决冲突后再重新提交和推送;




