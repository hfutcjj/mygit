>>jquery对象与DOM对象的转换
1, DOM对象转换为jquery对象
var div = document.getElementById('container');
var jdiv = $(div);
2, jquery对象转换为DOM对象
var jdiv = $('div');
var div = jdiv[0]; //通过数组下标
var div = jdiv.get(0); //通过get()方法
注：通过下标[0]或者.get(0)获取的是DOM元素，而通过.first()获得仍然是jquery对象;

>>jquery选择器
1, $('#container')
id选择器
2, $('.container')
类选择器
3, $('p')
元素选择器
4, $('*')
全选选择器，选择所有元素节点组成的jquery对象;
js中获取所有节点集合：document.getElementsByTagName('*');
5, 层级选择器
$('div>p') //直接子元素p
$('div p') //所有后代p
$('div+p') //紧跟其后的第一个兄弟p
$('div~p') //后面的所有兄弟p
6, 其他选择器
$('div:first') //第一个
$('div:last') //最后一个
$('div:eq(index)') //= index
$('div:gt(index)') //> index
$('div:lt(index)') //< index
$('div:even') //偶数(下标从0开始)
$('div:odd') //奇数
$('div:not(selector)') //否定
$(':root') //文档的根元素
$(':animated') //正在执行动画的
$(':parent') //含有子元素或文本的元素
$(':empty') //与':parent'相反
$(':contains(text)') //包含指定文本的元素
$(':has(selector)') //包含指定选择器的元素
$(':visible') //显示的元素
$(':hidden') //隐藏的元素(1,display: none; 2,type="hidden"的表单元素; 3,width和height设为0)
$('[attribute']) //具有指定属性
$('[attribute1][attribute2]') //具有多个指定属性
$('[attribute="value"]') //属性等于指定值
$('[attribute!="value"]') //属性不等于指定值
$('[attribute^="value"]') //属性值以value开头
$('[attribute$="value"]') //属性值以value结尾
$('[attribute*="value"]') //属性值包含value串
$('[attribute~="value"]') //属性值包含value单词
$(':first-child') //是第一个子元素
$(':last-child') //是最后一个子元素
$(':only-child') //是唯一的子元素
$(':nth-child(n)') //是第n个子元素，n从1开始，这与':eq(index)'不同
$(':nth-last-child(n)') //是倒数第n个子元素
$(':input') //匹配所有input, textarea, select和button元素, 注意与$('input')的区别
$(':text') //文本框，等价于'[type="text"]', 下同
$(':password') //密码框
$(':radio') //单选框
$(':checkbox') //复选框
$(':submit') //提交按钮
$(':reset') //重置按钮
$(':button') //所有按钮
$(':image') //图像域
$(':file') //文件域
$(':enabled') //可用的表单元素
$(':disabled') //不可用的表单元素
$(':checked') //选中的单选或复选框
$(':selected') //选中的下拉列表项
$(this) //把js的上下文对象this封装成jquery对象

>>属性
1, attr('name') //获取属性值
2, attr('name', 'value') //设置属性值
3, prop('name') //获取属性值
4, prop('name', 'value') //设置属性值
5, removeAttr('name') //移除属性

>>文本与值
1, html() //获取第一个元素的html内容
2, html('value') //设置所有匹配元素的html内容
3, html(function(index, value){}); //通过函数返回值设置匹配元素的html内容
4, text() //获取所有元素的合并文本
5, text('value') //设置所有匹配元素的text内容
6, text(function(index, value){}); //通过函数返回值设置匹配元素的text内容
7, val() //获取第一个表单元素的值
8, val('value') //设置所有匹配表单元素的值
9, val(function(index, value){}); //通过函数返回值设置匹配表单元素的值
注: val()只能用在表单元素，而html()和text()不能用于表单元素;
html()和val()只能获取匹配集合中第一个元素的值，而text()获取匹配集合所有元素的值;

>>类
1, addClass('name') //元素添加一个或多个类
2, addClass(function(index, curClass){}) //通过函数返回值给元素添加类
3, removeClass('name') //元素删除一个或多个类，参数为空则删除所有类
4, removeClass(function(index, curClass){}) //通过函数返回值删除元素的类
5, toggleClass('name') //切换类名，有则删除，没有则添加
6, toggleClass(function(index, curClass){}) //通过函数返回值切换类

>>样式
1, 获取
css('color') //获取单个样式属性的值
css(['font-size', 'backgroundColor']) //获取多个样式属性值，传递数组，返回对象
2, 设置
css('font-size', '20px') //设置单个样式属性值
css('width', function(index, value){
	return parseInt(value) + 50 + 'px';
}); //通过函数返回值设置样式属性
css({
	'font-size': '20px',
	'backgroundColor': gray,
	'border': '1px solid red'
});	//通过对象设置多个样式属性
注: css()方法支持驼峰写法与大小写混搭的写法，而js的style只支持驼峰写法;
css('width', 50) 与 css('width', '50px') 的效果一样;

>>存储数据
1, 通过H5提供的data-前缀属性
<ul>
	<li data-animal-type="鸟类">喜鹊</li>
	<li data-animal-type="鱼类">金枪鱼</li>
	<li data-animal-type="蜘蛛">蝇虎</li>
</ul>
可以通过js动态修改，也支持CSS选择器进行样式设置;
2, 通过jquery的data()方法
data(key, value) //存数据
data(key) //取数据
removeData(key) //删除数据
存数据是把数据绑定到内部的DOM对象上;

>>创建节点
$('<div class="item">我是一段文本</div>');

>>插入节点
1, a.append(b) === b.appendTo(a) //在a的内部后面追加b
可以接受HTML字符串、DOM元素、或者jquery对象, 也可以接受多个参数;
$('.content').append(s);
$('.content').append(elem);
$('.content').append($(s));
$('.content').append(s1, s2);
2, a.prepend(b) === b.prependTo(a) //在a的内部前面添加b
3, a.before(b) === b.insertBefore(a) //在a的外部前面添加b
4, a.after(b) === b.insertAfter(a) //在a的外部后面添加b
注: $('li').appendTo('div')会将页面上的li元素移动到div里面，如果要复制，可以用
$('li').clone().appendTo('div');

>>删除节点
1, empty() //清空，仅移除子元素
$('.test').empty()
2, remove() //移除，自身及后代全部删除，包括绑定的事件
此方法可接受一个选择器参数，表示仅删除匹配的元素
$('p').remove();
$('p').remove(':contains("3")');
$('p:contains("3")').remove(); //等价
$('p').filter(':contains("3")').remove() //等价
3, detach() //删除, 参数同remove()
与remove()不同，通过detach()删除的元素，上面绑定的数据和事件还在;
var p = $('p').detach();
$('body').append(p); 

>>节点的复制、替换、包裹
1, clone() //只克隆结构，事件和绑定的数据丢失
clone(true) //结构、事件与数据都克隆
2, a.replaceWith(b) == b.replaceAll(a)
参数可以是字符串、DOM节点或者是jquery对象;
返回被替换掉的jquery对象;
3, wrap() //将匹配元素用指定参数包裹起来, 返回包裹之前的原始jquery对象
$('p').wrap('<div></div>')
4, unwrap() //删除匹配元素的父级

>>遍历
1, children() //返回子元素的集合
children(selector) //返回符合指定选择器的子元素的集合
2, find(selector) //查找符合条件的后代的集合
find()必须传入参数，如果要查找所有后代，则使用 find('*');
3, parent() //父元素
4, parents() //所有祖先集
parents(selector) //满足条件的祖先集
5, closest(selector) //从自身开始往上查找，找到第一个匹配的祖先元素
parents(selector)与closest(selector)的区别:
前者从父元素开始查找，返回所有满足条件的祖先元素;
后者从自身开始查找，返回第一个满足条件的祖先元素;
6, next() //下一个兄弟元素
7, prev() //上一个兄弟元素
8, siblings() //所有兄弟元素
注: 因为jquery对象是个合集，所以有些方法虽然看上去不需要参数，如
parent(), next(), prev()等，但也可以传入参数对合集对象进行筛选，如
parent(':last'), next(':contains("text")')等;

>>add()
给jquery合集对象中增加新的元素，参数可以是字符串、DOM对象以及jquery对象;
$('li').add('<p></p>');
$('li').add(document.createElement('p'));
$('li').add($('<p></p>'));

>>each()
遍历jquery合集对象
$('li').each(function(index, element){
	if(index % 2 == 0){
		$(this).css('color', 'red');
	}
});

>>filter()与find()
filter(selector)是从自身的合集中进行筛选;
find(selector)是从后代中进行筛选;

>>鼠标事件
1, click 与 dblclick
$('button').click(); //不带参数, 用程序触发按钮单击
$('div').click(function(e){ //带参数，回调函数定义事件响应
	//...
});
2, mousedown 与 mouseup
$('div').mouseup(function(e){
	alert(e.which); 
});
e.which表明是哪个鼠标键的动作，1--左键，2--中键，3--右键;
3, mousemove
//鼠标移动
4, mouseover 与 mouseout
//鼠标移入移出, 这两个事件会冒泡给祖先元素
5, mouseenter 与 mouseleave
//鼠标移入移出，这两个事件不会冒泡给祖先元素
6, hover
接收两个回调函数作为参数，相当于同时定义了mouseenter与mouseleave两个事件;
$('div').hover(mouseenterFn, mouseleaveFn);
7, focusin 与 focusout
//元素或元素内的子元素获得和失去焦点的事件
如输入框获得焦点时改变其父div的背景颜色
<div>
	<label>username: <input type="text"></label>
</div>
$('div').focusin(function(){
	$(this).css('background-color', 'yellow');
}).focusout(function(){
	$(this).css('background-color', '#fff');
});

