>>jquery对象与DOM对象的转换
1, DOM对象转换为jquery对象
var div = document.getElementById('container');
var jdiv = $(div);
2, jquery对象转换为DOM对象
var jdiv = $('div');
var div = jdiv[0]; //通过数组下标
var div = jdiv.get(0); //通过get()方法
注：通过下标[0]或者.get(0)获取的是DOM元素，而通过.first()获得仍然是jquery对象;

>>jquery选择器
1, $('#container')
id选择器
2, $('.container')
类选择器
3, $('p')
元素选择器
4, $('*')
全选选择器，选择所有元素节点组成的jquery对象;
js中获取所有节点集合：document.getElementsByTagName('*');
5, 层级选择器
$('div>p') //直接子元素p
$('div p') //所有后代p
$('div+p') //紧跟其后的第一个兄弟p
$('div~p') //后面的所有兄弟p
6, 其他选择器
$('div:first') //第一个
$('div:last') //最后一个
$('div:eq(index)') //= index
$('div:gt(index)') //> index
$('div:lt(index)') //< index
$('div:even') //偶数(下标从0开始)
$('div:odd') //奇数
$('div:not(selector)') //否定
$(':root') //文档的根元素
$(':animated') //正在执行动画的
$(':parent') //含有子元素或文本的元素
$(':empty') //与':parent'相反
$(':contains(text)') //包含指定文本的元素
$(':has(selector)') //包含指定选择器的元素
$(':visible') //显示的元素
$(':hidden') //隐藏的元素(1,display: none; 2,type="hidden"的表单元素; 3,width和height设为0)
$('[attribute']) //具有指定属性
$('[attribute1][attribute2]') //具有多个指定属性
$('[attribute="value"]') //属性等于指定值
$('[attribute!="value"]') //属性不等于指定值
$('[attribute^="value"]') //属性值以value开头
$('[attribute$="value"]') //属性值以value结尾
$('[attribute*="value"]') //属性值包含value串
$('[attribute~="value"]') //属性值包含value单词
$(':first-child') //是第一个子元素
$(':last-child') //是最后一个子元素
$(':only-child') //是唯一的子元素
$(':nth-child(n)') //是第n个子元素，n从1开始，这与':eq(index)'不同
$(':nth-last-child(n)') //是倒数第n个子元素
$(':input') //匹配所有input, textarea, select和button元素, 注意与$('input')的区别
$(':text') //文本框，等价于'[type="text"]', 下同
$(':password') //密码框
$(':radio') //单选框
$(':checkbox') //复选框
$(':submit') //提交按钮
$(':reset') //重置按钮
$(':button') //所有按钮
$(':image') //图像域
$(':file') //文件域
$(':enabled') //可用的表单元素
$(':disabled') //不可用的表单元素
$(':checked') //选中的单选或复选框
$(':selected') //选中的下拉列表项
$(this) //把js的上下文对象this封装成jquery对象

>>属性
1, attr('name') //获取属性值
2, attr('name', 'value') //设置属性值
3, prop('name') //获取属性值
4, prop('name', 'value') //设置属性值
5, removeAttr('name') //移除属性

>>文本与值
1, html() //获取第一个元素的html内容
2, html('value') //设置所有匹配元素的html内容
3, html(function(index, value){}); //通过函数返回值设置匹配元素的html内容
4, text() //获取所有元素的合并文本
5, text('value') //设置所有匹配元素的text内容
6, text(function(index, value){}); //通过函数返回值设置匹配元素的text内容
7, val() //获取第一个表单元素的值
8, val('value') //设置所有匹配表单元素的值
9, val(function(index, value){}); //通过函数返回值设置匹配表单元素的值
注: val()只能用在表单元素，而html()和text()不能用于表单元素;
html()和val()只能获取匹配集合中第一个元素的值，而text()获取匹配集合所有元素的值;

>>类
1, addClass('name') //元素添加一个或多个类
2, addClass(function(index, curClass){}) //通过函数返回值给元素添加类
3, removeClass('name') //元素删除一个或多个类，参数为空则删除所有类
4, removeClass(function(index, curClass){}) //通过函数返回值删除元素的类
5, toggleClass('name') //切换类名，有则删除，没有则添加
6, toggleClass(function(index, curClass){}) //通过函数返回值切换类

>>样式
1, 获取
css('color') //获取单个样式属性的值
css(['font-size', 'backgroundColor']) //获取多个样式属性值，传递数组，返回对象
2, 设置
css('font-size', '20px') //设置单个样式属性值
css('width', function(index, value){
	return parseInt(value) + 50 + 'px';
}); //通过函数返回值设置样式属性
css({
	'font-size': '20px',
	'backgroundColor': gray,
	'border': '1px solid red'
});	//通过对象设置多个样式属性
注: css()方法支持驼峰写法与大小写混搭的写法，而js的style只支持驼峰写法;
css('width', 50) 与 css('width', '50px') 的效果一样;

>>存储数据
1, 通过H5提供的data-前缀属性
<ul>
	<li data-animal-type="鸟类">喜鹊</li>
	<li data-animal-type="鱼类">金枪鱼</li>
	<li data-animal-type="蜘蛛">蝇虎</li>
</ul>
可以通过js动态修改，也支持CSS选择器进行样式设置;
2, 通过jquery的data()方法
data(key, value) //存数据
data(key) //取数据
removeData(key) //删除数据
存数据是把数据绑定到内部的DOM对象上;

>>add()
给jquery合集对象中增加新的元素，参数可以是字符串、DOM对象以及jquery对象;
$('li').add('<p></p>');
$('li').add(document.createElement('p'));
$('li').add($('<p></p>'));

>>创建节点
$('<div class="item">我是一段文本</div>');

>>插入节点
1, a.append(b) === b.appendTo(a) //在a的内部后面追加b
可以接受HTML字符串、DOM元素、或者jquery对象, 也可以接受多个参数;
$('.content').append(s);
$('.content').append(elem);
$('.content').append($(s));
$('.content').append(s1, s2);
2, a.prepend(b) === b.prependTo(a) //在a的内部前面添加b
3, a.before(b) === b.insertBefore(a) //在a的外部前面添加b
4, a.after(b) === b.insertAfter(a) //在a的外部后面添加b
注: $('li').appendTo('div')会将页面上的li元素移动到div里面，如果要复制，可以用
$('li').clone().appendTo('div');

>>删除节点
1, empty() //清空，仅移除子元素
$('.test').empty()
2, remove() //移除，自身及后代全部删除，包括绑定的事件
此方法可接受一个选择器参数，表示仅删除匹配的元素
$('p').remove();
$('p').remove(':contains("3")');
$('p:contains("3")').remove(); //等价
$('p').filter(':contains("3")').remove() //等价
3, detach() //删除, 参数同remove()
与remove()不同，通过detach()删除的元素，上面绑定的数据和事件还在;
var p = $('p').detach();
$('body').append(p); 

>>节点的复制、替换、包裹
1, clone() //只克隆结构，事件和绑定的数据丢失
clone(true) //结构、事件与数据都克隆
2, a.replaceWith(b) == b.replaceAll(a)
参数可以是字符串、DOM节点或者是jquery对象;
返回被替换掉的jquery对象;
3, wrap() //将匹配元素用指定参数包裹起来, 返回包裹之前的原始jquery对象
$('p').wrap('<div></div>')
4, unwrap() //删除匹配元素的父级

>>遍历
1, children() //返回子元素的集合
children(selector) //返回符合指定选择器的子元素的集合
2, find(selector) //查找符合条件的后代的集合
find()必须传入参数，如果要查找所有后代，则使用 find('*');
3, parent() //父元素
4, parents() //所有祖先集
parents(selector) //满足条件的祖先集
5, closest(selector) //从自身开始往上查找，找到第一个匹配的祖先元素
parents(selector)与closest(selector)的区别:
前者从父元素开始查找，返回所有满足条件的祖先元素;
后者从自身开始查找，返回第一个满足条件的祖先元素;
6, next() //下一个兄弟元素
7, prev() //上一个兄弟元素
8, siblings() //所有兄弟元素
9, filter() //过滤
filter(selector)是从自身的合集中进行筛选;
find(selector)是从后代中进行筛选;
10, index() //索引
返回参数对象在jquery合集对象中的索引，没有则返回-1;
参数可以为空，则表示jquery合集对象在同辈中的位置;
参数也可以为DOM元素或者jquery对象，则表示参数对象在jquery合集对象中的索引;
<ul>
	<a>a link</a>
	<li id="test1">1</li>
	<li id="test2">2</li>
	<li id="test3">3</li>
</ul>
$('li').index(); //1
$('li').index(document.getElementById('test3')); //2
$('li').index($('#test3')); //2
注: 因为jquery对象是个合集，所以有些方法虽然看上去不需要参数，如
parent(), next(), prev()等，但也可以传入参数对合集对象进行筛选，如
parent(':last'), next(':contains("text")')等;

>>鼠标事件
1, click 与 dblclick
$('button').click(); //不带参数, 用程序触发按钮单击
$('div').click(function(e){ //带参数，回调函数定义事件响应
	//...
});
2, mousedown 与 mouseup
$('div').mouseup(function(e){
	alert(e.which); 
});
e.which表明是哪个鼠标键的动作，1--左键，2--中键，3--右键;
3, mousemove
//鼠标移动
4, mouseover 与 mouseout
//鼠标移入移出, 这两个事件会冒泡给祖先元素
5, mouseenter 与 mouseleave
//鼠标移入移出，这两个事件不会冒泡给祖先元素
6, hover
接收两个回调函数作为参数，相当于同时定义了mouseenter与mouseleave两个事件;
$('div').hover(mouseenterFn, mouseleaveFn);
7, focusin 与 focusout
//元素或元素内的子元素获得和失去焦点的事件
如输入框获得焦点时改变其父div的背景颜色
<div>
	<label>username: <input type="text"></label>
</div>
$('div').focusin(function(){
	$(this).css('background-color', 'yellow');
}).focusout(function(){
	$(this).css('background-color', '#fff');
});

>>表单事件
1, focus 与 blur
//表单框获得与失去焦点事件
注: focus与focusin的区别
focus只在元素本身产生，不会冒泡到父元素，而focusin会冒泡到父元素；
blur与focusout也是一样。
<div>
	<label>username: <input type="text"></label>
</div>
$('div').focusin(function(){ //有效
	alert('focusin事件冒泡到父元素div');
});
$('div').focus(function(){ //无效
	alert('focus事件不会冒泡到父元素div');
});
2, change
//表单控件值的改变
<input>文本输入框和<textarea>值的改变，当失去焦点后触发change事件;
单选按钮、复选框和下拉选择框，当用鼠标做出选择时，立即触发change事件;
$('input').change(function(e){
	$('#result').html(e.target.value);
});
3, select
//表单框中的文本选中事件
4, submit
//提交事件 
可以在表单提交之前进行一些验证，可通过 e.preventDefault() 或 return false 
来组织浏览器的默认提交行为;

>>键盘事件
1, keydown 与 keyup
//键盘的按下与松开事件
$('input').keyup(function(e){
	alert(e.keyCode);
});
2, keypress
//键盘点击事件
注: keydown/keyup能捕获所有按键，而keypress只能捕获可打印的按键;
输入当前按键值只能通过keyup实现;

>>事件绑定与解绑
1, on()
//绑定事件
可以传入参数，参数会自动作为事件对象的data属性，即 e.data
$('div').on('click', callback);
$('div').on('click', 6, function(e){
	alert(e.data); //6
});
$('div').on('click', {name: 'zhao'}, function(e){
	alert(e.data.name); //'zhao'
});
2, off()
//事件解绑
$('div').off('click'); //删除click事件
$('div').off(); //删除所有事件
3, 事件委托
把时间绑定到祖先元素上，对下面的子元素进行事件委托;
<div>
	<button>btn</button>
</div>
$(document).on('click', 'div', function(e){
	alert('click');
});
当在button上点击时，事件通过冒泡到达div时才处理;
事件委托的好处：
1)通过祖先给下面满足选择器条件的元素统一绑定事件;
2)当添加新的元素，无须为其重新绑定事件，只要满足委托条件，事件自动生效;

>>事件对象
1, e.type //事件类型
2, e.target //事件触发的原始DOM对象
3. e.currentTarget //事件冒泡时的当前DOM对象，等于this
4, e.pageX/e.pageY //鼠标在当前页面的坐标，不随滚动条变化
5, e.clientX/e.clientY //鼠标相对视口的坐标
6, e.which //鼠标事件则表示哪个鼠标键，键盘事件则代表keyCode
7, e.keyCode //键盘按键码
8, e.preventDefault() //阻止浏览器的默认行为
9, e.stopPropagation() //阻止事件冒泡
注: target 与 currentTarget 的区别：
target是触发事件的原始DOM对象，不会变化;
而currenTarget是冒泡过程中的当前DOM对象，是会变化的，等同于this;

>>trigger() 与 triggerHandler()
触发事件可以由用户交互触发，也可以由程序触发，就是用这两个函数;
两者的区别：
1)trigger()会引起事件的默认行为，而triggerHandler()不会;
2)trigger()会触发匹配的所有元素，而triggerHandler()只触发第一个元素;
3)trigger()触发的事件会冒泡，而triggerHandler()不会冒泡;
//html
<div>
	<button>btn1</button>
	<button>btn2</button>
</div>
<input type="button" value="trigger">
<input type="button" value="triggerHandler">
//绑定事件与触发事件
$('div').click(function(e){
	alert('div click');
});
$('button').click(function(e){
	alert(e.target.innerHTML + ' click');
});
$('input:first').click(function(e){ //演示trigger触发
	$('button').trigger('click');
});
$('input:last').click(function(e){ //演示triggerHandler触发
	$('button').triggerHandler('click'); 
});

>>自定义事件
可以通过on绑定自定义事件，然后通过trigger()调用;
$('div').on('myFn', function(){
	alert('This is a customize event.');
});
$('div').trigger('myFn'); //触发自定义事件
自定义事件还可以传递参数;
$('div').on('myFn', function(event, param1, param2){
	alert(param1 + param2);
});
$('div').trigger('myFn', [1, 2]);

>>显示与隐藏
1, show(speed, callback) 
显示，speed可为 slow / fast / 毫秒, callback 为动画执行结束会调用的函数;
show(); //直接显示
show('slow'); //渐显
show(1000, function(){
	alert('渐显完成');
});

2, hide(speed, callback)
隐藏，参数同show();
show()与hide()方法通过同时改变元素的宽度、高度和透明度来实现动画；
3, toggle(speed, callback)
自动在show()与hide()之间进行切换;

>>滑动
1, slideUp(speed, callback)
上滑，参数同show();
slideUp()与slideDown()方法是通过仅改变元素的高度来实现动画;
2, slideDown(speed, callback)
下滑，参数同slideUp();
3, slideToggle(speed, callback)
上滑与下滑自动切换;

>>淡入淡出
1, fadeOut(speed, callback)
淡出, 参数同show()
fadeOut()与fadeIn()方法是通过仅改变元素的透明度来实现动画;
当透明度变为0时，元素从页面的布局中消失;
2, fadeIn(speed, callback)
淡入, 参数同fadeOut()
3, fadeToggle(speed, callback)
淡入淡出自动切换;
4, fadeTo(speed, opacity, [callback])
淡入淡出到指定透明度，前两个参数必须，第三个回调函数可选;
fadeOut()是将opacity从0变到1，fadeIn()是将透明度从1变到0;

>>自定义动画
1, animate(styles, [duration, easing, callback])
第一个参数属性组是必须的，后面的三个参数可选;
duration-动画的持续时间;
easing-动画的速度函数;
callback-动画完成后的回调函数;
属性组里的属性值必须是带有数字的，才能运用动画效果;
属性组里的属性值可以取下面这些值:
500, '500px', '+=100px', 'show/hide/toggle';
$('div').animate({
	left: 50,
	width: '50px',
	opacity: 'show',
	fontSize: '10em',
}, 500);
$('div').animate({
	left: '+=50px'
}, 'slow');
2, animate(styles, [options])
把更多可选的参数放到对象中，可以对动画的更多选项进行控制;
3, stop(stopAll, goToEnd)
当一个元素上添加了多个动画，即动画队列;
stopAll与goToEnd默认都为false;
$('div').animate({height: 300}, 5000);
$('div').animate({width: 300}, 5000);
$('div').animate({opacity: 0.3}, 5000);
$('div').stop(); //只会停止第一个动画，第二个第三个继续
$('div').stop(true); //停止第一个、第二个和第三个动画
$('div').stop(true, true); //停止动画，直接跳到第一个动画的最终状态

>>ajax方法
1, load()
load(url, [data], [callback]);
对象方法，给对象加载内容
$('div').load('test.txt', function(response, status, xhr){
	//加载完成后执行的回调函数
	//response: 加载的内容
	//status: 请求的状态，如success或error
	//xhr: XMLHttpRequest
});
2, $.getJSON()
$.getJSON(url, [data], [callback]);
加载JSON文件，返回json对象, 如
$.getJSON('test.json', function(data, status, xhr){
	$.each(data, function(index, field){
		//通过$.each遍历返回的data对象
	};
});
3, $.getScript()
$.getScript(url, [callback]);
加载并执行指定url的js代码，完成后执行callback回调，如
$.getScript('test.js', function(){
	//todo
});
4, $.get()
$.get(url, [data], [callback], [dataType]);
使用GET方法请求服务器中的php文件，在回调函数中处理返回的结果;
dataType可为text、xml、html、script、json、jsonp等;
$.get('test.php', function(data){
	//一般data返回的是json串，除非指定dataType为'json'
});
5, $.post()
$.post(url, [data], [callback], [dataType]);
使用POST方法请求服务器中的php文件，在回调函数中处理返回的结果;
$.post('test.php', {name: 'zhao', age: 30}, function(data){
	//data = JSON.parse(data);
});
6, $.ajax()
最强大的ajax方法，其他ajax方法都使用这个方法, 常见的配置参数:
$.ajax({
	url: 'test.php',
	type: 'post',
	data: {name: 'zhao', age: 30},
	dataType: 'json',
	success: function(data, status, xhr){
		//请求成功时的回调
	}, 
	error: function(xhr, status, error){
		//请求失败时的回调
	}
});
7, $.ajaxSetup()
配置ajax请求的默认选项, 后面的ajax请求对应的选项如果没设置则采用这个默认值;
$.ajaxSetup({
	dataType: 'json',
	success: function(data){
		//process data
	}
});
$('btn1').click(function(){
	$.ajax({url: 'test1.php'});
});
$('btn2').click(function(){
	$.ajax({url: 'test2.php'});
});
8, ajaxStart(), ajaxStop()
用于在ajax请求之前和之后调用;
$(document).ajaxStart(function(){
	$('#wait').show();
});
$(document).ajaxStop(function(){
	$('#wait').hide();
});

>>常用的jquery工具类函数
1, each()
1)作为对象方法, 遍历jquery合集对象
$('li').each(function(index, element){
	if(index % 2 == 0){
		$(this).css('color', 'red');
	}
});
2)作为类方法, 用来统一处理数组和对象
$.each(array, function(index, element){});
$.each(object, function(index, element){});
如果回调函数返回false, 则结束遍历;
$.each([1, 3, 5, 7, 9], function(index, elem){
	if(elem > 5) return false;
	console.log(elem);
}); //1 3 5
2, $.extend()
1)合并对象;
$.extend([deep], target, [object1], [object2]);
$.extend(v1, v2); //合并v2和v1，合并后的值保存到v1
$.extend(true, v1, v2); //深复制
var v = $.extend({}, v1, v2); //合并v2和v1, 返回合并后的对象, 不改变v1和v2
举例如下
var v1 = {
	apple: 0,
	banana: {weight: 52, price: 100},
	cherry: 97
};
var v2 = {
	banana: {price: 200},
	orange: 100 
};
$.extend(v1, v2); 
v1; //{apple: 0, banana: {price: 200}, cherry: 97, orange: 100}
$.extend(true, v1, v2);
v1; //{apple: 0, banana: {weight: 52, price: 200}, cherry: 97, orange: 100}
var v = $.extend({}, v1, v2);
v; //浅复制的合并
2)给全局jquery添加新方法;
如果仅接受一个参数，则意味着target被省略，此时target就是jquery本身，
可以通过这个方法为jquery添加新的方法;
(function($){
	$.extend({
		maxNum: function(v1, v2){
			return v1 > v2 ? v1 : v2;
		}
	})
)(jQuery);
$.maxNum(2, 5); //5
3, $.fn.extend()
$.fn是jquery的原型对象, $.prototype === $.fn;
该方法为jquery的原型添加新的属性和方法，这些方法可在jquery实例对象上调用;
(function($){
	$.fn.extend({
		fn: function(){
			//...
		},
		gn: function(params){
			//...
		}
	})
)(jQuery);
$('div').fn();
f('div').gn(value);
4, $.param()
序列化数组或对象;
var v = {name: 'zhao', age: 30, city: 'hefei'};
$.param(v); //name=zhao&age=30&city=hefei
5, serialize()
序列化表单;
$('form').serialize(); //username=zhao&age=30
注: serialize()用于表单的序列化，而param()用于对象和数组;
serialize()可将表单序列化为字符串传递到后台处理：
$.post('test.php', $(this).serialize(), function(data){});
6, serializeArray()
序列化表单，结果保存为数组;
$('form').serializeArray(); //[{name: 'username', value: 'zhao'},{name: 'age', value: 30}]
通过serializeArray()方法得到的数组需要经过处理，才能传递到后台;
举例:
//html
<form id="myform">
	用户名: <input type="text" name="username"><br>
	密码: <input type="password" name="password"><br>
	性别: <input type="radio" name="gender" value="1">男
		<input type="radio" name="gender" value="2">女<br>
</form>
<button id="btn">格式化表单数据</button>
//js
$('#btn').click(function(){
	var arr = $('#myform').serializeArray();
	var datas = [];
	arr.forEach(function(item){
		datas[item.name] = item.value;
	});
	$.post('test.php', datas, function(data){});
});
注: 上面的处理大可不必，可直接采用如下形式:
$.post('test.php', $(this).serialize(), function(data){});





