>>什么是app接口
客户端与服务端数据的交换;

>>前端向后端传参的几种方式
1, GET方式
通过url传参, test.php?name=zhao&age=25;
后端通过$_GET来获取数据;
1, form表单提交
最常见的形式, 也是ajax默认的提交方式;
其请求头Content-Type为: application/x-www-form-urlencoded;
后端通过$_POST超全局变量获取;
其未经解析的原始数据如: name=zhao&age=25;
2, json形式提交
这种形式, 需要设置请求头Content-Type为application/json;
var data = {
	name: 'zhao',
	age: 25
};
$.ajax({
	type: 'POST',
	url: 'test.php',
	data: JSON.stringify(data),
	contentType: 'application/json',
	dataType: 'json',
	success: function(data){
		console.log(data);
	}
});
后端获取数据的方式为:
$input = file_get_contents('php://input');
$input = json_decode($input);
这种参数是通过json串传递, 如: '{"name":"zhao","age":25}';
3, 文件上传
一般上传图片和文件时用到, Content-Type为multipart/form-data;
后端也是通过$_POST来接收;

>>后端接口输出格式
php后端一般输出json格式, 常见的是包含三个信息:
code--错误码
msg--错误码对应的描述
data--数据
$rs = array();
$rs['code'] = $code;
$rs['msg'] = $msg;
$rs['data'] = $data;
echo json_encode($rs);

>>app接口的鉴权
客户端需要凭证才能调用接口;
1, 传统web是基于cookie和session的
客户端输入用户名和密码 --> 服务端验证 --> 
服务端保存用户session信息 --> session_id写入cookie返回给客户端 -> 
以后客户端携带含有session_id的cookie -> 服务端验证session_id;
2, app是基于JWT(JsonWebToken)--json web令牌
服务端认证以后，生成一个json串，返回给用户,
后续客户端所有的请求都会带上这个json串,
服务端依靠这个json判断用户身份;

>>JWT的组成
1, Header
{
	"alg": "HS256", //采用的加密算法
	"typ": "JWT"  //类型
}	
header需要经过Base64Url编码后作为JWT的第一部分;
2, Payload
信息载体, 常用的有:
iss: 签发者
exp: 过期时间戳
sub: 面向的用户
aud: 接收方
iat: 签发时间
{
	"sub": "1234567890",
	"name": "John Doe",
	"admin": true
}
payload也需要经过Base64Url编码后作为JWT的第二部分;
3, Signature
创建签名, 使用编码后的header和payload以及一个密钥, 使用header中指定的签名算法进行签名;
HMACSHA256(
	base64UrlEncode(header) + '.' + 
	base64UrlEncode(payload), 
	secret
)

>>封装jwt
设计成单例模式:
class JwtAuth{
	private static $instance;
	public static function getInstance(){
		if(is_null(self::$instance)){
			self::$instance = new JwtAuth();
		}
		return self::$instance;
	}
	private function __construct(){} //禁止从外部构造对象
	private function __clone(){} //禁止克隆
}





