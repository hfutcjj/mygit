>>设置域名绑定
打开apache的配置文件httpd.conf, 添加
<VirtualHost *:80>
    DocumentRoot "/home/www/tp5/public"
    ServerName tp5.com
</VirtualHost>
打开系统文件C:/Windows/System32/drivers/etc/hosts文件, 修改
127.0.0.1 tp5.com

>>配置
修改public/index.php文件, 添加
//定义配置文件目录
define('CONF_PATH', __DIR__.'/../config/');
新建与application同级的文件夹config, 在里面添加配置文件;
配置文件都是以数组的形式返回;
能通过助手函数config()输出所有配置;
1, 惯例配置
位于thinkphp/convention.php, 是框架自带的配置文件, 一般不修改该文件;
2, 应用配置
在config文件夹下新建配置文件, 如config.php, database.php, session.php, cookie.php等;
这些配置文件会覆盖惯例配置中的配置项;
应用配置对这个应用有效;
3, 模块配置
新建config/index/config.php, 设置index模块的配置项;
新建config/admin/config.php, 设置admin模块的配置项;
模块配置仅对特定模块有效;
4, 场景配置
在config/config.php中添加一项: 'app_status'=>'home'或'office';
新建config/home.php, 设置home的配置选项;
新建config/office.php, 设置office的配置选项;
5, 动态配置
在控制器的构造函数中或者某个方法中配置; 
Config::set('key', 'value');
config('key', 'value');
注: 开发时一定要设置'app_debug'=>true, 否则错误不显示;

>>Config类与config()助手函数
1, Config类
Config类位于thinkphp/library/think/config/Config.php, 使用Config类需要先导入;
use think\Config;
Config::set('username', 'tangbing');
echo Config::get('username');
echo Config::has('username');
//也可以写成 $res = \think\Config::get();
2, config()助手函数
助手函数位于thinkphp/helper.php文件, 助手函数全局可用，不需要导入;
$res = config('username');
echo config('?username'); //前面加个?号，判断是否存在

>>系统环境变量
Env类位于thinkphp/library/think/Env.php, 使用Env类需要先导入, use \think\Env;
新建与application同级的文件.env配置文件, 在.env文件填写相关环境配置;
.env经常与config文件配合使用，用于开发环境、测试环境与线上环境的切换;
//.env
status=dev
[database]
username=root
password=root
//config/config.php
return [
	'status' => Env::get('app_status', 'dev'); //如果没有设置app_status环境变量，则默认使用第二个参数的值
];
//config/database.php
return [
	'username' => Env::get('database.username', 'root'),
	'password' => Env::get('database.password', 'root');
];
//config/dev.php
return [
	'app_now_status' => 'dev'
];
//config/test.php
return [
	'app_now_status' => 'test'
];
//config/prod.php
return [
	'app_now_status' => 'prod'
];
当不同环境之间切换时，只用修改.env文件;

>>绑定入口文件
在public/index.php中添加
define('BIND_MODULE', 'admin'); //url: localhost/user/validate
define('BIND_MODULE', 'admin/user'); //url: localhost/validate
define('BIND_MODULE', 'admin/user/validate'); //url: localhost

>>路由
1, tp采用单一入口模式访问应用，所有的请求都定位到入口文件, 系统从url参数解析当前请求的
模块、控制器和操作，标准的url访问格式：http://localhost/index.php/模块/控制器/操作;
入口文件默认可隐藏，隐藏后的url格式：http://localhost/模块/控制器/操作;
2, 命名规范: 模块名和操作名必须小写，控制器名和文件名保持一致，首字母大写;
控制器名如果采用驼峰命名，如HelloWorld，默认必须采用hello_world的形式访问，可以修改
配置文件的'url_convert'=>true来支持驼峰访问;
3, 带参数的url
http://localhost/index/index/index/name/zhao/age/30
http://localhost/index/index/index?name=zhao&age=30
url会自动寻找同名的参数，参数的先后顺序可以随意;
还可以精简url的参数形式省略参数名，修改配置 'url_param_type'=>1就可以，此时url变成
http://localhost/index/index/index/zhao/30
4, 自定义路由
修改application/route.app文件；

>>请求对象Request
Request对象处理客户端的数据以及服务器端的环境变量; 需要引入use think\Request;
Request对象封装了$_GET, $_POST, $_REQUEST, $_SESSION, $_COOKIE, $_FILES等全局变量的值;
1, Request对象的几种调用方式
1)$req = Request::instance(); //单例模式
$req->param('id');
2)class Index{
	public function index(Request $req){ //自动注入请求对象
		echo $req->param('id'); 
	}
}
3)class Index extends Controller{
	public function index(){
		echo $this->request->param('id'); //think\Controller包含request属性
	}
}
4)echo request()->param('id'); //request()助手函数
5)echo input('session.username'); //input()助手函数
6)echo session('username'); //session()助手函数
2, 获取请求信息
1)获取请求参数
$req->param(); //返回所有请求参数的数组, 不需要区分请求的类型，统一获取
$req->param('name');
$req->param('name', 'zhao'); //第二个参数是默认值
$req->param('name', 'zhao', 'strtolower'); //第三个参数是过滤规则
$req->get();
$req->get('name');
$req->post();
$req->cookie();
$req->session();
$req->file();
$req->method(); //请求的类型
$req->url(); //获取当前的url地址，有关url信息的有很多其他方法，具体参考文档
$req->module(); //当前模块
$req->control(); //当前控制器
$req->action(); //当前操作
$req->routeInfo(); //路由信息
$req->dispatch(); //调度信息
2)使用助手函数input()
input('get.');
input('get.name');
input('cookie.');
input('session.username');
input('file.image');

>>响应对象Response
public function getUserInfo($type = 'json'){
	Config::set('default-return-type', $type);
	$res = [
		'code' => 200,
		'data' => ['name'=>'zhao', 'age'=>30]
	];
	return $res;
	//等价于 return json_encode($res);
}

>>重定向
public function show($name){
	if($name == 'baidu'){
		$this->redirect('http://www.baidu.com');
		//return redirect('http://www.baidu.com'); //等价, 这是使用redirect()助手函数
	}else{
		return $this->fetch();
	}
}

>>命名空间
app命名空间代表application；
think命名空间代表thinkphp/library/think;

>>视图和模板
1, 调用视图
1)使用助手函数view()
//app/index/controller/Index.php
public function index(){
	return view(); //app/index/view/Index/index.html
	return view('main'); //app/index/view/index/main.html
	return view('page/main'); //app/index/view/page/main.html
}
2)使用模板控制器的方法(推荐)
//app/index/controller/Index.php
namespace app\index\controller;
use think\Controller;
class Index extends Controller{
	public function index(){
		return $this->fetch('main'); //参数的意义同view()
	}
}
3)不调用视图，直接输出字符串
$this->assign('name', 'zhao');
$this->display('My name is {$name}');
注: fetch()是调用视图文件, 而display()直接将字符串输出，常用于简单调试;
2, 从控制器向视图传递数据的四种方式
1)直接传参(常用)
//app/index/controller/Index.php
public function index(){
	return $this->fetch('main', ['name'=>'zhao', 'age'=>30]);
}
//app/index/view/index/main.html
<div>Name: {$name}, age: {$age}</div>
2)通过assign()方法(常用)
$this->assign('name', 'zhao');
$this->assign('age', 30);
return $this->fetch('main');
3)$this->view->city = 'hefei';
4)use think\View;
View::share('major', 'maths');
注: 视图模板编译后的文件保存在runtime/temp文件夹中;
3, 更改模板配置
模板配置在惯例配置thinkphp/convention.php里的template键里, 如果要更改模板配置, 
可以把template的值复制到应用配置里，再修改;
4, 字符串替换
模板提供了预定义的字符串替换, 如
__STATIS__: /static //根目录就是入口文件所在的目录，也就是public
__JS__: /static/js
__CSS__: /static/css
也可以自己定义字符串替换:
复制惯例配置中'view_replace_str'=>[], 在其中添加自定义字符串的配置, 如
'view_replace_str'=[
	'__CSS__' => '/front/css,
	'__UPLOAD__' => '/upload'
];
5, 系统变量
视图中可以直接通过$Think来调用系统变量，无须通过控制器传参;
//main.html
<div>{$Think.server.OS}</div> //等价于<?php echo $_SERVER['OS'] ?>
<div>{$Think.session.name}</div>
<div>{$Think.cookie.email}</div>
<div>{$Think.get.id}</div>
<div>{$Think.request.id}</div>
6, 变量调节器
视图中的变量可以使用函数以及运算来对输出进行调节;
<div>name: {$name|strtoupper}</div>
<div>name: {$name|substr=0,5}</div> //变量默认为第一个参数
<div>name: {$name|str_replace='o','*',###}</div> //变量不是第一个参数则用###来占位
<div>a+b: {$a+$b}</div>
7, 变量的默认值
使用default，如果没有从控制器传参，则使用默认值，如果有从控制器传参则使用传参的值;
{$name|default='zhao'}
8, 变量的原样输出
{literal}{$name}{/literal} //原样输出{$name}
9, 模板注释
{/*This is template comment*} //页面看不到, 查看源代码也看不到
而<!--This is html comment-->从源代码中能看到;
10, 条件判断
<!--if-->
{if $level>=2 and $level<=5}
	<div>This is a normal level</div>
{else}
	<div>The level is not normal</div>
{/if}
<!--switch-->
{switch name="Think.get.level"}
	{case value="0|1"}<div>优秀</div>{/case} //0|1表示0或1
	{case value="2"}<div>良好</div>{/case}
	{case value="3"}<div>及格</div>{/case}
	{default}其他
{/switch}
11, 循环
视图模板的循环有三种形式
<!--for-->
{for start="1" end="10" step="2" name="i"}
	<div>{$i}</div> //step可省略, 默认为1, name可省略, 默认为i
{/for}
<!--foreach方式1(常用)-->
{foreach $arr as $key=>$value}
	<div>{$key}: {$value.name}, {$value.age}</div>
{/foreach}
<!--foreach方式2-->
{foreach name="arr" key="k" item="v"}
	<div>{$k}: {$v.name}, {$v.age}</div>
{/foreach}
<!--volist-->
{volist name="arr" id="value"}
	<div>{$value.name}, {$value.age}</div>
{/volist}
12, 模板的布局
//目录结构
view 
	common 
		header.html --------被包含头模块
		footer.html --------被包含尾模块
		base.html ----------基类模块
	index
		main.html
		page1.html 
		page2.html
	layout.html ------------模板文件
1)模板包含 {include file=""}
//main.html
{include file="common/header"}
<div>This is container.</div>
{include file="common/footer"}
2)模板继承 {extend name=""}
//base.html
<div>
	{block name="myname"}This is index/main.{/block}
</div>
//index.html
{extend name="common/base"}
//page1.html
{extend name="common/base"}
<div>
	{block name="myname"}This is index/page1.{/block}
</div>
//page2.html
{extend name="common/base"}
<div>
	{block name="myname"}This is index/page2.{/block}
</div>
3)模板文件layout.html
修改应用配置，增加
'template' => [
	'layout_on' => true,
	'layout_name' => 'layout'
],
这样，控制器所有的视图$this->fetch()都指向view/layout.html文件了;
//layout.html
<div>__CONTENT__</div>  //__CONTENT__会由具体文件中的内容替换
//main.html
This is main.
//page1.html
This is page1.
//page2.html
This is page2.

>>模型
1, 设置数据库配置
在应用配置中新建database.php文件，将惯例配置中的数据库部分复制过来并修改;
2, 连接数据库的四种方式
//config.php
return [
	'app_debug' 	=> true,
	'my_database' 	=> [
		'type' 		-> 'mysql',
		'hostname'  => '127.0.0.1',
		....
	]
];
//database.php
return [
	'type' 		=> 'mysql',
	'hostname'  => '127.0.0.1',
	....
];
1)use think\Db;
$conn = Db::connect();
2)$conn = Db::connect([
	'type' => 'mysql',
	'hostname' => '127.0.0.1',
	....
]);
等价于 $conn = Db::connect(Config::get('my_database'));
3)$conn = Db::connect('my_database');
4)$conn = Db::connecct('mysql://root:root@127.0.0.1:3306/test#utf8');
参数格式为: tpye://username:password@hostname:port/database#charset;
3, 原生查询
$rs = Db::query('select * from tname where id = ?', [3]);
$rs = Db::execute('insert into tname(name, age) values(?, ?)', ['zhao', 30]);
4, 构造器查询
$rs = Db::table('tname')->where(['id'=>3])->select(); //二维数组
$rs = Db::name('tname')->where(['id'=>3]->find(); //一维数组
$rs = Db::table('tname')->where(['id'=>3])->value('name'); //一条记录的name字段的值，一个值
$rs = db('tname')->where(['id'=>3])->column('name'); //所有满足条件的记录的name字段的值，一维数组
注: table()里的表名含前缀, 而name()不含前缀;
Db::table('tname') 与 db('tname') 等价，后者是助手函数;




