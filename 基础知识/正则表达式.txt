>>基本语法
1, 元字符
.  任意字符(回车和换行符除外)
^  匹配开头
$  匹配结尾
|  或
\  转义
() 匹配子组
[] 字符类
量词:
?  出现0次或1次
*  出现0次或多次
+  出现1次或多次
{n} 出现n次
{n,m} 出现n到m次
{n,} 出现至少n次
注：范围量词{n,m}中间不能有空格，否则无效;
2, 转义字符
\n 换行
\r 回车
\f 换页
\t 水平制表
\v 垂直制表
3, 字符类
[a-zA-Z0-9]
\d 数字类 [0-9]
\D 非数字类 [^0-9]
\w 单词字符 [a-zA-Z0-9_]
\W 非单词字符 [^a-zA-Z0-9_]
\s 空白符 [\t\n\x0B\f\r]
\S 非空白符 [^\t\n\x0B\f\r]
\b 单词边界
\B 非单词边界
注: 对字符类取反，^必须放在[]里第一个位置，否则无效;

>>\b, \B, ^, $ 举例(js)
'This is a boy.'.replace(/is/g, 'X'); //'ThX X a boy.'
'This is a boy.'.replace(/\bis\b/g, 'X'); //'This X a boy.'
'This is a boy.'.replace(/\Bis\b/g, 'X'); 'ThX is a boy.'
'@123@abc@'.replace(/@./g, 'X'); //'X23Xbc@'
'@123@abc@'.replace(/^@./g, 'X'); //'X23@abc@'
'@123@abc@'.replace(/.@/g, 'X'); //'@12XabX'
'@123@abc@'.replace(/.@$/g, 'X'); //'@123@abX'

>>贪婪模式与非贪婪模式
量词匹配默认使用贪婪模式，采用尽可能多的匹配;
在量词后加?则使用非贪婪模式;
'12345678'.replace(/\d{3,6}/, 'X'); //'X78'
'12345678'.replace(/\d{3,6}?/, 'X'); //'X45678'
'12345678'.replace(/\d{3,6}/g, 'X'); //'X78'
'12345678'.replace(/\d{3,6}?/g, 'X'); //'XX78'

>>前瞻后顾
不仅考虑自身的匹配，还要考虑前面或者后面的字，语法：
exp(?=assert) //后面符合断言
exp(?!assert) //后面不符合断言
例如：
'a2*34vv'.replace(/\w(?=\d)/g, 'X'); //'X2*X4vv'
'a2*34vv'.replace(/\w(?!\d)/g, 'X'); //'aX*3XXX'

>>js中正则表达式
1, 定义正则表达式
var reg = /\bis\b/g; //字面量
var reg = new RegExp('\\bis\\b', 'g'); //构造函数
注：\b是匹配单词边界;
常用的修饰符(修饰符可省略)：
g: 全文搜索;
i: 忽略大小写;
m: 多行匹配;
2, 正则对象的属性
global: 是否全文搜索，默认为false;
ignoreCase: 是否区分大小写，默认为false;
multiline: 是否多行搜索，默认为false；
source: 正则表达式的文本字符串;
lastIndex: 当前匹配的下一个位置索引，仅对全文搜索有效;
3, 正则对象的方法
1)reg.test(s)
是否存在的匹配，返回true或false;
/\w\d/.test('a1b2c3d4'); //true
2)reg.test(s)
模式匹配，如果没有匹配的文本则返回null，否则返回一个结果数组；
非全文搜索的多次匹配结果都一样：
var reg = /(\w)\d/, s = 'a1b2c3';
var r = reg.exec(s);
r; //['a1', 'a', index: 0]
全文搜索每次匹配后reg的lastIndex都会变化，会导致结果不一样：
var reg = /(\w)\d/g, s = 'a1b2c3';
var r1 = reg.exec(s);
r1; //['a1', 'a', index: 0]
reg.lastIndex; //2
var r2 = reg.exec(s);
r2; //['b2', 'b', index: 2]
reg.lastIndex; //4
var r3 = reg.exec(s);
r3; //['c3', 'c', index: 4]
reg.lastIndex; //6
var r4 = reg.exec(s);
r4; //null
reg.lastIndex; //0
var r5 = reg.exec(s);
r5; //同r1
reg.lastIndex; //2
注：lastIndex同样会影响修饰符为g的全文搜索的test()结果：
var reg = /\w\d/g, s = 'a1b2';
reg.test(s); //true
reg.test(s); //true
reg.test(s); //false
可以通过每次构造一个新正则对象来消除结果的不一致性：
/\w\d/g.test('a1b2'); //true(all the time)
4, 字符串对象的方法
1)s.search(reg)
查找参数指定的子串的位置，返回匹配到的下标，不存在则返回-1;
接收的参数可以是字符串，也可以是正则表达式；
search()方法不执行全局搜索，它将忽略g，并且总是从字符串的开头进行查找：
'aaa123bbb'.search(/\w\d/); //2
2)s.match(reg)
查找匹配的结果数组;
这个方法reg是否为全局搜索对结果的影响很大，
reg非全局返回第一次匹配的结果，包括分组，
reg全局则返回所有匹配的结果，但不包括分组信息;
注意这个方法与reg.exec(s)返回结果的区别；
var s = 'a1b2c3d4', reg = /(\w)\d/;
var r = s.match(reg);
r; //['a1', 'a', index: 0]
var s = 'a1b2c3d4', reg = /(\w)\d/g;
var r = s.match(reg);
r; //['a1', 'b2', 'c3', 'd4']
3)s.replace(reg, rep)
对字符串进行正则替换;
第一个参数可以是字符串，也可以是正则表达式;
第二个参数可以是替换字符串，也可以是回调函数，自定义替换结果；
'a1b1c1'.replace('1', 'X'); //'aXb1c1'
'a1b1c1'.replace(/1/g, 'X'); //'aXbXcX'
'a1b2c3d4'.replace(/\d/g, function(match, index, origin){
	return parseInt(match)+1;
}); //'a2b3c4d5'
注：replace()方法传入字符串只能替换第一个匹配
4)s.split(reg)
将字符串按指定参数分割成数组；
'a,b,c,d'.split(','); //['a', 'b', 'c', 'd']
'a1b2c3d4'.split(/\d/); //['a', 'b', 'c', 'd', '']