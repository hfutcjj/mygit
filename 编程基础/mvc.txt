>>MVC简介
模型(model)-视图(view)-控制器(controller)
将数据显示与业务逻辑分离;
控制器: 调用模型，并调用视图，将模型产生的数据传递给视图让视图去显示;
模型: 获取数据;
视图: 显示数据;

>>入口程序
单一入口机制: 在一个web应用程序中，所有的请求都指向同一脚本文件, 如
index.php?xxx;
优点: 安全监测, 请求过滤;

>>简易目录规范
mvc
	libs ----------------------------------类库目录
		Controller ------------------------控制器目录
			testController.class.php 
		Model -----------------------------模型目录
			testModel.class.php
		View ------------------------------视图目录
			testView.class.php 
		ORG -------------------------------第三方类库
	config.php ----------------------------配置文件
	common.php ----------------------------公共函数文件
	index.php -----------------------------入口文件
	
>>实现简易MVC
//index.php
//入口文件形式: index.php?controller=控制器名&method=方法名
require_once('common.php');
$controllerAllow = ['test', 'index'];
$methodAllow = ['show'];
$controller = in_array($_GET['controller'], $controllerAllow) ? $_GET['controller'] : 'index';
$method = in_array($_GET['method'], $methodAllow) ? $_GET['method'] : 'show';
C($controller, $method);
//common.php
function C($name, $method){
	$controllerName = $name.'Controller';
	require_once('/libs/Controller/'.$controllerName.'.class.php');
	$obj = new $controllerName();
	$obj->$method();
}
function M($name){
	$modelName = $name.'Model';
	require_once('/libs/Model/'.$modelName.'.class.php');
	$obj = new $modelName;
	return $obj;
}
function V($name){
	$viewName = $name.'View';
	require_once('/libs/View/'.$viewName.'.class.php');
	$obj = new $viewName;
	return $obj;
}
//testController.class.php
class testController{
	public function show(){
		$testModel = M('test');
		$data = $testModel->get();
		$testView = V('test');
		$testView->display($data);
	}
}
//testModel.class.php
class testModel{
	public function get(){
		return 'hello, bing';
	}
}
//testView.class.php
class testView{
	public function show($data){
		echo $data;
	}
}

>>MVC的变形
1, 无Model模式的web开发, 常用于不用操作数据库的静态页面;
2, 无View模式的api接口开发, 常用于开发app接口;
3, Model再分层和Controller再分层;
	




