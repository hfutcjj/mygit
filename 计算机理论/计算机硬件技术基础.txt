>>计算机的发展历程
真空管计算机、晶体管计算机、集成电路计算机、超大规模集成电路计算机、
人工智能计算机(量子计算机、光子计算机、分子计算机);

>>计算机的应用领域
科学计算、实时控制、信息处理、辅助设计、电子商务；

>>冯诺依曼结构(存储程序控制)
计算机由运算器、控制器、存储器、输入设备与输出设备组成；
数据和程序以二进制形式不加区别地存储在存储器中；
计算机在工作时从存储器中取出指令并执行；
注: 哈佛结构将数据与程序分开存储，避免了冯诺依曼结构的缺陷；

>>指令周期：程序的执行过程
取指、译码、执行、回写；
注: 回写包括修改程序计数器IP；

>>计算机的性能指标
字长：CPU一次能处理的二进制位数；
MIPS: 计算机每秒能处理的指令条数，单位为每秒百万条指令；
FLOPS：计算机每秒能执行的浮点运算次数；
主存容量：主存储器能存储二进制数据的容量，目前单位为GB；
CPU的主要参数指标：
主频：CPU的内部工作频率，主频直接影响计算机运算速度；
外频：CPU的外部时钟频率，也就是主板频率；
倍频：主频/外频；
接口：CPU与主板连接的接口，接口方式有引脚式、卡式、针脚式、触点式；
缓存：CPU内部的存储器，为解决CPU与内存的速度不匹配问题；
扩展指令集：专门为提高计算机在多媒体、三维图形等方面的应用能力而增加的指令；
制造工艺：CPU制程，单位为纳米nm；
电压；

>>十进制转换为二进制
整数部分：除2取余，逆序排列；
小数部分：乘2取整，正序排列；
举例：100.345->1100100.01011
整数部分 100/2->50(0)/2->25(0)/2->12(1)/2->6(0)/2->3(0)/2->1(1)/2->0(1): 1100100;
小数部分 0.345*2->0.69(0)*2->1.38(1)*2->0.76(0)*2->1.52(1)*2->1.04(1): 01011;

>>原码，反码，补码
正数的原码反码补码都一样；
负数的反码：符号位不变，其余位取反；
负数的补码：符号位不变，其余位取反加一；
注: 计算机里的数统一用补码表示，补码可以直接参与运算；
补码表示的单字节数的取值范围：10000000(-128)~01111111(127);

>>bdc码
将每位十进制数用4位二进制数来表示；

>>CPU简介
CPU由运算器和控制器组成；
运算器包括算术逻辑单元(ALU)和一些寄存器；
所以CPU的两个基本功能是运算和控制，而运算又分为算术运算和逻辑运算；

>>总线
总线是各部件之间信息传输的通道，分为地址总线AB、数据总线DB、控制总线CB；

>>运算的电路实现
逻辑运算电路实现比较简单，有与门、或门、非门、异或门电路；
算术运算可以由逻辑运算电路实现，加法可以用异或门电路实现，而其余算术运算都可以转换成加法；

>>80x86微处理器的演变历程
8086->80286->80386->80486->Pentium

>>8086处理器简介
16位微处理器，包含16根数据线和20根地址线；
由执行单元(EU)和总线接口单元(BIU)组成；
EU负责译码与执行；
BIU负责CPU与存储器和I/O接口的通信，即取指令、取操作数、存运算结果；
EU与BIU并行工作，将一个完整的指令周期拆分为两条流水线，提高效率，称为两级流水线；

>>8086处理器的内部寄存器
8086内部共有14个16位寄存器，按功能分为
1, 通用寄存器
1)数据寄存器 AX(AH, BL), BX(BH, BL), CX(CH, CL), DX(DH, DL)
可以按字(16位)访问，也可以按字节(8位)访问，常用于逻辑运算与算术运算中；
2)地址指针寄存器 SP, BP
用来指示存取位于当前堆栈段中数据的地址；
堆栈指针寄存器SP指示当前堆栈的栈顶地址；
基址指针寄存器BP指示堆栈段中某一数据区的首地址；
3)变址寄存器 SI, DI
用于存放当前数据串的偏移地址；
分为源变址寄存器SI和目标变址寄存器DI；
2, 控制寄存器
1)指令指针寄存器 IP
指示BIU要取的下一条指令的地址，又叫程序计数器；
2)标志寄存器 FLAGS
16位二进制位只用了9位，即6个状态位和3个控制位；
状态位反映逻辑或算术运算后结果的状态，控制位用来控制CPU的操作；
6个状态位是进位标志CF，辅助进位标志AF，奇偶标志PF，零标志ZF，符号标志SF，溢出标志OF；
3个控制位是方向标志DF，中断允许标志IF，跟踪标志TF；
3, 段寄存器
1)代码段寄存器 CS
2)数据段寄存器 DS
3)堆栈段寄存器 SS
4)附加段寄存器 ES
设计段存储器的目的是为了对存储器进行分段；
例如通过 CS+IP 来计算下一条指令的地址；

>>8086处理器的外部引脚
1, 数据和地址引脚
包括16个数据引脚D0~D15，和20个地址引脚A0~A19;
物理上数据引脚和地址引脚采用分时复用的方式共用引脚，为AD0~AD15;
2, 控制引脚
1)ALE 地址锁存允许
有效时，表示数据地址引脚当前在传送地址信息，否则是数据信息；
2)M/IO* 存储器/IO访问
有效时，表示CPU将访问存储器，否则访问IO接口；
3)WR*, RD* 写控制, 读控制
WR*有效时，表示CPU正在写数据；
RD*有效时，表示CPU正在读数据；
4)READY 就绪
用于CPU与较慢的设备通信时，判断是否要等待；
有效时，则进入下一个时钟周期，否则插入等待周期Tw;
5)DEN* 数据允许
有效时，表示当前数据总线上正在传送数据；
6)DT/R* 数据发送/接收
有效时，表示数据从CPU输出，否则表示数据输入到CPU；
7)BHE* 总线高位允许
有效时，表示高八位数据D15~D8有效，否则无效；
8)INTR 可屏蔽中断请求
有效时，表示有设备向CPU申请可屏蔽终端；
该请求的优先级较低，CPU可通过关中断指令清除标志寄存器中的IF标志，从而对中断请求进行屏蔽；
9)INTA* 可屏蔽中断响应
有效时，表示中断得到响应，CPU进入中断响应周期；
10)NMI 不可屏蔽终端请求
有效时，表示外界向CPU请求不可屏蔽中断；
该请求优先级很高，CPU必须响应，比如系统突然断电；
11)HOLD 总线保持
有效时，表示有设备向CPU申请占用总线；
12)HLDA 总线保持响应
有效时，表示请求设备全面接管总线；
13)RESET 复位
有效时，将使CPU回到初始状态；
14)CLK 时钟输入
系统通过该引脚给CPU提供内部定时信号, 8086的标准工作时钟为5MHz;
15)VCC 电源输入
向CPU提供+5V电源；
16)GND 接地
向CPU提供参考地电平；
17)MN/MX* 模式选择
有效时，表示CPU工作在最小模式，否则工作在最大模式；
18)TEST* 测试
该引脚与WAIT指令配合使用，使CPU正常执行或断点执行，以便调试；
注: INTR表示高电平有效，INTA*的另一个写法是INTA加上划线(取反的意思)，表示低电平有效；

>>存储器的分段管理
1，8086的寄存器为16位，能直接寻址64KB的地址空间，而地址线有20根，允许寻址1MB地址空间，
所以内存采用分段管理；
2，物理地址与逻辑地址
物理地址(20位): CPU访问存储器时实际寻址所使用的地址；
逻辑地址(16位): 程序和指令所用的地址，包括段地址和偏移地址两部分；
转换：物理地址=段地址左移4位(*2^4)+偏移地址。如(CS)=4232H, (IP)=66H，则物理地址=
42320H+66H=42386H；
逻辑地址转换为物理地址是由BIU里的地址加法器完成；
3，8086中地址线的低16位用来访问IO接口，所以IO接口不需要分段；

>>时序控制
1，总线读写是最基本的时序控制；
2，三种时序周期
1)时钟周期
由CPU的主频决定，一个时钟周期为T；
2)总线周期
BIU完成一次访问存储器或IO接口所需的时间。一个总线周期包括若干个时钟周期，如T1+T2+T3+T4，或
T1+T2+T3+Tw+T4，一般T1阶段传送地址，后几个阶段传送数据；
3)指令周期
执行一条指令所需的时间，由若干个总线周期组成；

>>CPU的复位与启动
1，RESET引脚触发时，CPU复位到默认值，即(CS)=FFFFH, (IP)=0000H, 其他寄存器置0，指令队列清空；
复位后的初始地址=(CS)*2^4+(IP)=FFFF0H，该地址是主板上BIOS的入口地址；
2，BIOS的功能
1)硬件初始化；
2)将权力移交给操作系统；

>>CISC与RISC
1，每种CPU在设计时就规定好了一套指令集，分为CISC和RISC；
2，CISC(复杂指令集计算机)
Intel公司生产的大部分处理器属于x86架构，属于CISC处理器，主要用于桌面应用；
RISC(精简指令集计算机)
嵌入式移动应用的ARM处理器采用的是RISC；

>>寻址方式
就是以什么方式找到操作数，分为以下几种：
1，立即数寻址
操作数在指令中提供，立即数可以是8位，也可以是16位，主要用来给寄存器赋值；
MOV AH, 4CH
MOV CX, 'ab'
2，寄存器寻址
操作数在CPU寄存器中；
MOV AL, BL 
MOV SP, BP 
注: 前两种寻址在CPU内部完成，不需要执行总线周期；
3，直接寻址
数据在存储器中，有效地址由指令给出；
MOV AX, [1680H]* //把DS中1680H和1681H两单元的字内容复制到AX
MOV AX, DATA //把DS中存储单元中DATA的字内容复制到AX
4，存储器间接寻址
数据在存储器中，有效地址由寄存器给出；
MOV AL, [BH] //存储器地址 DS*10H+[BH]
MOV [BP], CL //存储器地址 SS*10H+[BP]
注: 系统中BP寻址的数据默认在堆栈段，其他间接寻址默认在数据段；
5，基址加变址寻址
有效地址由基址寄存器与变址寄存器之和给出；
MOV CL, [BX+SI] //存储器地址 DS*10H+[BX+SI]
MOV [BP+SI], CH //存储器地址 SS*10H+[BP+SI]
6，寄存器相对寻址
有效地址由寄存器与位移量之和给出；
MOV CL, [SI+200H] //存储器地址 DS*10H+SI+200H
MOV LIST[DI], AX //存储器地址 DS*10H+LIST+DI
7，相对基址加变址寻址
有效地址由基址寄存器、变址寄存器与位移量之和给出；
MOV BL, [BX+SI+100H] //存储器地址 DS*10H+BX+SI+100H
MOV LIST[BP+DI], BX //存储器地址 SS*10H+LIST+BP+DI

>>数据传送指令
1，通用数据传送指令
1)MOV 数据传送
MOV DS, AX
注：不能在两个内存之间传送数据，如 MOV [SI], [BX] 不对，可改为两步
MOV AX, [BX] 和 MOV [SI], AX；
2)PUSH, POP 堆栈操作
PUSH AX //将AX中数据压入栈顶
POP AX //将栈顶元素弹出到AX
3)XCHG 交换数据
XCHG AL, BL
XCHG [2530], CX //寄存器与内存的字交换
2，取地址指令
1)LEA 取偏移地址
LEA AX, [2782] //AX的值为2782
LEA BX, [BP+SI] //BX的值为BP+SI
3，标志位传送指令
1)LAHF 
读标志位，将FLAGs的值读入AH
2)SAHF
设置标志位，将AH的值写入
3)PUSHF
将FLAGs的值入栈
4)POPF
将栈顶的值出栈到FLAGs
4，IO端口传送指令
1)IN 从IO端口输入
IN AL, 50H //将50H端口的字节读入AL
IN AX, DX //将DX和DX+1所指的两个端口的数据读入AX
2)OUT 输出到IO端口
OUT 50H, AL 
OUT DX, AX

>>算术运算指令
所有算术运算结果都影响FLAGs标志位；
1，ADD 不带进位的加法
ADD AL, 50H //AL+50H->AL
ADD [BX+DI], AX //(BX+DI, BX+DI+1)+AX->(BX+DI, BX+DI+1)
2，ADC 带进位的加法
ADC AX, SI //AX+SI+CF->AX
3，INC 自增
INC AL //++AL
4, SUB 不带借位的减法
SUB BX, CX
5, SBB 带借位的减法
SBB BX, CX //BX-CX-CF->BX
6, DEC 自减
DEC AX
7, NEG 取相反数
NEG AL //0-AL
8, CMP 比较
CMP AX, 2000H //比较的结果放FF中
9，MUL 无符号数的乘法
MUL BL //AL*BL->AX
MUL CX //AX*CX->(DX, AX)
10, IMUL 有符号数的乘法
11，DIV 无符号数的除法
DIV CL //AX/CL->AL...AH
DIV CX //(DX, AX)/CX->AX...DX
12, IDIV 有符号数的除法

>>逻辑运算指令
1，AND 逻辑与
AND AL, 06H
2，OR 逻辑或
OR AX, 0068H
3，NOT 逻辑非
NOT AX
4, XOR 逻辑异或
XOR AH, AL
5, TEST 测试逻辑与
TEST AX, 8000H //AX与8000H逻辑与，结果不放入AX, 只改变标志位ZF

>>移位指令
分为8种不同的移位操作；
1，SAL 非循环算术左移
2，SHL 非循环逻辑左移
3，SAR 非循环算术右移
4，SHR 非循环逻辑右移
5，ROL 循环左移
6，ROR 循环右移
7, RCL 带进位的循环左移
8，RCR 带进位的循环右移
注：算术移位保持符号位不变，而逻辑移位操作无符号数，用0填补空出的位；
循环移位是将操作数首位相接；
SAL AX, 1
MOV CL, 6
ROR BX, CL

>>控制转移指令
1，JMP 无条件转移
JMP 1000H //段内转移
JMP 2000H:1000H //段间转移
2，条件转移
条件转移有很多种，列举几个：
JZ ZF=0则转移
JO OF=0则转移
JG 大于则转移
JLE 小于或等于则转移
3，LOOP 循环控制
每次将CX减一，直到CX=0则退出循环；
MOV CX, 0100H
KKK: ....
LOOP KKK
4，CALL 调用
RET 返回
CALL的使用方式与JMP类似；
CALL通常与RET成对使用；

>>处理器控制指令
1，标志位控制
CLC, STC, CMC
分别将CF标志位清零、置1和取反；
CLD, STD
分别将DF标志位清零、置1；
CLI, STI
分别将IF标志位清零、置1；
2，同步控制
ESC CPU交权，由协处理器接手；
WAIT CPU等待，直到TEST引脚出现有效信号；
HLT CPU暂停工作；
NOP 让CPU空转3个时钟周期，常用于延时；

*********************************

>>存储器编址
存储器按字节组织，每个字节有一个地址；
编址从0开始，比如1M的内存，编址就是00000H~FFFFFH；

>>寻址空间
指CPU对于内存寻址的能力；
8086有20根地址线，所以最大能访问的内存空间是2^20=1MB；

>>存储器的分段管理
1，CPU的寄存器是16位，只能寻址2^16=64KB的地址空间，而地址线有20根，可以寻址1MB的存储空间，
所以要采用分段管理；
分段后由两个16位的逻辑地址(段基址、偏移量)来表示一个20位的物理地址；
段的分配工作由操作系统完成；
2，物理地址和逻辑地址
物理地址是20位地址线表示的实际地址；
逻辑地址是程序和指令使用的地址，是16位寄存器表示的地址；
转换：物理地址=段基址*2^4(10H)+偏移量；

>>存储器的分级管理
寄存器 > 缓存Cache > 内存 > 外存

>>虚拟存储器
扩充内存，使用一部分硬盘空间来充当内存使用；
每次访问内存时，要进行虚、实地址的变换；

>>存储器的分类
1，按存储介质
半导体存储器：内存
磁存储器：外存，如硬盘、软盘、磁带
光存储器：外存，如光盘
2，按存取方式
随机访问存储器RAM
只读存储器ROM
顺序访问存储器SAM

>>存储器的扩展
实际的存储器由多个存储芯片进行连接扩展；
1，位扩展
存储芯片的位数不能满足存储器的要求，如8K*8b->8K*16b;
2，字扩展
存储芯片的容量不能满足存储器的要求，如2K*8b->16K*8b;
3，字位扩展
存储芯片的容量和位数都不能满足存储器的要求，如2K*4b->8K*8b；
注：使用L字*K位芯片扩充成M字*N位存储器，需要(M/L)*(N/K)片芯片，分M/L组，每组N/K片；

>>内存的性能指标
1，内存容量
=颗粒数(存储芯片)*颗粒容量
2，内存主频
内存的最高工作频率，单位为MHz
3，存取速度
4，数据宽度
内存一次能同时传输的数据位数，单位为bit
5，内存带宽
单位时间(每秒)能传输的数据位数，=工作频率*数据宽度
6，内存的"线"数
内存条与主板的接触点，又称为"金手指"

>>硬盘的性能指标
1，容量
=柱面数*磁道数*扇区数*512B
2，转速
单位为rpm
3，缓存
读取硬盘数据时，磁头会把当前簇后面的几个簇的数据读取到缓存；
注：簇指的是连续的几个扇区；
4，平均寻道时间
单位为ms
5，传输速率
磁头把数据从盘片读入缓存的速度，或从缓存写入盘片的速度；
6，硬盘接口
IDE、SATA、SCSI、SAS

>>内存技术进展
1，SDRAM 同步动态随机存储器
2，DDR 双倍速率SDRAM
采用双时钟差分信号的技术，使其在单个时钟周期内的上下沿都能进行数据传输；
3，DDR2
4，DDR3

>>外存技术进展
1，磁存储器
包括硬盘、软盘、磁带等；
2，光存储器
光盘，分为CD和DVD；
3，固态硬盘(SSD)











